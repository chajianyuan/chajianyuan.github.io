<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南殇的博客</title>
  
  <subtitle>越努力，越幸运</subtitle>
  <link href="https://chajianyuan.github.io/atom.xml" rel="self"/>
  
  <link href="https://chajianyuan.github.io/"/>
  <updated>2021-06-17T03:26:51.785Z</updated>
  <id>https://chajianyuan.github.io/</id>
  
  <author>
    <name>chajianyuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react：受控组件 VS 非受控组件</title>
    <link href="https://chajianyuan.github.io/2021/06/04/react%EF%BC%9A%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%20VS%20%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/"/>
    <id>https://chajianyuan.github.io/2021/06/04/react%EF%BC%9A%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%20VS%20%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/</id>
    <published>2021-06-04T02:18:23.000Z</published>
    <updated>2021-06-17T03:26:51.785Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、非受控组件"><a href="#一、非受控组件" class="headerlink" title="一、非受控组件"></a>一、非受控组件</h4><ol><li>必须手动操作DOM元素，使用setState无法操作</li></ol><p>ref</p><p>defaultValue defaultChecked</p><p>手动操作DOM元素</p><p>使用场景<br>    必须手动操作DOM元素，setState实现不了<br>    举个 🌰<br>        文件上传<code>&lt;input type=&quot;file&quot; /&gt;</code><br>        某些富文本编辑器，需要传入DOM元素<br>        <code>&lt;input defaultValue=&quot;value&quot; /&gt;</code><br>            如果想更新defaultValue的值，需要加一个key,<code>&lt;input defaultValue=&quot;value&quot; key=&quot;value&quot; /&gt;</code><br>            ❓为什么加一个key，就能更新defalutValue的值了呢？</p><h4 id="二、受控组件"><a href="#二、受控组件" class="headerlink" title="二、受控组件"></a>二、受控组件</h4><ol><li>受state影响</li></ol><p>表单的值，受state影响<br>需要自行监听onChange，更新state<br>无需呀手动操作DOM</p><h4 id="三、受控组件-vs-非受控组件"><a href="#三、受控组件-vs-非受控组件" class="headerlink" title="三、受控组件 vs 非受控组件"></a>三、受控组件 vs 非受控组件</h4><pre><code>优先使用受控组件，符合react设计原则必须操作DOM元素，再使用非受控组件</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一、非受控组件&quot;&gt;&lt;a href=&quot;#一、非受控组件&quot; class=&quot;headerlink&quot; title=&quot;一、非受控组件&quot;&gt;&lt;/a&gt;一、非受控组件&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;必须手动操作DOM元素，使用setState无法操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ref</summary>
      
    
    
    
    <category term="技术" scheme="https://chajianyuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="react" scheme="https://chajianyuan.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react：实现分页器</title>
    <link href="https://chajianyuan.github.io/2021/06/01/react%EF%BC%9A%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E5%99%A8/"/>
    <id>https://chajianyuan.github.io/2021/06/01/react%EF%BC%9A%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E5%99%A8/</id>
    <published>2021-06-01T06:45:26.000Z</published>
    <updated>2021-06-03T08:15:11.626Z</updated>
    
    <content type="html"><![CDATA[<p>参照antd的Pagination组件，使用React也实现了一个类似的分页器。</p><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/chajianyuan/picture/4485ac08d26158c067207500c5dee0bcfcb53378/Kapture%202021-06-02%20at%2014.50.17.gif"></p><a id="more"></a><p>具体参见代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;useEffect, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> cx <span class="keyword">from</span> <span class="string">&#x27;classnames&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Pagination = <span class="function">(<span class="params">&#123;allPage, currentPage, handleSearch, loading&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> MORETXT = <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> MAX_PAGE = <span class="number">7</span>; <span class="comment">// 最多展示的分页器个数，建议为奇数，保证分页器的对称</span></span><br><span class="line">  <span class="keyword">const</span> MINMORE = <span class="number">2</span>; <span class="comment">// 第一个...的位置</span></span><br><span class="line">  <span class="keyword">const</span> MAXMORE = <span class="number">6</span>; <span class="comment">// 最后一个...的位置</span></span><br><span class="line">  <span class="keyword">const</span> INTERTALS = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">const</span> [nums, setNums] = useState([]); <span class="comment">// 显示的页码数组</span></span><br><span class="line">  <span class="keyword">const</span> [current, setCurrent] = useState(currentPage);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    changePage(allPage, currentPage);</span><br><span class="line">  &#125;, [allPage, currentPage]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changePage = <span class="function">(<span class="params">total, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> numsRes = drawPage(total, cur);</span><br><span class="line">    setCurrent(cur);</span><br><span class="line">    setNums(numsRes);</span><br><span class="line">    handleSearch(cur);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 改变分页器中的内容</span></span><br><span class="line"><span class="comment">   * @param &#123;number&#125; total</span></span><br><span class="line"><span class="comment">   * @param &#123;number&#125; cur</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> drawPage = <span class="function">(<span class="params">total, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = MAX_PAGE - <span class="number">2</span>; <span class="comment">// 可显示页码数 =  页码个数 - 首页 - 尾页</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pagesNum = []; <span class="comment">// 显示页码数组</span></span><br><span class="line">    <span class="keyword">if</span> (total &lt;= MAX_PAGE) &#123; <span class="comment">// 如果当前总页数 &lt;= MAX_PAGE，则直接将当前总页数转成数组</span></span><br><span class="line">      pagesNum = [...Array(total).keys()].map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> pagesNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前总页数 &gt; MAX_PAGE，则需要分为三种情况</span></span><br><span class="line">    <span class="comment">// 1. 当前页码离首页稍近的时候，尾部显示省略号</span></span><br><span class="line">    <span class="keyword">if</span> (cur &lt;= <span class="built_in">Math</span>.ceil(temp / <span class="number">2</span>)) &#123;</span><br><span class="line">      pagesNum = [...Array(temp).keys()].map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>); <span class="comment">// 除省略号和尾页之外的数字</span></span><br><span class="line">      pagesNum = [...pagesNum, MORETXT, total];</span><br><span class="line">      <span class="keyword">return</span> pagesNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.当前页码离尾页稍近的时候，头部显示省略号</span></span><br><span class="line">    <span class="keyword">if</span> (cur &gt;= total - <span class="built_in">Math</span>.floor(temp / <span class="number">2</span>)) &#123;</span><br><span class="line">      pagesNum = [...Array(temp).keys()].map(<span class="function"><span class="params">item</span> =&gt;</span> total - item); <span class="comment">// 除省略号和首页之外的数字</span></span><br><span class="line">      pagesNum = [<span class="number">1</span>, MORETXT, ...pagesNum.reverse()]; <span class="comment">// 上一步拿到的pagesNum是倒序的，所以需要反转一下</span></span><br><span class="line">      <span class="keyword">return</span> pagesNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 以上情况都不成立，则显示两个省略号</span></span><br><span class="line">    pagesNum = around(total, cur);</span><br><span class="line">    <span class="keyword">return</span> pagesNum;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理两边都有省略号的情况</span></span><br><span class="line"><span class="comment">   * @param &#123;array&#125; total</span></span><br><span class="line"><span class="comment">   * @param &#123;number&#125; curPage</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> around = <span class="function">(<span class="params">total, curPage</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> side = (MAX_PAGE - <span class="number">5</span>) / <span class="number">2</span>; <span class="comment">// 5 = 首 + 省略号 + curPage + 省略号 + 尾</span></span><br><span class="line">    <span class="keyword">const</span> leftArr = [...Array(curPage).keys()].reverse().slice(<span class="number">0</span>, side); <span class="comment">// curPage左边的数组</span></span><br><span class="line">    <span class="keyword">const</span> rightArr = [...Array(total).keys()].slice(curPage + <span class="number">1</span>, curPage + side + <span class="number">1</span>); <span class="comment">// curPage右边的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> pagesNum = [<span class="number">1</span>, MORETXT, ...leftArr, curPage, ...rightArr, MORETXT, allPage];</span><br><span class="line">    <span class="keyword">return</span> pagesNum;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果是...，则分两种情况</span></span><br><span class="line"><span class="comment">     * 1. 向前更多时，将num设置成当前中间数字向前两个</span></span><br><span class="line"><span class="comment">     * 2. 向前更多时，将num设置成当前中间数字向后两个</span></span><br><span class="line"><span class="comment">     * 需要注意，不要超过边界值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> isMoreTxt = item === MORETXT;</span><br><span class="line">    <span class="keyword">let</span> num = isMoreTxt ? <span class="number">0</span> : <span class="built_in">parseInt</span>(item, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (isMoreTxt) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index + <span class="number">1</span> === MINMORE) &#123; <span class="comment">// 是否是第一个...</span></span><br><span class="line">        num = current - INTERTALS &lt; <span class="number">1</span> ? <span class="number">1</span> : current - INTERTALS;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (index + <span class="number">1</span> === MAXMORE) &#123; <span class="comment">// 是否是第二个...</span></span><br><span class="line">        num = current + INTERTALS &gt; allPage ? allPage : current + INTERTALS;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    changePage(allPage, num);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul className=<span class="string">&quot;pagination&quot;</span>&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        nums.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> isMore = item === MORETXT;</span><br><span class="line">          <span class="keyword">const</span> isChoosed = item === current;</span><br><span class="line">          <span class="keyword">return</span> &lt;li key=&#123;index&#125;</span><br><span class="line">            className=&#123;cx(<span class="string">&#x27;page-change&#x27;</span>, &#123;choosed: isChoosed, <span class="string">&#x27;page-more&#x27;</span>: isMore&#125;)&#125;</span><br><span class="line">            onClick=&#123;<span class="function">() =&gt;</span> handleClick(item, index)&#125;&gt;</span><br><span class="line">            &#123;item&#125;</span><br><span class="line">          &lt;/li&gt;;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Pagination;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;参照antd的Pagination组件，使用React也实现了一个类似的分页器。&lt;/p&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chajianyuan/picture/4485ac08d26158c067207500c5dee0bcfcb53378/Kapture%202021-06-02%20at%2014.50.17.gif&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://chajianyuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="react" scheme="https://chajianyuan.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>css：瀑布流布局</title>
    <link href="https://chajianyuan.github.io/2021/05/02/css%EF%BC%9A%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/"/>
    <id>https://chajianyuan.github.io/2021/05/02/css%EF%BC%9A%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/</id>
    <published>2021-05-02T12:24:03.000Z</published>
    <updated>2021-05-15T09:53:21.455Z</updated>
    
    <content type="html"><![CDATA[<img src="https://github.com/chajianyuan/picture/blob/master/WX20210515-164933@2x.png?raw=true" width="600px" /> <a id="more"></a><h3 id="一、实现方式"><a href="#一、实现方式" class="headerlink" title="一、实现方式"></a>一、实现方式</h3><h4 id="1-使用javascript原生实现"><a href="#1-使用javascript原生实现" class="headerlink" title="1. 使用javascript原生实现"></a>1. 使用javascript原生实现</h4><ul><li><p>优点：图片排序是按照图片计算的位置横向排列，位置是计算出来的，比较规范</p></li><li><p>缺点：需要计算，列数 = 浏览器窗口宽度 / 图片宽度，图片定位是根据每一列数据块的高度计算接下来图片的位置</p></li></ul><p>盒子之间的间距建议使用padding，因为需要使用<code>offsetHeight</code>计算盒子的高度，<code>offsetHeight</code>指包括<code>padding</code>，不包括<code>margin</code></p><p>js代码实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  waterfall(<span class="string">&#x27;main&#x27;</span>, <span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> dataInt = &#123;</span><br><span class="line">    data: [</span><br><span class="line">      &#123;<span class="attr">src</span>: <span class="string">&#x27;1.jpeg&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">src</span>: <span class="string">&#x27;2.jpeg&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">src</span>: <span class="string">&#x27;3.jpeg&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.onscroll = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (checkScrollSlide()) &#123;</span><br><span class="line">      <span class="comment">// 将数据块渲染到当前页面的尾部</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dataInt.data.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> oParent = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> oBox = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        oBox.className = <span class="string">&#x27;box&#x27;</span>;</span><br><span class="line">        oParent.appendChild(oBox);</span><br><span class="line">        <span class="keyword">let</span> oPic = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        oPic.className = <span class="string">&#x27;pic&#x27;</span>;</span><br><span class="line">        oBox.appendChild(oPic);</span><br><span class="line">        <span class="keyword">let</span> oImg = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">        oImg.src = <span class="string">`images/<span class="subst">$&#123;dataInt.data[i].src&#125;</span>`</span>;</span><br><span class="line">        oPic.appendChild(oImg);</span><br><span class="line">      &#125;</span><br><span class="line">      waterfall(<span class="string">&#x27;main&#x27;</span>, <span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> waterfall = <span class="function">(<span class="params">parent, box</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 将main下的所有class为box的元素取出来</span></span><br><span class="line">  <span class="keyword">let</span> oParent = <span class="built_in">document</span>.getElementById(parent);</span><br><span class="line">  <span class="keyword">let</span> oBoxs = getByClass(oParent, box);</span><br><span class="line">  <span class="comment">// 计算整个页面显示的列数（页面宽/box的宽）</span></span><br><span class="line">  <span class="keyword">let</span> oBoxW = oBoxs[<span class="number">0</span>].offsetWidth;</span><br><span class="line">  <span class="keyword">let</span> cols = <span class="built_in">Math</span>.floor(<span class="built_in">document</span>.documentElement.clientWidth / oBoxW);</span><br><span class="line">  <span class="comment">// 设置main的宽</span></span><br><span class="line">  oParent.style.cssText = <span class="string">&#x27;width:&#x27;</span> + oBoxW * cols + <span class="string">&#x27;px; margin: 0 auto;&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> hArr = []; <span class="comment">// 存放每一列高度的数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oBoxs.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; cols) &#123;</span><br><span class="line">      hArr.push(oBoxs[i].offsetHeight);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> minH = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, hArr);</span><br><span class="line">      <span class="keyword">let</span> index = getMinHIndex(hArr, minH);</span><br><span class="line">      oBoxs[i].style.position = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">      oBoxs[i].style.top = minH + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">      <span class="comment">// oBoxs[i].style.left = oBoxW * index + &#x27;px&#x27;;</span></span><br><span class="line">      oBoxs[i].style.left = oBoxs[index].offsetLeft + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">      hArr[index] += oBoxs[i].offsetHeight;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据class获取元素</span></span><br><span class="line"><span class="keyword">const</span> getByClass = <span class="function">(<span class="params">parent, className</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> boxArr = []; <span class="comment">// 用来存储获取到的所有class为box的元素</span></span><br><span class="line">  <span class="keyword">let</span> oElements = parent.getElementsByTagName(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oElements.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oElements[i].className === className) &#123;</span><br><span class="line">      boxArr.push(oElements[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> boxArr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getMinHIndex = <span class="function">(<span class="params">arr, val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> min = arr.findIndex(<span class="function"><span class="params">i</span> =&gt;</span> i === val);</span><br><span class="line">  <span class="keyword">return</span> min;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  检测是否具备了滚动条加载数据块的条件</span></span><br><span class="line"><span class="keyword">const</span> checkScrollSlide = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> oParent = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> oBoxs = getByClass(oParent, <span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> lastBoxH = oBoxs[oBoxs.length - <span class="number">1</span>].offsetTop + <span class="built_in">Math</span>.floor(oBoxs[oBoxs.length - <span class="number">1</span>].offsetHeight / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">  <span class="keyword">let</span> height = <span class="built_in">document</span>.body.clientHeight || <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">  <span class="keyword">return</span> lastBoxH &lt; scrollTop + height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html代码实现</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/1.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/2.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/3.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/4.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/5.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/6.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/7.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/8.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/9.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/10.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>css代码实现：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-css3多栏布局实现"><a href="#2-css3多栏布局实现" class="headerlink" title="2. css3多栏布局实现"></a>2. css3多栏布局实现</h4><h5 id="1-使用column属性"><a href="#1-使用column属性" class="headerlink" title="(1) 使用column属性"></a>(1) 使用column属性</h5><ul><li><p>优点：不需要计算，浏览器自动计算，只需设置列宽，性能高</p></li><li><p>缺点：不可横向排列，只能纵向排列，打乱图片的排列顺序</p></li></ul><p>css代码实现：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-column-width</span>: <span class="number">202px</span>;</span><br><span class="line">  <span class="attribute">-moz-column-width</span>: <span class="number">202px</span>;</span><br><span class="line">  <span class="attribute">-moz-column-width</span>: <span class="number">202px</span>;</span><br><span class="line">  <span class="attribute">-ms-column-width</span>: <span class="number">202px</span>;</span><br><span class="line">  <span class="comment">/* -webkit-column-count: 5;</span></span><br><span class="line"><span class="comment">  -moz-column-count: 5;</span></span><br><span class="line"><span class="comment">  -moz-column-count: 5;</span></span><br><span class="line"><span class="comment">  -ms-column-count: 5; */</span></span><br><span class="line">  <span class="attribute">-webkit-column-gap</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">-moz-column-gap</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">-moz-column-gap</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">-ms-column-gap</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-使用flex布局"><a href="#2-使用flex布局" class="headerlink" title="(2) 使用flex布局"></a>(2) 使用flex布局</h5><ul><li>优点：可实现横向排列的瀑布流</li><li>缺点：容器必须有固定高度，并且高度要大于最高的列高</li></ul><p>css代码实现：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="comment">/* 容器必须有固定高度</span></span><br><span class="line"><span class="comment">   * 且高度大于最高的列高 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2000px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 强制换列 */</span></span><br><span class="line"><span class="selector-id">#main</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#main</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:nth-child(2n+1)</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:nth-child(2n)</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">32%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://github.com/chajianyuan/picture/blob/master/WX20210515-164933@2x.png?raw=true&quot; width=&quot;600px&quot; /&gt;</summary>
    
    
    
    <category term="技术" scheme="https://chajianyuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="css" scheme="https://chajianyuan.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>html：获取dom节点</title>
    <link href="https://chajianyuan.github.io/2021/04/26/html%EF%BC%9A%E8%8E%B7%E5%8F%96dom%E8%8A%82%E7%82%B9/"/>
    <id>https://chajianyuan.github.io/2021/04/26/html%EF%BC%9A%E8%8E%B7%E5%8F%96dom%E8%8A%82%E7%82%B9/</id>
    <published>2021-04-26T15:51:19.000Z</published>
    <updated>2021-06-10T15:01:11.672Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、通过元素类型的方式"><a href="#一、通过元素类型的方式" class="headerlink" title="一、通过元素类型的方式"></a>一、通过元素类型的方式</h3><h4 id="1-通过id名称-——-getElementById"><a href="#1-通过id名称-——-getElementById" class="headerlink" title="1. 通过id名称 —— getElementById"></a>1. 通过id名称 —— getElementById</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;id名称&#x27;</span>);</span><br></pre></td></tr></table></figure><p>返回一个dom节点</p><p>⚠️ 如果存在多个同名id，只取第一个</p><p><img src="https://github.com/chajianyuan/picture/blob/master/WX20210427-000254@2x.png?raw=true"></p><a id="more"></a><h4 id="2-通过name属性名称-——-getElementsByName"><a href="#2-通过name属性名称-——-getElementsByName" class="headerlink" title="2. 通过name属性名称 —— getElementsByName"></a>2. 通过name属性名称 —— getElementsByName</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><p>返回一个类数组</p><p><img src="https://github.com/chajianyuan/picture/blob/master/WX20210427-000305@2x.png?raw=true"></p><h4 id="3-通过标签名称-——-getElementsByTagName"><a href="#3-通过标签名称-——-getElementsByTagName" class="headerlink" title="3. 通过标签名称 —— getElementsByTagName"></a>3. 通过标签名称 —— getElementsByTagName</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;div&#x27;</span>)</span><br></pre></td></tr></table></figure><p>返回一个类数组</p><h4 id="4-通过类名-——-getElementsByClassName"><a href="#4-通过类名-——-getElementsByClassName" class="headerlink" title="4. 通过类名 —— getElementsByClassName"></a>4. 通过类名 —— getElementsByClassName</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;class&#x27;</span>)</span><br></pre></td></tr></table></figure><p>返回一个类数组</p><p><img src="https://github.com/chajianyuan/picture/blob/master/WX20210427-000314@2x.png?raw=true"></p><h4 id="5-获取html-——-documentElement"><a href="#5-获取html-——-documentElement" class="headerlink" title="5. 获取html —— documentElement"></a>5. 获取html —— documentElement</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement</span><br></pre></td></tr></table></figure><p><img src="https://github.com/chajianyuan/picture/blob/master/WX20210427-000615@2x.png?raw=true"></p><h4 id="6-获取body-——-body"><a href="#6-获取body-——-body" class="headerlink" title="6. 获取body —— body"></a>6. 获取body —— body</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.<span class="keyword">body</span></span><br></pre></td></tr></table></figure><h4 id="7-通过选择器获取一个元素-——-querySelector"><a href="#7-通过选择器获取一个元素-——-querySelector" class="headerlink" title="7. 通过选择器获取一个元素 —— querySelector"></a>7. 通过选择器获取一个元素 —— querySelector</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">&#x27;.ouvJEz&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/chajianyuan/picture/blob/master/WX20210427-000934@2x.png?raw=true"></p><h4 id="8-通过选择器获取一组元素-——-querySelectorAll"><a href="#8-通过选择器获取一组元素-——-querySelectorAll" class="headerlink" title="8. 通过选择器获取一组元素 —— querySelectorAll"></a>8. 通过选择器获取一组元素 —— querySelectorAll</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.<span class="built_in">querySelectorAll</span>(<span class="string">&#x27;.ouvJEz&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/chajianyuan/picture/blob/master/WX20210427-001002@2x.png?raw=true"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一、通过元素类型的方式&quot;&gt;&lt;a href=&quot;#一、通过元素类型的方式&quot; class=&quot;headerlink&quot; title=&quot;一、通过元素类型的方式&quot;&gt;&lt;/a&gt;一、通过元素类型的方式&lt;/h3&gt;&lt;h4 id=&quot;1-通过id名称-——-getElementById&quot;&gt;&lt;a href=&quot;#1-通过id名称-——-getElementById&quot; class=&quot;headerlink&quot; title=&quot;1. 通过id名称 —— getElementById&quot;&gt;&lt;/a&gt;1. 通过id名称 —— getElementById&lt;/h4&gt;&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&amp;#x27;id名称&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;返回一个dom节点&lt;/p&gt;
&lt;p&gt;⚠️ 如果存在多个同名id，只取第一个&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/chajianyuan/picture/blob/master/WX20210427-000254@2x.png?raw=true&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://chajianyuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="html" scheme="https://chajianyuan.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>css：css小技巧</title>
    <link href="https://chajianyuan.github.io/2021/04/16/css%EF%BC%9Acss%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://chajianyuan.github.io/2021/04/16/css%EF%BC%9Acss%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2021-04-16T07:08:58.000Z</published>
    <updated>2021-04-16T07:40:02.515Z</updated>
    
    <content type="html"><![CDATA[<ol><li>超出x行省略</li></ol><ul><li>两行或多行省略<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line"><span class="comment">/*! autoprefixer: off */</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure></li><li>一行省略<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>一行省略除了使用上面代码中的方法，还可以将多行省略代码中的限制行数设置为1</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;超出x行省略&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;两行或多行省略&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="技术" scheme="https://chajianyuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="css" scheme="https://chajianyuan.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>mac：macbook蓝牙不可用问题</title>
    <link href="https://chajianyuan.github.io/2021/04/14/mac%EF%BC%9Amacbook%E8%93%9D%E7%89%99%E4%B8%8D%E5%8F%AF%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://chajianyuan.github.io/2021/04/14/mac%EF%BC%9Amacbook%E8%93%9D%E7%89%99%E4%B8%8D%E5%8F%AF%E7%94%A8%E9%97%AE%E9%A2%98/</id>
    <published>2021-04-14T03:03:14.000Z</published>
    <updated>2021-04-14T03:10:41.620Z</updated>
    
    <content type="html"><![CDATA[<p>突然发现mac电脑的蓝牙打不开了，按理说百分之八十的问题，都可以使用重启电脑来解决，可是这次不管用了😭</p><p>各方百度，终于找到了解决办法</p><ol><li><p>拔掉所有usb设备</p></li><li><p>关机</p></li><li><p>同时按[shift+control+command+开机键]6秒</p></li><li><p>再按[command+option+p+r+开机键]直到开机</p></li></ol><p>万能的百度啊😄，再次感谢百度🙏<a href="https://jingyan.baidu.com/article/fedf0737e4368735ac8977f5.html">奉献上参考地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;突然发现mac电脑的蓝牙打不开了，按理说百分之八十的问题，都可以使用重启电脑来解决，可是这次不管用了😭&lt;/p&gt;
&lt;p&gt;各方百度，终于找到了解决办法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;拔掉所有usb设备&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p</summary>
      
    
    
    
    <category term="mac" scheme="https://chajianyuan.github.io/categories/mac/"/>
    
    
  </entry>
  
  <entry>
    <title>react：setState</title>
    <link href="https://chajianyuan.github.io/2021/03/28/react%EF%BC%9AsetState/"/>
    <id>https://chajianyuan.github.io/2021/03/28/react%EF%BC%9AsetState/</id>
    <published>2021-03-28T10:35:14.000Z</published>
    <updated>2021-04-22T04:54:32.795Z</updated>
    
    <content type="html"><![CDATA[<img src="https://github.com/chajianyuan/picture/blob/master/1671616928038_.pic.jpg?raw=true" width="600px" /><a id="more"></a><h3 id="一、setState的执行过程"><a href="#一、setState的执行过程" class="headerlink" title="一、setState的执行过程"></a>一、setState的执行过程</h3><p><img src="https://user-gold-cdn.xitu.io/2019/2/23/169197bbdc7ae14e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><p>简单描述：</p><ol><li>将<code>setState</code>传入<code>partialState</code>参数存储在当前组件实例的state暂存队列中；</li><li>判断当前React是否处于批量更新状态，如果是，将当前组件加入待更新的组件队列中；</li><li>如果未处于批量更新状态，将批量更新状态标识设置为<code>true</code>，用事务再次调用上一步方法，保证当前组件加入了待更新组件队列中；</li><li>调用事务的<code>waper</code>方法，遍历待更新组件队列依次执行更新；</li><li>执行生命周期<code>componentWillReceiveProps</code>；</li><li>将组件的state暂存队列中的<code>state</code>进行合并，获得最终要更新的state对象，并将队列置为空；</li><li>执行生命周期<code>componentShouldUpdate</code>，更具返回值判断是否要继续更新；</li><li>执行生命周期<code>componentWillUpdate</code>；</li><li>执行真正的更新<code>render</code>；</li><li>执行生命周期<code>componentDidUpdate</code>。</li></ol><h3 id="二、setState是同步还是异步"><a href="#二、setState是同步还是异步" class="headerlink" title="二、setState是同步还是异步"></a>二、setState是同步还是异步</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Route extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.<span class="keyword">state</span> = &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.<span class="built_in">set</span>State(&#123;count: this.<span class="keyword">state</span>.count + <span class="number">1</span>&#125;);</span><br><span class="line">    console.<span class="keyword">log</span>(this.<span class="keyword">state</span>.count);  // 打印 -&gt; <span class="number">0</span></span><br><span class="line">    this.<span class="built_in">set</span>State(&#123;count: this.<span class="keyword">state</span>.count + <span class="number">1</span>&#125;);</span><br><span class="line">    console.<span class="keyword">log</span>(this.<span class="keyword">state</span>.count);  // 打印 -&gt; <span class="number">0</span></span><br><span class="line">    <span class="built_in">set</span>Timeout(() =&gt; &#123;</span><br><span class="line">      this.<span class="built_in">set</span>State(&#123;count: this.<span class="keyword">state</span>.count + <span class="number">1</span>&#125;);</span><br><span class="line">      console.<span class="keyword">log</span>(this.<span class="keyword">state</span>.count);  // 打印 -&gt; <span class="number">1</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">set</span>Timeout(() =&gt; &#123;</span><br><span class="line">      this.<span class="built_in">set</span>State(&#123;count: this.<span class="keyword">state</span>.count + <span class="number">1</span>&#125;);</span><br><span class="line">      console.<span class="keyword">log</span>(this.<span class="keyword">state</span>.count);  // 打印 -&gt; <span class="number">2</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return <span class="variable">&lt;div&gt;</span>&#123;this.<span class="keyword">state</span>.count&#125;&lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结论可能是异步更新</p></blockquote><blockquote><p>setTimeout\自定义dom事件中是同步更新的<br>普通使用是异步更新的</p></blockquote><p><a href="https://juejin.cn/post/6844903781813993486">参考：【React深入】setState的执行机制</a></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://github.com/chajianyuan/picture/blob/master/1671616928038_.pic.jpg?raw=true&quot; width=&quot;600px&quot; /&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JS：闭包</title>
    <link href="https://chajianyuan.github.io/2021/03/24/JS%EF%BC%9A%E9%97%AD%E5%8C%85/"/>
    <id>https://chajianyuan.github.io/2021/03/24/JS%EF%BC%9A%E9%97%AD%E5%8C%85/</id>
    <published>2021-03-24T01:13:39.000Z</published>
    <updated>2021-03-30T14:35:24.130Z</updated>
    
    <content type="html"><![CDATA[<img src="https://github.com/chajianyuan/picture/blob/master/1641616548534_.pic.jpg?raw=true" width="600px" /><a id="more"></a><h4 id="MDN对闭包的定义"><a href="#MDN对闭包的定义" class="headerlink" title="MDN对闭包的定义"></a>MDN对闭包的定义</h4><blockquote><p>闭包是指那些能够访问自由变量的函数。</p></blockquote><p>❓<strong>自由变量是什么？</strong></p><blockquote><p>自由变量是指能够在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。</p></blockquote><p>对于闭包，我的理解就是当某个函数 A 被调用时，这个函数 A 可以访问它定义时的作用域中的变量。</p><p>使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染；缺点是闭包会常驻内存，增加内存使用量，使用不当很容易造成内存泄漏。在 JavaScript 中，函数即闭包，只有函数才会产生作用域。</p><p>闭包有 3 个特性：</p><ol><li>函数嵌套函数；</li><li>在函数内部可以引用外部的参数和变量；</li><li>参数和变量不会以垃圾回收机制回收。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000006875662">JavaScript 闭包</a></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://github.com/chajianyuan/picture/blob/master/1641616548534_.pic.jpg?raw=true&quot; width=&quot;600px&quot; /&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JS：作用域和作用域链</title>
    <link href="https://chajianyuan.github.io/2021/03/23/JS%EF%BC%9A%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <id>https://chajianyuan.github.io/2021/03/23/JS%EF%BC%9A%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</id>
    <published>2021-03-22T23:17:18.000Z</published>
    <updated>2021-03-30T14:36:19.726Z</updated>
    
    <content type="html"><![CDATA[<img src="https://github.com/chajianyuan/picture/blob/master/1621616508791_.pic.jpg?raw=true" width="600px" /><a id="more"></a><h3 id="一、作用域链"><a href="#一、作用域链" class="headerlink" title="一、作用域链"></a>一、作用域链</h3><p>当查找变量时，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做<code>作用域链</code>。</p><h3 id="二、作用域"><a href="#二、作用域" class="headerlink" title="二、作用域"></a>二、作用域</h3><p><strong><code>作用域</code>就是一个独立的地盘，让变量不会外泄、暴露出去，也就是说作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</strong></p><p>ES6 之前 JavaScript 没有块级作用域，只有全局作用域和函数作用域</p><ul><li><strong>全局作用域</strong>：在代码中任何地方都能访问到，比如最外层函数和在最外层函数外面定义的变量、所有未定义直接赋值的变量、所有 window 对象的属性</li><li><strong>函数作用域</strong>：声明在函数里面的变量 ，只在固定的代码片段内能访问到</li><li><strong>块级作用域</strong>：可通过 let 和 const 声明，所声明的变量在指定块的作用域外无法被访问，所声明的变量不会提升到代码块顶部，禁止重复声明，如在一个函数内部、在一个代码块（用一对花括号包裹）内部</li></ul><p><strong>块语句（大括号“{}”中间的语句），如 if 和 switch 条件语句或 for 和 while 循环语句，不像函数，他们不会创建一个新的作用域。</strong></p><p><strong>作用域在定义时就确定，并且不会改变；执行上下文在运行时确定，随时可能改变。</strong></p><p>参考：<a href="https://juejin.im/post/5c8290455188257e5d0ec64f">深入理解 JavaScript 作用域和作用域链</a></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://github.com/chajianyuan/picture/blob/master/1621616508791_.pic.jpg?raw=true&quot; width=&quot;600px&quot; /&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>学习资料</title>
    <link href="https://chajianyuan.github.io/2021/03/10/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    <id>https://chajianyuan.github.io/2021/03/10/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</id>
    <published>2021-03-10T03:22:47.000Z</published>
    <updated>2021-06-15T03:06:39.492Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/v2-1c7eb3599dd689e6b3631818d9c007a0_720w.jpg?source=172ae18b"></p><a id="more"></a><table><thead><tr><th>图标</th><th align="center">含义</th></tr></thead><tbody><tr><td>📖</td><td align="center">书籍</td></tr><tr><td>💻</td><td align="center">网站</td></tr><tr><td>👸</td><td align="center">微信公众号</td></tr></tbody></table><ul><li><input disabled="" type="checkbox"> 💻 <a href="https://mp.weixin.qq.com/s/HbfThzav79GFS-sMirAINA">2020年你不应该错过的CSS新特性</a></li><li><input disabled="" type="checkbox"> 📖 <a href="https://www.yuque.com/docs/share/d32ce6ae-f7c0-437e-9c5a-2df32bcb3580#">《专家思维、大脑和学习》</a></li><li><input disabled="" type="checkbox"> 💻 <a href="https://reactjs.org/blog/2020/10/20/react-v17.html">react 17</a></li><li><input disabled="" type="checkbox"> 📖 <a href="https://www.yuque.com/docs/share/3c219cf1-6376-420c-98c0-265871ad71bf#%20%E3%80%8AOKR%E6%91%98%E5%BD%95%E3%80%8B">OKA摘录</a></li><li><input disabled="" type="checkbox"> 📖 <a href="https://book.douban.com/subject/4164024//">高效程序员的45个习惯</a></li><li><input checked="" disabled="" type="checkbox"> 💻 <a href="https://mp.weixin.qq.com/s/IYx6VFoy7cLuF--WZed9YQ">28 个 JavaScript 编程黑科技：还有这种操作！</a></li><li><input disabled="" type="checkbox"> 📖 金字塔</li><li><input disabled="" type="checkbox"> 📖 数据结构与算法之美</li><li><input disabled="" type="checkbox"> 📖 你不知道的JavaScript</li><li><input disabled="" type="checkbox"> 💻 <a href="https://segmentfault.com/a/1190000021712743">git merge的原理</a></li><li><input disabled="" type="checkbox"> 📖 <a href="https://www.yuque.com/docs/share/d5caf5e8-1674-4f4d-90fa-7fca8c1a5a6a#%20%E3%80%8A%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4%E3%80%8B">结构化思维</a></li><li><input disabled="" type="checkbox"> 💻 <a href="https://backlog.com/git-tutorial/cn/intro/intro1_1.html">猴子都能懂的GIT入门</a></li><li><input checked="" disabled="" type="checkbox"> 👸 <a href="https://mp.weixin.qq.com/s/TI54CJ7vgE2wiquFN5NyPA">你可能不知道的 CSS 阴影技巧与细节</a></li><li><input disabled="" type="checkbox"> 💻 <a href="https://inrupt.com/solid">Solid</a></li><li><input disabled="" type="checkbox"> 💻 <a href="https://bitable.feishu.cn/app8Ok6k9qafpMkgyRbfgxeEnet?from=logout&table=tblEnSV2PNAajtWE&view=vewJHSwJVd">前端年后面试真题，会80%直接金大厂</a></li><li><input disabled="" type="checkbox"> 💻 <a href="https://zhuanlan.zhihu.com/p/94611888">Continuation 在 JS 中的应用</a></li><li><input checked="" disabled="" type="checkbox"> 👸 <a href="https://mp.weixin.qq.com/s/8j2z3uOaVWADLf5FD_BF3g">JavaScript 代码整洁之道</a></li><li><input disabled="" type="checkbox"> 💻 <a href="https://github.com/CavsZhouyou/Front-End-Interview-Notebook">Front-End-Interview-Notebook</a></li><li><input disabled="" type="checkbox"> 💻 <a href="https://app.yinxiang.com/fx/5a9f1e0f-a3c7-43ed-bffe-e15802ff2b66">大鱼：Node.js Learning Path</a></li><li><input disabled="" type="checkbox"> 💻 <a href="https://nqdeng.github.io/7-days-nodejs/">七天学会NodeJS</a></li><li><input disabled="" type="checkbox"> 👸 <a href="https://mp.weixin.qq.com/s/tsEgUOmWnHDLVPOFLqUd7Q">当面试官问Webpack的时候他想知道什么</a></li><li><input disabled="" type="checkbox"> 📖 敏捷软件开发</li><li><input disabled="" type="checkbox"> 六顶思考帽</li><li><input disabled="" type="checkbox"> 💻 <a href="https://fennay.github.io/gitlab-ci-cn/gitlab-ci-yaml.html">通过 .gitlab-ci.yml配置任务</a></li><li><input disabled="" type="checkbox"> 👸 <a href="https://mp.weixin.qq.com/s/QZkOXhQIg2LqDWpi7mzCdQ">SameSite 那些事</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-1c7eb3599dd689e6b3631818d9c007a0_720w.jpg?source=172ae18b&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://chajianyuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="学习资料" scheme="https://chajianyuan.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>elixir：基础数据结构</title>
    <link href="https://chajianyuan.github.io/2021/03/01/elixir%EF%BC%9A%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://chajianyuan.github.io/2021/03/01/elixir%EF%BC%9A%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-03-01T03:46:34.000Z</published>
    <updated>2021-03-08T08:43:19.997Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.draveness.me/2019-02-13-elixir-programming-language.png"></p><a id="more"></a><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>简单介绍下<code>elixir</code>，<code>elixir</code>官方将其定义成了【一个用于构建可伸缩、可维护应用的动态、函数式编程语言】、它运行在Erlang的虚拟机上，能够充分利用虚拟机的优点运行低延时、高容错的分布式系统。</p><h4 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h4><p>函数式编程其实是一种编程范式，它强调程序执行的结果而不是过程。</p><h4 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h4><p>即所有数据结构一旦被初始化就不能被改变。</p><h4 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h4><p>这个特性不仅能够对数据结构进行解构，还能够帮助根据函数的入参对方法逻辑进行拆分使代码更加清晰。</p><h4 id="面向并发"><a href="#面向并发" class="headerlink" title="面向并发"></a>面向并发</h4><h3 id="二、数据结构"><a href="#二、数据结构" class="headerlink" title="二、数据结构"></a>二、数据结构</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>            =&gt; <span class="built_in">int</span>eger</span><br><span class="line"><span class="number">0x1F</span>         =&gt; <span class="built_in">int</span>eger</span><br><span class="line"><span class="number">1.0</span>          =&gt; <span class="built_in">float</span></span><br><span class="line">:atom        =&gt; atom / symbol</span><br><span class="line"><span class="string">&quot;elixir&quot;</span>     =&gt; <span class="built_in">string</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]    =&gt; list</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;    =&gt; tuple</span><br></pre></td></tr></table></figure><h4 id="1-基础运算"><a href="#1-基础运算" class="headerlink" title="1. 基础运算"></a>1. 基础运算</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>+ <span class="number">2</span>       =&gt; <span class="number">3</span></span><br><span class="line"><span class="symbol">5 </span>* <span class="number">5</span>       =&gt; <span class="number">25</span></span><br><span class="line"><span class="symbol">10 </span>/ <span class="number">2</span>      =&gt; <span class="number">5.0</span></span><br></pre></td></tr></table></figure><p><code>elixir</code>同时支持二进制、八进制和十六进制的数字</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x1F</span>         =&gt; <span class="number">31</span> </span><br><span class="line"><span class="number">0o777</span>        =&gt; <span class="number">511</span></span><br><span class="line"><span class="number">0b1010</span>       =&gt; <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="2-布尔值"><a href="#2-布尔值" class="headerlink" title="2. 布尔值"></a>2. 布尔值</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">is_boolean</span><span class="params">(true)</span></span>   =&gt; true</span><br><span class="line"><span class="function"><span class="title">is_boolean</span><span class="params">(<span class="number">1</span>)</span></span>      =&gt; false</span><br></pre></td></tr></table></figure><blockquote><p>可以使用<code>is_integer/1</code>检查参数是否是整数<br>可以使用<code>is_float/1</code>检查参数是否为浮点数<br>可以使用<code>is_number/1</code>检查参数是否为上面两个中的一个</p></blockquote><h4 id="3-原子"><a href="#3-原子" class="headerlink" title="3. 原子"></a>3. 原子</h4><p>也就是<code>Symbols</code>，代表以名字为值的恒量</p><h4 id="4-字符串"><a href="#4-字符串" class="headerlink" title="4. 字符串"></a>4. 字符串</h4><p>字符串必须用双引号来表达，并且用UTF-8编码</p><p>（1）<code>IO.puts/1</code>来打印字符串</p><p>（2）字符串在底层是用二进制，<code>is_binary</code></p><p>（3）<code>byte_size</code>计算字符串的字节数</p><p>（4）<code>String.length/1</code>计算字符串长度</p><blockquote><p>⚠️ 单引号和双引号是不一样的</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;hello&#x27;</span> == <span class="string">&quot;hello&quot;</span>  =&gt; <span class="keyword">false</span></span><br></pre></td></tr></table></figure><h4 id="5-匿名函数"><a href="#5-匿名函数" class="headerlink" title="5. 匿名函数"></a>5. 匿名函数</h4><p>函数用关键值<code>fn</code>和<code>end</code>来表达</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add</span> = <span class="meta">fn</span> a, <span class="keyword">b</span> -&gt; a + <span class="keyword">b</span> <span class="meta">end</span></span><br></pre></td></tr></table></figure><blockquote><p>⚠️ 当调用匿名函数时，在指向这个匿名函数的变量名和圆括号之间需要有一个点（.）<code>add.(1, 2)</code></p></blockquote><blockquote><p>❕在一个函数内部的变量赋值，并不影响函数外部的环境</p></blockquote><p>（1）<code>is_function/1</code>检验是否为函数</p><p>（2）<code>if_funciton/2</code>检查一个函数接受的函数数量</p><h4 id="6-（链接）列表"><a href="#6-（链接）列表" class="headerlink" title="6. （链接）列表"></a>6. （链接）列表</h4><p>用方括号标识一个列表，内部的类型是随意的</p><p>使用函数<code>++2</code>，<code>--2</code>进行合并或相异操作</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="string">++</span> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]                          <span class="string">=&gt;</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="literal">true</span>, <span class="number">2</span>, <span class="literal">false</span>, <span class="number">3</span>, <span class="literal">true</span>] <span class="string">--</span> [<span class="literal">true</span>, <span class="literal">false</span>]   <span class="string">=&gt;</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">true</span>]</span><br></pre></td></tr></table></figure><p>（1）<code>hd/1</code> 获得列表的第一个元素</p><p>（2）<code>tl</code> 获得除第一个元素剩余的元素</p><blockquote><p>⚠️ 获取一个空列表的头会导致一个错误 <code>(ArgumentError) argument error</code></p></blockquote><h4 id="7-元组"><a href="#7-元组" class="headerlink" title="7. 元组"></a>7. 元组</h4><p>元组用花括号表示</p><p>（1） <code>elem/2</code>获取元组中的某个元素</p><p>（2）<code>set_elem/3</code>可以把一个元素放在一个特定的索引上（返回一个新元组，不会破坏原元组）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.draveness.me/2019-02-13-elixir-programming-language.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://chajianyuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="elixir" scheme="https://chajianyuan.github.io/tags/elixir/"/>
    
  </entry>
  
  <entry>
    <title>每日一道算法打卡：找到所有数组中消失的数字</title>
    <link href="https://chajianyuan.github.io/2021/02/13/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1%EF%BC%9A%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://chajianyuan.github.io/2021/02/13/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1%EF%BC%9A%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2021-02-13T03:28:35.000Z</published>
    <updated>2021-02-13T08:42:13.332Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目：</strong><br>给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。</p><a id="more"></a><p>找到所有在 [1, n] 范围之间没有出现在数组中的数字。</p><p>您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。</p><p>示例:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">[<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）</p><p>链接：<a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array">https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array</a></p><p><strong>解题思路：</strong></p><p>暴力法，遍历，但是费时</p><p><strong>代码展示：</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">var</span> findDisappearedNumbers = function(nums) &#123;</span><br><span class="line">    const len = nums.<span class="built_in">length</span>;</span><br><span class="line">    const res = [];</span><br><span class="line">    <span class="built_in">let</span> <span class="built_in">num</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">let</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!nums.includes(<span class="built_in">num</span>)) &#123;</span><br><span class="line">            res.<span class="built_in">push</span>(<span class="built_in">num</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">num</span> = <span class="built_in">num</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;题目：&lt;/strong&gt;&lt;br&gt;给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://chajianyuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://chajianyuan.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>book: 阅读清单</title>
    <link href="https://chajianyuan.github.io/2021/02/09/book%EF%BC%9A%E9%98%85%E8%AF%BB%E6%B8%85%E5%8D%95/"/>
    <id>https://chajianyuan.github.io/2021/02/09/book%EF%BC%9A%E9%98%85%E8%AF%BB%E6%B8%85%E5%8D%95/</id>
    <published>2021-02-09T02:35:19.000Z</published>
    <updated>2021-05-13T10:56:20.022Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1294118-7d84c47d8294637c.jpg"></p><a id="more"></a><h3 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h3><ol><li>css世界（2月9日）</li><li>Javascript代码整洁之道 (3月5日)</li><li>十天精通CSS3（5月13日）</li></ol><!-- 2. 数据结构与算法之美（3月1日） -->]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1294118-7d84c47d8294637c.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="阅读笔记" scheme="https://chajianyuan.github.io/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>css：实现文字自动滚动（animation属性和@keyframes规则）</title>
    <link href="https://chajianyuan.github.io/2021/01/08/css%EF%BC%9A%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E8%87%AA%E5%8A%A8%E6%BB%9A%E5%8A%A8%EF%BC%88animation%E5%B1%9E%E6%80%A7%E5%92%8C@keyframes%E8%A7%84%E5%88%99%EF%BC%89/"/>
    <id>https://chajianyuan.github.io/2021/01/08/css%EF%BC%9A%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E8%87%AA%E5%8A%A8%E6%BB%9A%E5%8A%A8%EF%BC%88animation%E5%B1%9E%E6%80%A7%E5%92%8C@keyframes%E8%A7%84%E5%88%99%EF%BC%89/</id>
    <published>2021-01-08T07:48:20.000Z</published>
    <updated>2021-02-10T10:48:48.112Z</updated>
    
    <content type="html"><![CDATA[<p>使用css的animation属性和@keyframes规则，实现中奖信息的滚动播报</p><p>要创建 css3 动画，需要了解@keyframes 规则</p><a id="more"></a><ul><li>@keyframes 规则是创建动画</li><li>@keyframes 规则内指定一个 CSS 样式动画将逐步从目前的样式更改为新的样式</li></ul><p>当在 <strong>@keyframes</strong> 创建动画，把它绑定到一个选择器，否则动画不会有任何效果。</p><p>指定至少这两个 CSS3 的动画属性绑定向一个选择器：</p><ul><li>规定动画的名称</li><li>规定动画的时长</li></ul><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>keyframes</td><td>规定动画。</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了 animation-play-state 属性。</td></tr><tr><td>animation-name</td><td>规定 @keyframes 动画的名称。</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线。默认是 “ease”。</td></tr><tr><td>animation-fill-mode</td><td>规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。</td></tr><tr><td>animation-delay</td><td>规定动画何时开始。默认是 0。</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数。默认是 1。</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向地播放。默认是 “normal”。</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。默认是 “running”。</td></tr></tbody></table><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">div&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>:red;</span><br><span class="line"><span class="attribute">position</span>:relative;</span><br><span class="line"><span class="attribute">animation-name</span>:myfirst;</span><br><span class="line"><span class="attribute">animation-duration</span>:<span class="number">5s</span>;</span><br><span class="line"><span class="attribute">animation-timing-function</span>:linear;</span><br><span class="line"><span class="attribute">animation-delay</span>:<span class="number">2s</span>;</span><br><span class="line"><span class="attribute">animation-iteration-count</span>:infinite;</span><br><span class="line"><span class="attribute">animation-direction</span>:alternate;</span><br><span class="line"><span class="attribute">animation-play-state</span>:running;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes myfirst</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">0%</span>   &#123;<span class="attribute">background</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line"><span class="number">25%</span>  &#123;<span class="attribute">background</span>:yellow; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line"><span class="number">50%</span>  &#123;<span class="attribute">background</span>:blue; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="number">75%</span>  &#123;<span class="attribute">background</span>:green; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line"><span class="number">100%</span> &#123;<span class="attribute">background</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="animation-和-transition-的异同"><a href="#animation-和-transition-的异同" class="headerlink" title="animation 和 transition 的异同"></a>animation 和 transition 的异同</h3><p><strong>相同：</strong> 功能相同，都是通过改变元素的属性值来实现动画效果的。</p><p><strong>不同：</strong> transition 只能用指定属性的开始值和结束值，然后在这两个属性值之间使用平滑过渡的方式实现动画效果，因此不能实现比较复杂的动画效果；animation 通过定义多个关键帧，以及定义每个关键帧中元素的属性值来实现更为复杂的动画效果。</p><p>以react.js为例</p><p>JSX部分</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;prize-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;rowup&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">      winners.<span class="keyword">map</span>(<span class="type">item</span> =&gt; &lt;div<span class="built_in"> key</span>=&#123;<span class="type">item</span>.nick&#125;</span><span class="xml"> className=&quot;winner-info&quot;&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;prize-img&quot;</span> <span class="attr">src</span>=</span></span><span class="xquery">&#123;<span class="type">item</span>.headerpic ? <span class="type">item</span>.headerpic : defaultAvatar&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xquery">&#123;<span class="type">item</span>.nick&#125;</span><span class="xml">已获得</span><span class="xquery">&#123;<span class="type">item</span>.price&#125;</span><span class="xml">元试用资格</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml">)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>CSS部分</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.prize-info</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: rgba(<span class="number">#FFFFFF</span>, .<span class="number">19</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.63rem</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">9.5rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">15rem</span> .<span class="number">7rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">55rem</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="selector-class">.winner-info</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: .<span class="number">2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.prize-img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: .<span class="number">7rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: .<span class="number">7rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: .<span class="number">15rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.prize-info</span> <span class="selector-class">.rowup</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: .<span class="number">85rem</span>;</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: <span class="number">10s</span> rowup linear infinite normal;</span><br><span class="line">  <span class="attribute">animation</span>: <span class="number">10s</span> rowup linear infinite normal;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> rowup &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: translate3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="attribute">transform</span>: translate3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: translate3d(<span class="number">0</span>, -<span class="number">8em</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="attribute">transform</span>: translate3d(<span class="number">0</span>, -<span class="number">8rem</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>待更～（后续会记录使用websocket时时更新数据）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用css的animation属性和@keyframes规则，实现中奖信息的滚动播报&lt;/p&gt;
&lt;p&gt;要创建 css3 动画，需要了解@keyframes 规则&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JS：字符串方法</title>
    <link href="https://chajianyuan.github.io/2020/11/11/JS%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/"/>
    <id>https://chajianyuan.github.io/2020/11/11/JS%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/</id>
    <published>2020-11-11T07:59:47.000Z</published>
    <updated>2021-02-10T10:50:44.115Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">let str</span> = <span class="string">&#x27;My name is Lily&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="一、提取字符串方法"><a href="#一、提取字符串方法" class="headerlink" title="一、提取字符串方法"></a>一、提取字符串方法</h3><h4 id="1-charAt"><a href="#1-charAt" class="headerlink" title="1. charAt()"></a>1. charAt()</h4><p><code>charAt</code> 获取字符串的某个字符。</p><a id="more"></a><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.charAt(<span class="number">3</span>)  <span class="regexp">//</span> <span class="string">&quot;n&quot;</span></span><br></pre></td></tr></table></figure><p>还有一种方式是把字符串当成一个类似数组的对象，对其中的每个字符进行索引。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str[<span class="number">3</span>]  <span class="regexp">//</span> <span class="string">&quot;n&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-charCodeAt"><a href="#2-charCodeAt" class="headerlink" title="2. charCodeAt()"></a>2. charCodeAt()</h4><p><code>charCodeAt()</code>方法返回0到65535之间的整数，表示给定索引处的UTF-16代码单元。</p><p><strong>返回值：</strong> 指定index处字符的UTF-16代码单元值的一个数字；如果index超出范围，<code>charCodeAt()</code>返回NaN。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="built_in">char</span><span class="constructor">CodeAt(3)</span>  <span class="comment">// 110</span></span><br></pre></td></tr></table></figure><h3 id="二、提取部分字符串"><a href="#二、提取部分字符串" class="headerlink" title="二、提取部分字符串"></a>二、提取部分字符串</h3><h4 id="3-slice"><a href="#3-slice" class="headerlink" title="3. slice"></a>3. slice</h4><p><code>slice()</code>提取字符串的某个部分并在新字符串中返回被提取的部分</p><p>该方法设置两个参数：起始索引和终止索引</p><p>如果某个参数为负数，则从字符串的结尾开始计数</p><p>如果省略第二个参数，则裁剪字符串的剩余部分</p><h4 id="4-subString"><a href="#4-subString" class="headerlink" title="4. subString"></a>4. subString</h4><p><code>subString()</code>类似于<code>slice()</code></p><p>不同之处在于<code>subString()</code>不支持参数为负数</p><h4 id="5-subStr"><a href="#5-subStr" class="headerlink" title="5. subStr"></a>5. subStr</h4><p><code>subStr()</code>类似于<code>slice()</code></p><p>不同之处在于<code>subStr</code>第二个参数规定被提取部分的长度</p><p>如果第一个参数为负数，则从字符串的末尾开始计算</p><h3 id="三、替换字符串内容"><a href="#三、替换字符串内容" class="headerlink" title="三、替换字符串内容"></a>三、替换字符串内容</h3><h4 id="6-replace"><a href="#6-replace" class="headerlink" title="6. replace"></a>6. replace</h4><p><code>replace()</code>方法用一个值替换在字符串中指定的值</p><p><code>replace()</code>方法不会改变调用它的字符串，返回一个新字符串</p><p><code>replace()</code>默认只替换首个匹配</p><p><code>replace()</code>对大小写敏感</p><p>如需执行大小写不敏感的替换，则使用正则表达式<code>/i</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;Please visit Microsoft!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.replace(<span class="regexp">/MICROSOFT/i</span>, <span class="string">&quot;W3School&quot;</span>);</span><br></pre></td></tr></table></figure><p>如需替换所有匹配，则使用正则表达式的<code>g</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;Please visit Microsoft and Microsoft!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.replace(<span class="regexp">/Microsoft/g</span>, <span class="string">&quot;W3School&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="四、转换为大写和小写"><a href="#四、转换为大写和小写" class="headerlink" title="四、转换为大写和小写"></a>四、转换为大写和小写</h3><h4 id="7-toUpperCase"><a href="#7-toUpperCase" class="headerlink" title="7. toUpperCase"></a>7. toUpperCase</h4><p><code>toUpperCase()</code>把字符串转换为大写</p><h4 id="8-toLowerCase"><a href="#8-toLowerCase" class="headerlink" title="8. toLowerCase"></a>8. toLowerCase</h4><p><code>toLowerCase()</code>把字符串转换为小写</p><h3 id="五、字符串转数组"><a href="#五、字符串转数组" class="headerlink" title="五、字符串转数组"></a>五、字符串转数组</h3><h4 id="9-split"><a href="#9-split" class="headerlink" title="9.split"></a>9.split</h4><h3 id="六、查找字符串中的字符串"><a href="#六、查找字符串中的字符串" class="headerlink" title="六、查找字符串中的字符串"></a>六、查找字符串中的字符串</h3><h4 id="10-indexOf"><a href="#10-indexOf" class="headerlink" title="10. indexOf()"></a>10. indexOf()</h4><p><code>indexOf()</code> 方法返回调用它的String对象中第一次出现的指定值的索引，从fromIndex开始查找，如果没有找到该值，返回-1。</p><p><strong>参数：</strong></p><ul><li>searchValue：要被查找的字符串值，如果<code>searchValue</code>是空字符串，则返回<code>fromIndex</code></li><li>fromIndex：要开始查找的位置（数字），默认值是0</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.indexOf(<span class="string">&#x27;a&#x27;</span>)  <span class="regexp">//</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="11-lastIndexOf"><a href="#11-lastIndexOf" class="headerlink" title="11. lastIndexOf()"></a>11. lastIndexOf()</h4><p><code>lastIndexOf()</code>方法返回调用它的String对象中的指定值最后一次出校的索引，在一个字符串中的指定位置处从后向前搜索，如果没有找到则返回-1。</p><p><strong>参数：</strong></p><ul><li>searchValue：要被查找的字符串值，如果<code>searchValue</code>是空字符串，则返回<code>fromIndex</code></li><li>fromIndex：要开始查找的位置（数字），默认值是<code>+Infinity</code>，如果<code>fromIndex &gt;= str.length</code>，则会搜索整个字符串；如果<code>fromIndex &lt; 0</code>，则等同于<code>fromIndex == 0</code></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.lastIndexOf(<span class="string">&#x27;a&#x27;</span>)  <span class="regexp">//</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="12-search"><a href="#12-search" class="headerlink" title="12. search"></a>12. search</h4><p><code>search()</code>方法搜索特定值的字符串，并返回匹配的位置</p><p>⚠️ 注意：indexOf()和search()方法的区别在于</p><ul><li>search()方法无法设置第二个参数</li><li>indexOf()方法无法设置更强大的搜索值（正则表达式）</li></ul><h3 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h3><h4 id="13-includes"><a href="#13-includes" class="headerlink" title="13. includes()"></a>13. includes()</h4><p><code>includes()</code> 方法用于判断一个字符串是否包含在另一个字符串中，根绝结果返回true或false。</p><p><strong>返回值：</strong> true或false</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.includes(<span class="string">&#x27;abc&#x27;</span>)  <span class="regexp">//</span> false</span><br></pre></td></tr></table></figure><h4 id="14-concat"><a href="#14-concat" class="headerlink" title="14. concat()"></a>14. concat()</h4><p><code>concat()</code>方法将一个或多个字符串与原字符串链接合并，形成一个新的字符串并返回。</p><p><strong>返回值：</strong> 一个新的字符串</p><p><strong>不会改变原字符串</strong></p><p><strong>性能：</strong> 强烈建议使用赋值操作符（+， +=）代替concat方法。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str.concat(<span class="string">&#x27;, too&#x27;</span>)  <span class="regexp">//</span> <span class="string">&quot;My name is Lily, too&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.concat(&#123;&#125;)        <span class="regexp">//</span> <span class="string">&quot;[object Object]&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.concat([])        <span class="regexp">//</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.concat(null)      <span class="regexp">//</span> <span class="string">&quot;null&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.concat(<span class="number">4</span>, <span class="number">5</span>)      <span class="regexp">//</span> <span class="string">&quot;45&quot;</span></span><br></pre></td></tr></table></figure><h4 id="15-String-fromCharCode"><a href="#15-String-fromCharCode" class="headerlink" title="15. String.fromCharCode()"></a>15. String.fromCharCode()</h4><p><code>String.fromCharCode()</code>方法返回由指定的UTF-16代码单元序列创建的字符串。</p><p><strong>返回值：</strong> 一个长度为N的字符串，由N个指定的UTF-16代码单元组成。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.fromCharCode(<span class="number">189</span>, <span class="number">43</span>, <span class="number">190</span>, <span class="number">61</span>)  <span class="comment">// &quot;½+¾=&quot;</span></span><br></pre></td></tr></table></figure><h4 id="16-String-fromCodePoint"><a href="#16-String-fromCodePoint" class="headerlink" title="16. String.fromCodePoint()"></a>16. String.fromCodePoint()</h4><p><code>String.fromCodePoint()</code>静态方法返回使用指定的代码点序列创建的字符串。</p><p><strong>返回值：</strong> 使用指定的Unicode 编码位置创建的字符串。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.fromCodePoint(<span class="number">189</span>, <span class="number">43</span>, <span class="number">190</span>, <span class="number">61</span>)  <span class="comment">// &quot;½+¾=&quot;</span></span><br></pre></td></tr></table></figure><h4 id="17-codePointAt"><a href="#17-codePointAt" class="headerlink" title="17. codePointAt()"></a>17. codePointAt()</h4><p><code>codePointAt()</code>方法返回一个Unicode编码点值的非负整数。</p><p><strong>返回值：</strong> 在字符串中的给定索引的编码单元体现的数字，如果在索引处没有找到该元素则返回<code>undefined</code>。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.codePointAt(<span class="number">3</span>)  <span class="comment">// 110</span></span><br></pre></td></tr></table></figure><h4 id="18-endsWith"><a href="#18-endsWith" class="headerlink" title="18. endsWith()"></a>18. endsWith()</h4><p><code>endsWith()</code>方法用来判断当前字符串是否是以另外一个给定的子字符串结尾的，根据结果返回true或false。</p><p><strong>参数：</strong></p><ul><li>第一个参数：当前字符串</li><li>第二个参数：字符串的长度，默认是当前字符串的长度</li></ul><p><strong>返回值：</strong> true或false</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.endsWith(<span class="string">&#x27;ly&#x27;</span>)  <span class="regexp">//</span> true</span><br></pre></td></tr></table></figure><h4 id="19-localeCompare"><a href="#19-localeCompare" class="headerlink" title="19. localeCompare()"></a>19. localeCompare()</h4><p><code>localeCompare()</code>方法返回一个数字来指示一个参考字符串是否在排序顺序前面或之后与给定字符串相同。</p><p><strong>返回值：</strong> 如果引用字符存在于比较字符之前为<code>负数</code>；如果引用字符存在于比较字符之后则为<code>正数</code>；相等的时候返回0。</p><h4 id="20-match"><a href="#20-match" class="headerlink" title="20. match()"></a>20. match()</h4><p><code>match()</code>方法检索返回一个字符串匹配的正则表达式的结果。</p><p><strong>参数：</strong> 一个正则表达式对象，如果传入一个非正则表达式对象，则会隐式地使用<code>new RegExp(obj)</code>将其转换成一个<code>RegExp</code>；如果没有给出任何参数直接使用match()方法，则会得到一个包含空字符串的Array: [“”]。</p><p><strong>返回值：</strong> </p><ul><li>如果使用g标识，则将返回与完整正则表达式匹配的所有结果，但不会返回捕获组。</li><li>如果未使用g标志，则返回第一个完整匹配及其相关的捕获组（Array）。</li></ul><h4 id="21-matchAll"><a href="#21-matchAll" class="headerlink" title="21. matchAll()"></a>21. matchAll()</h4><p><code> matchAll()</code>方法返回一个包含所有匹配正则表达式的结果及分组捕获数组的迭代器。</p><p><strong>参数：</strong> 正则表达式对象，注意：正则表达式必须是设置了全局模式的g的形式，否则会抛出异常。</p><p><strong>返回值：</strong> 一个迭代器。</p><h4 id="22-normalize"><a href="#22-normalize" class="headerlink" title="22. normalize()"></a>22. normalize()</h4><p><code>normalize()</code>会按照指定的一种Unicode正规形式将当前字符串正规化。（如果该值不是字符串，则首先将其转换为一个字符串）</p><h4 id="23-length"><a href="#23-length" class="headerlink" title="23. length"></a>23. length</h4><p><code>length</code>属性返回字符串的长度</p><h4 id="24-trim"><a href="#24-trim" class="headerlink" title="24. trim"></a>24. trim</h4><p><code>trim()</code>删除字符串两端的空白符</p><h4 id="25-属性访问"><a href="#25-属性访问" class="headerlink" title="25. 属性访问"></a>25. 属性访问</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">str</span> = <span class="symbol">&#x27;school</span>&#x27;;</span><br><span class="line"><span class="built_in">str</span>[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight ebnf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;let str&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;#x27;My name is Lily&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;一、提取字符串方法&quot;&gt;&lt;a href=&quot;#一、提取字符串方法&quot; class=&quot;headerlink&quot; title=&quot;一、提取字符串方法&quot;&gt;&lt;/a&gt;一、提取字符串方法&lt;/h3&gt;&lt;h4 id=&quot;1-charAt&quot;&gt;&lt;a href=&quot;#1-charAt&quot; class=&quot;headerlink&quot; title=&quot;1. charAt()&quot;&gt;&lt;/a&gt;1. charAt()&lt;/h4&gt;&lt;p&gt;&lt;code&gt;charAt&lt;/code&gt; 获取字符串的某个字符。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://chajianyuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="javascript" scheme="https://chajianyuan.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS：scrollWidth、offsetWidth、clientWidth</title>
    <link href="https://chajianyuan.github.io/2020/11/03/JS%EF%BC%9AscrollWidth%E3%80%81offsetWidth%E3%80%81clientWidth/"/>
    <id>https://chajianyuan.github.io/2020/11/03/JS%EF%BC%9AscrollWidth%E3%80%81offsetWidth%E3%80%81clientWidth/</id>
    <published>2020-11-03T14:01:56.000Z</published>
    <updated>2021-02-10T10:51:01.168Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Element-clientWidth"><a href="#Element-clientWidth" class="headerlink" title="Element.clientWidth"></a>Element.clientWidth</h3><p>内联元素以及没有css样式的元素的<code>clientWidth</code>值为0。 <code>Element.clientWidth</code>属性表示元素的内部宽度。</p><a id="more"></a><p>该属性包括内边距padding，但不包括边框border、外边距margin和垂直滚动条（如果有的话）。</p><p>⚠️ 当在根元素（&lt; html &gt;元素）上使用<code>clientWidth</code>(或者在&lt; body &gt;上，如果文档是在怪异模式下)，将返回viewport的宽度（不包含任何滚动条）。</p><blockquote><p>这个属性会进行四舍五入并返回整数，如果需要小数形式的值，则使用<code>element.getBoundingClientRect()</code>。</p></blockquote><h3 id="Element-scrollWidth"><a href="#Element-scrollWidth" class="headerlink" title="Element.scrollWidth"></a>Element.scrollWidth</h3><p><code>Element.scrollWidth</code>这个只读属性是元素内容宽度的一种度量，包括由于overflow溢出而在屏幕上不可见的内容。</p><p>scrollWidth值等于元素在不使用水平滚动条的情况下适合视口中的所有内容所需的最小宽度。</p><p>宽度的测量与<code>clientWidth</code>相同：它包括元素的内边距，但是不包括边框、外边距或垂直滚动条（如果存在）。它还可以包括伪元素的宽度，例如<code>::before</code>或<code>::after</code>。如果元素的内容可以适合而不需要水平滚动条，则其<code>scrollWidth</code>等于<code>clientWidth</code>。</p><blockquote><ol><li>这个属性会进行四舍五入并返回整数，如果需要小数形式的值，则使用<code>element.getBoundingClientRect()</code>。</li><li>谷歌获取的<code>Element.scrollWidth</code>和IE、火狐下获取的<code>Element.scrollWidth</code>并不相同。</li></ol></blockquote><h3 id="Element-offsetWidth"><a href="#Element-offsetWidth" class="headerlink" title="Element.offsetWidth"></a>Element.offsetWidth</h3><p><code>Element.offsetWidth</code>是一个只读属性，返回一个元素的布局宽度。</p><p><code>Element.offsetWidth</code>是测量包含元素的边框（border）、水平线上的内边距（padding）、垂直方向上的滚动条、以及css设置的的宽度（width）值。</p><p>⚠️ 各浏览器的offsetWidth可能有所不同。</p><blockquote><p>这个属性会进行四舍五入并返回整数，如果需要小数形式的值，则使用<code>element.getBoundingClientRect()</code>。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Element-clientWidth&quot;&gt;&lt;a href=&quot;#Element-clientWidth&quot; class=&quot;headerlink&quot; title=&quot;Element.clientWidth&quot;&gt;&lt;/a&gt;Element.clientWidth&lt;/h3&gt;&lt;p&gt;内联元素以及没有css样式的元素的&lt;code&gt;clientWidth&lt;/code&gt;值为0。 &lt;code&gt;Element.clientWidth&lt;/code&gt;属性表示元素的内部宽度。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://chajianyuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="javascript" scheme="https://chajianyuan.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>性能优化：防抖和节流</title>
    <link href="https://chajianyuan.github.io/2020/11/01/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%9A%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <id>https://chajianyuan.github.io/2020/11/01/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%9A%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</id>
    <published>2020-11-01T12:27:58.000Z</published>
    <updated>2021-06-10T15:22:47.204Z</updated>
    
    <content type="html"><![CDATA[<p>今天在写项目时遇到了一个问题，一个按钮的点击事件，因为考虑到<code>onClick</code>在移动端可能失效的问题，所以添加<code>onTouchEnd</code>方法解决这个问题，一个dom节点上添加了两个事件调用的是同一个方法，那么问题就来了，同一个事件同时被调用两次很显然是不对的，那么该如何解决呢❓</p><p>当然，就是使用<strong>节流</strong>方法啦，保证在一个时间段内，如果一个事件被多次调用，则只有一次生效。</p><p>既然提到了节流，我们很容易就会想到另一个名词<strong>防抖</strong>，下面我们来回顾下到底什么是防抖和节流呢？🤔</p><a id="more"></a><h4 id="一、-节流函数"><a href="#一、-节流函数" class="headerlink" title="一、 节流函数"></a>一、 节流函数</h4><h5 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h5><p>规定在一个单位时间内只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</p><h5 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h5><ol><li>拖拽场景：规定时间内只执行一次，防止超高频次触发位置变动</li><li>缩放场景：监控浏览器resize</li><li>动画场景：避免短时间内多次触发动画引起性能问题</li></ol><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手写简化版实现</span></span><br><span class="line"><span class="comment">// 1. 定时器实现</span></span><br><span class="line"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay = <span class="number">500</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="keyword">return</span>;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 时间戳实现</span></span><br><span class="line"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay = <span class="number">500</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> preTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> nowTime = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">if</span>(nowTime - preTime &gt;= delay) &#123;</span><br><span class="line">            preTime = <span class="built_in">Date</span>.now();</span><br><span class="line">            fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. lodash.throttle (https://www.lodashjs.com/docs/lodash.throttle)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> throttle = lodash.throttle(<span class="function">() =&gt;</span> fn(), delay, options)</span><br></pre></td></tr></table></figure><h4 id="二、-防抖函数"><a href="#二、-防抖函数" class="headerlink" title="二、 防抖函数"></a>二、 防抖函数</h4><h5 id="1-原理-1"><a href="#1-原理-1" class="headerlink" title="1. 原理"></a>1. 原理</h5><p>在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</p><h5 id="2-适用场景-1"><a href="#2-适用场景-1" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h5><ol><li>按钮提交场景：防止多次提交按钮，只执行最后提交的一次</li><li>服务端验证场景：表单验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有搜索联想词功能类似</li></ol><h5 id="3-代码实现-1"><a href="#3-代码实现-1" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手写简化版实现</span></span><br><span class="line"><span class="comment">// 1. 定时器实现</span></span><br><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. lodash.debounce (https://www.lodashjs.com/docs/lodash.debounce)</span></span><br><span class="line"><span class="keyword">const</span> debounce = lodash.debounce(<span class="function">() =&gt;</span> fun(), delay, options)</span><br></pre></td></tr></table></figure><h4 id="三、-节流-VS-防抖"><a href="#三、-节流-VS-防抖" class="headerlink" title="三、 节流 VS 防抖"></a>三、 节流 VS 防抖</h4><ul><li>防抖是延迟执行</li><li>节流是间隔执行，函数节流即每隔一段时间就执行一次</li></ul><p>最后，强烈推荐<a href="https://www.lodashjs.com/">lodash库</a>👍，一个很实用的JavaScript工具库！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天在写项目时遇到了一个问题，一个按钮的点击事件，因为考虑到&lt;code&gt;onClick&lt;/code&gt;在移动端可能失效的问题，所以添加&lt;code&gt;onTouchEnd&lt;/code&gt;方法解决这个问题，一个dom节点上添加了两个事件调用的是同一个方法，那么问题就来了，同一个事件同时被调用两次很显然是不对的，那么该如何解决呢❓&lt;/p&gt;
&lt;p&gt;当然，就是使用&lt;strong&gt;节流&lt;/strong&gt;方法啦，保证在一个时间段内，如果一个事件被多次调用，则只有一次生效。&lt;/p&gt;
&lt;p&gt;既然提到了节流，我们很容易就会想到另一个名词&lt;strong&gt;防抖&lt;/strong&gt;，下面我们来回顾下到底什么是防抖和节流呢？🤔&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://chajianyuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="性能优化" scheme="https://chajianyuan.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>算法：求根到叶子节点数字之和</title>
    <link href="https://chajianyuan.github.io/2020/10/29/%E7%AE%97%E6%B3%95%EF%BC%9A%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/"/>
    <id>https://chajianyuan.github.io/2020/10/29/%E7%AE%97%E6%B3%95%EF%BC%9A%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</id>
    <published>2020-10-29T07:46:05.000Z</published>
    <updated>2021-02-10T10:46:29.763Z</updated>
    
    <content type="html"><![CDATA[<p>💪 打卡算法第四天</p><p>📖 题目来自力扣129题</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。</p><p>例如，从根到叶子节点路径 1-&gt;2-&gt;3 代表数字 123。</p><a id="more"></a><p>计算从根到叶子节点生成的所有数字之和。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例 1:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">输出: <span class="number">25</span></span><br><span class="line">解释:</span><br><span class="line">从根到叶子节点路径 <span class="number">1</span>-&gt;<span class="number">2</span> 代表数字 <span class="number">12.</span></span><br><span class="line">从根到叶子节点路径 <span class="number">1</span>-&gt;<span class="number">3</span> 代表数字 <span class="number">13.</span></span><br><span class="line">因此，数字总和 = <span class="number">12</span> + <span class="number">13</span> = <span class="number">25.</span></span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">4</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="number">4</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">9</span>   <span class="number">0</span></span><br><span class="line"> / \</span><br><span class="line"><span class="number">5</span>   <span class="number">1</span></span><br><span class="line">输出: <span class="number">1026</span></span><br><span class="line">解释:</span><br><span class="line">从根到叶子节点路径 <span class="number">4</span>-&gt;<span class="number">9</span>-&gt;<span class="number">5</span> 代表数字 <span class="number">495.</span></span><br><span class="line">从根到叶子节点路径 <span class="number">4</span>-&gt;<span class="number">9</span>-&gt;<span class="number">1</span> 代表数字 <span class="number">491.</span></span><br><span class="line">从根到叶子节点路径 <span class="number">4</span>-&gt;<span class="number">0</span> 代表数字 <span class="number">40.</span></span><br><span class="line">因此，数字总和 = <span class="number">495</span> + <span class="number">491</span> + <span class="number">40</span> = <span class="number">1026.</span></span><br></pre></td></tr></table></figure><h4 id="🤔-题解"><a href="#🤔-题解" class="headerlink" title="🤔 题解"></a>🤔 题解</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition <span class="keyword">for</span> a binary tree <span class="type">node</span>.</span><br><span class="line"> * <span class="keyword">function</span> TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125;<span class="built_in"> root</span></span><br><span class="line"> * @<span class="keyword">return</span> <span class="built_in">&#123;number</span>&#125;</span><br><span class="line"> */</span><br><span class="line">var sumNumbers = <span class="keyword">function</span><span class="built_in">(root</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> dfs<span class="built_in">(root</span>, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const dfs = <span class="built_in">(root</span>, preSum) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">!root</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    const<span class="built_in"> sum</span> = preSum * <span class="number">10</span> +<span class="built_in"> root</span>.val;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">!root</span>.left &amp;&amp; <span class="built_in">!root</span>.right) &#123;</span><br><span class="line">        <span class="keyword">return</span><span class="built_in"> sum</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dfs<span class="built_in">(root</span>.left,<span class="built_in"> sum</span>) + dfs<span class="built_in">(root</span>.right,<span class="built_in"> sum</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;💪 打卡算法第四天&lt;/p&gt;
&lt;p&gt;📖 题目来自力扣129题&lt;/p&gt;
&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。&lt;/p&gt;
&lt;p&gt;例如，从根到叶子节点路径 1-&amp;gt;2-&amp;gt;3 代表数字 123。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://chajianyuan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://chajianyuan.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>react: useEffect</title>
    <link href="https://chajianyuan.github.io/2020/10/27/react%EF%BC%9AuseEffect/"/>
    <id>https://chajianyuan.github.io/2020/10/27/react%EF%BC%9AuseEffect/</id>
    <published>2020-10-27T11:46:05.000Z</published>
    <updated>2021-02-10T10:51:22.714Z</updated>
    
    <content type="html"><![CDATA[<p>本文是在学习<a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/">useEffect完整指南</a>中做的笔记，记录自己不理解的地方以及学到的知识。</p><h3 id="🍀-每一次渲染都有它自己的Props和State"><a href="#🍀-每一次渲染都有它自己的Props和State" class="headerlink" title="🍀 每一次渲染都有它自己的Props和State"></a>🍀 每一次渲染都有它自己的Props和State</h3><h3 id="🍀-每一次渲染都有它自己的事件处理函数"><a href="#🍀-每一次渲染都有它自己的事件处理函数" class="headerlink" title="🍀 每一次渲染都有它自己的事件处理函数"></a>🍀 每一次渲染都有它自己的事件处理函数</h3><a id="more"></a><h3 id="🍀-每一次渲染都有它自己的Effects"><a href="#🍀-每一次渲染都有它自己的Effects" class="headerlink" title="🍀 每一次渲染都有它自己的Effects"></a>🍀 每一次渲染都有它自己的Effects</h3><p>每一个组件内的函数（包括事件处理函数，effects，定时器或者API调用等等）都会捕捉某次渲染中定义的props和state。</p><p>React会根据我们当前的props和state同步到DOM。</p><p>useEffect使你能够根据props和state同步React tree之外的东西。</p><p>useEffect中的依赖项用来告诉React去对比你的Effects。</p><h3 id="🍀-关于依赖项不要对React撒谎"><a href="#🍀-关于依赖项不要对React撒谎" class="headerlink" title="🍀 关于依赖项不要对React撒谎"></a>🍀 关于依赖项不要对React撒谎</h3><ul><li><p>诚实告知依赖</p><ul><li><p>在依赖中包含所有effect中用到的组件内的值。</p></li><li><p>修改effect内部的代码，以确保它包含的值只会在需要的时候发生变更。</p></li></ul></li></ul><h3 id="🍀-函数式更新"><a href="#🍀-函数式更新" class="headerlink" title="🍀 函数式更新"></a>🍀 函数式更新</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    const id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(id);</span><br><span class="line">  &#125;, []);</span><br></pre></td></tr></table></figure><p>例如用<code>setCount(c =&gt; c + 1)</code> 代替  <code>setCount(count+1)</code>, 在effect中传递最小的信息</p><h3 id="🍀-解耦来自Actions的更新"><a href="#🍀-解耦来自Actions的更新" class="headerlink" title="🍀 解耦来自Actions的更新"></a>🍀 解耦来自Actions的更新</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [step, setStep] = useState(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + step);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id);</span><br><span class="line">  &#125;, [step]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;input value=&#123;step&#125; onChange=&#123;<span class="function"><span class="params">e</span> =&gt;</span> setStep(<span class="built_in">Number</span>(e.target.value))&#125; /&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你想更新一个状态，并且这个状态更新依赖于另一个状态的值时，你可能需要使用<code>useReducer</code>去替换它们。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [<span class="keyword">state</span>, dispatch] = useReducer(reducer, initialState);</span><br><span class="line"><span class="keyword">const</span> &#123; count, step &#125; = <span class="keyword">state</span>;</span><br><span class="line"></span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">set</span>Interval(() =&gt; &#123;</span><br><span class="line">    dispatch(&#123; type: &#x27;tick&#x27; &#125;); // Instead of <span class="built_in">set</span>Count(c =&gt; c + step);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  return () =&gt; clearInterval(id);</span><br><span class="line">&#125;, [dispatch]);</span><br></pre></td></tr></table></figure><p>React会保证<code>dispatch</code>在组件的生命周期内保持不变。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是在学习&lt;a href=&quot;https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/&quot;&gt;useEffect完整指南&lt;/a&gt;中做的笔记，记录自己不理解的地方以及学到的知识。&lt;/p&gt;
&lt;h3 id=&quot;🍀-每一次渲染都有它自己的Props和State&quot;&gt;&lt;a href=&quot;#🍀-每一次渲染都有它自己的Props和State&quot; class=&quot;headerlink&quot; title=&quot;🍀 每一次渲染都有它自己的Props和State&quot;&gt;&lt;/a&gt;🍀 每一次渲染都有它自己的Props和State&lt;/h3&gt;&lt;h3 id=&quot;🍀-每一次渲染都有它自己的事件处理函数&quot;&gt;&lt;a href=&quot;#🍀-每一次渲染都有它自己的事件处理函数&quot; class=&quot;headerlink&quot; title=&quot;🍀 每一次渲染都有它自己的事件处理函数&quot;&gt;&lt;/a&gt;🍀 每一次渲染都有它自己的事件处理函数&lt;/h3&gt;</summary>
    
    
    
    <category term="阅读笔记" scheme="https://chajianyuan.github.io/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="react" scheme="https://chajianyuan.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>vue：vue版本之间的区别</title>
    <link href="https://chajianyuan.github.io/2020/03/27/vue%EF%BC%9Avue%E7%89%88%E6%9C%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://chajianyuan.github.io/2020/03/27/vue%EF%BC%9Avue%E7%89%88%E6%9C%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-03-27T00:51:17.000Z</published>
    <updated>2020-03-27T00:51:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic3.zhimg.com/80/v2-120c6f2e62e740210a77ab3c87d65c0e_1440w.jpg"></p><a id="more"></a><ul><li><p>运行时版本 vue.runtime.js</p><ul><li><p>不支持从 html 获取视图；</p></li><li><p>不支持 template，需要通过 webpack 的工具 vue-loader 将组件，预编译 template 模板为 render 函数；</p></li><li><p>没有 complier 编译器，因此代码体积会比完整版小 40%，html 转化成节点。</p><p><code>&lt;script src=&quot;https://cdn.bootcss.com/vue/2.6.9/vue.runtime.min.js&quot;&gt;&lt;/script&gt;</code></p></li></ul></li><li><p>完整版 vue.js</p><ul><li>支持从 html 获取视图；</li><li>支持 template；</li><li>有 complier 编译器，而 complier 可以将字符串<br><code>&lt;script src=&quot;https://cdn.bootcss.com/vue/2.6.10/vue.min.js&quot;&gt;&lt;/script&gt;</code></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/80/v2-120c6f2e62e740210a77ab3c87d65c0e_1440w.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://chajianyuan.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="vue" scheme="https://chajianyuan.github.io/tags/vue/"/>
    
  </entry>
  
</feed>
