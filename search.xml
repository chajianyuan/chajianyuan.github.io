<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6：let、const、var</title>
    <url>/2019/10/14/ES6%EF%BC%9Alet%E3%80%81const%E3%80%81var/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、var"><a href="#一、var" class="headerlink" title="一、var"></a>一、var</h2><p><code>var</code>用来声明变量</p>
<ul>
<li>存在变量提升;</li>
<li>可以重复声明</li>
<li>使用<code>var</code>声明的变量会被提升到作用域顶部</li>
</ul>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量提升:变量还未声明但能使用</span></span><br><span class="line"><span class="built_in">console</span>.log(a)   =&gt;  <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="二、let"><a href="#二、let" class="headerlink" title="二、let"></a>二、let</h2><p><code>let</code>是 ES6 中提出的用于声明变量</p>
<ul>
<li><p>不存在变量提升，也就是说被<code>let</code> 声明的变量不会提升到作用域顶部，如果还未声明便使用会报错（<strong>Uncaught ReferenceError</strong>）</p>
<p><strong>let 到底存在变量提升吗？</strong></p>
<ul>
<li><p>var 声明的创建、初始化和赋值过程</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure>

<p>执行 fn 过程：</p>
<ol>
<li>进入 fn，为 fn 创建一个环境；</li>
<li>找到 fn 中所有用 var 声明的变量，在这个环境中创建这些变量（x 和 y）；</li>
<li>将这些变量初始化为 undefined；</li>
<li>开始执行代码</li>
<li>将 x 赋值为 1，将 y 赋值为 2。</li>
</ol>
<p><strong>var 声明在代码执行前就会创建变量，并将其初始化为 undefined。</strong></p>
</li>
<li><p>function 声明的创建 初始化和赋值过程</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">fn2();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span><span class="params">()</span></span> &#123;</span><br><span class="line">  consle.<span class="built_in">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JS 引擎执行过程：</p>
<ol>
<li>找到所有用 function 声明，在环境中创建这些变量；</li>
<li>将这些变量初始化并赋值；</li>
<li>开始执行 fn2()。</li>
</ol>
<p><strong>function 声明会在代码执行之前就创建、初始化并赋值。</strong></p>
</li>
<li><p>let 声明的创建、初始化和赋值过程</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">x</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="attr">x</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>{}里面的执行过程：</p>
<ol>
<li>找到所有用 let 声明的变量，在环境中创建这些变量；</li>
<li>开始执行代码（注意：现在还没有初始化）；</li>
<li>执行 x=1，将 x 初始化为 1（这并不是一次赋值，如果代码是 let x，就将 x 初始化为 undefined）;</li>
<li>执行 x = 2，对 x 进行赋值。</li>
</ol>
</li>
</ul>
<p><strong>所以综上，</strong></p>
<p><strong>1. let 的创建过程被提升了，但是初始化没有提升。</strong></p>
<p><strong>2. var 的创建和初始化都被提升了。</strong></p>
<p><strong>3. function 的创建、初始化和赋值都被提升了。</strong></p>
<p><img src="https://pic1.zhimg.com/80/v2-9c8c4a0a3ce5402b1a74f488d79c74d0_hd.jpg"></p>
</li>
<li><p>暂时性死区</p>
</li>
<li><p>块级作用域</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="comment">// 代码段1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; li.length; i++) &#123;</span><br><span class="line">  li[i].onClick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码段2</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; li.length; i++) &#123;</span><br><span class="line">  li[i].onClick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>为什么代码段 1 会打印出 5 个 5，而代码段 2 会打印出 0、1、2、3、4？</strong></p>
<p>猜测：</p>
<ol>
<li><p>for(let i = 0; i &lt; li.length; i++)这句话的圆括号之间，有一个隐藏的作用域</p>
</li>
<li><p>for(let i = 0; i &lt; li.length; i++) {循环体}在每次执行循环体之前，JS 引擎会把 i 在循环体的上下文中重新声明及初始化一次</p>
</li>
<li><p>近似把代码 2 理解为</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(let <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; li.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">  let <span class="built_in">i</span> = 隐藏作用域中的<span class="built_in">i</span></span><br><span class="line">  li[<span class="built_in">i</span>].onClick=<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">i</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<ul>
<li>不可重复声明</li>
</ul>
<h2 id="三、const"><a href="#三、const" class="headerlink" title="三、const"></a>三、const</h2><p><code>const</code> 是 ES6 提出的用于声明变量</p>
<ul>
<li>声明必须赋值，一旦声明便不可更改</li>
<li>其他和<code>let</code> 一致</li>
</ul>
<h2 id="四、块级作用域"><a href="#四、块级作用域" class="headerlink" title="四、块级作用域"></a>四、块级作用域</h2><h3 id="为什么需要块级作用域"><a href="#为什么需要块级作用域" class="headerlink" title="为什么需要块级作用域"></a>为什么需要块级作用域</h3><ul>
<li>内层变量可能覆盖外层变量</li>
<li>用来计数的循环变量泄露为全局变量</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/28140450">我用了两个月的时间才理解 let</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6：set、map、weakSet、weakMap</title>
    <url>/2019/10/19/ES6%EF%BC%9Aset%E3%80%81map%E3%80%81weakSet%E3%80%81weakMap/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h3 id="1、map（字典）"><a href="#1、map（字典）" class="headerlink" title="1、map（字典）"></a>1、map（字典）</h3><p><code>&#123;1: 2, 3: 4&#125;</code></p>
<ul>
<li>Map 对象保存键值对。</li>
<li>任何值（对象或者原始值）都可以作为一个键或一个值；</li>
<li>强引用存储类型</li>
<li>null 会被当作 undefined</li>
<li>虽然 NaN !== NaN，但是 map 中 NaN 是与 NaN 相等的。</li>
</ul>
<a id="more"></a>

<p><strong>缺点</strong></p>
<ul>
<li>性能不及 WeakMap</li>
<li>强引用，垃圾回收算法不能及时清理，容易内存泄漏</li>
</ul>
<h3 id="2、WeakMap"><a href="#2、WeakMap" class="headerlink" title="2、WeakMap"></a>2、WeakMap</h3><p>WeakMap 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。</p>
<p><strong>缺点</strong></p>
<p>由于弱引用，key 是不确定的，所以 WeakMap 的 key 是不可枚举的。</p>
<h3 id="3、Set（集合）"><a href="#3、Set（集合）" class="headerlink" title="3、Set（集合）"></a>3、Set（集合）</h3><p><code>[1, 2, 3, 4]</code></p>
<p>Set 本身是一种构造函数，用来生成 Set 数据结构。</p>
<p>set 对象允许任何类型的唯一值，无论是原始值或者是对象引用。</p>
<p>NaN 和 undefined 都可以被存储在 Set 中，NaN 之间被视为相同的值（尽管 NaN !== NaN）</p>
<p>与 array 的区别：</p>
<ul>
<li>不能出现重复的值</li>
<li>没有索引值（唯一且无序）</li>
</ul>
<p>Array.from 方法可以将 Set 结构转为数组。</p>
<h3 id="4、WeakSet"><a href="#4、WeakSet" class="headerlink" title="4、WeakSet"></a>4、WeakSet</h3><p><code>&#123;[1, 2], [3, 4]&#125;</code></p>
<p>WeakSet 对象允许将弱引用对象存储在一个集合中</p>
<ul>
<li>WeakSet 对象中只能存放对象引用，不能存放值，而 Set 对象都可以</li>
<li>WeakSet 对象中存储的对象都是被弱引用的，如果没有其他的变量或属性引用这个对象值，则这个对象值会被当做垃圾回收掉，正式因为这样，WeakSet 对象是无法枚举的，没有办法拿到它包含的所有元素</li>
</ul>
<h3 id="5、Object"><a href="#5、Object" class="headerlink" title="5、Object"></a>5、Object</h3><ul>
<li>key 只能是字符串</li>
<li>迭代顺序有可能不同于插入的顺序</li>
<li>长度只能手动计算</li>
</ul>
<h3 id="6、Array"><a href="#6、Array" class="headerlink" title="6、Array"></a>6、Array</h3><ul>
<li>有 index 索引值</li>
<li>可出现重复值</li>
</ul>
<h3 id="7、字典（map）和集合（set）的区别"><a href="#7、字典（map）和集合（set）的区别" class="headerlink" title="7、字典（map）和集合（set）的区别"></a>7、字典（map）和集合（set）的区别</h3><ul>
<li>共同点：集合和字典可以存储不重复的值；</li>
<li>不同点：集合是以[值，值]的形式存储元素，字典是以[键，值]的形式存储。</li>
</ul>
<p><a href="https://juejin.im/post/5e1d2717e51d4557e97b109b">参考</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6：this</title>
    <url>/2019/10/15/ES6%EF%BC%9Athis/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、this-的指向问题"><a href="#一、this-的指向问题" class="headerlink" title="一、this 的指向问题"></a>一、this 的指向问题</h2><p>this 代表函数（方法）执行的上下文环境</p>
<ul>
<li>this 指向的一定是对象</li>
<li>this 指向谁不取决于 this 写在哪儿，取决于 this 在哪儿被调用</li>
<li>严格模式中：禁止 this 指向全局对象</li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2018/11/15/16717eaf3383aae8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<a id="more"></a>

<h2 id="二、箭头函数和普通函数的区别"><a href="#二、箭头函数和普通函数的区别" class="headerlink" title="二、箭头函数和普通函数的区别"></a>二、箭头函数和普通函数的区别</h2><p>**箭头函数 **</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let fun1 = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>普通函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;222&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1、箭头函数没有原型属性（prototype），所以箭头函数本身没有-this"><a href="#1、箭头函数没有原型属性（prototype），所以箭头函数本身没有-this" class="headerlink" title="1、箭头函数没有原型属性（prototype），所以箭头函数本身没有 this"></a>1、箭头函数没有原型属性（prototype），所以箭头函数本身没有 this</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let a = <span class="function"><span class="params">()</span>=&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a.prototypt); <span class="regexp">//</span> <span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="2、箭头函数不绑定-this，会捕获其所在的上下文的-this-值，作为自己的-this-值"><a href="#2、箭头函数不绑定-this，会捕获其所在的上下文的-this-值，作为自己的-this-值" class="headerlink" title="2、箭头函数不绑定 this，会捕获其所在的上下文的 this 值，作为自己的 this 值"></a>2、箭头函数不绑定 this，会捕获其所在的上下文的 this 值，作为自己的 this 值</h3><h3 id="3、箭头函数不绑定-arguments，取而代之用-rest-剩余参数…解决"><a href="#3、箭头函数不绑定-arguments，取而代之用-rest-剩余参数…解决" class="headerlink" title="3、箭头函数不绑定 arguments，取而代之用 rest 剩余参数…解决"></a>3、箭头函数不绑定 arguments，取而代之用 rest 剩余参数…解决</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">let B = (b)=&gt;&#123;</span><br><span class="line">  console.log(arguments);</span><br><span class="line">&#125;</span><br><span class="line">B(<span class="number">2</span>,<span class="number">92</span>,<span class="number">32</span>,<span class="number">32</span>);  =&gt;  Uncaught ReferenceError: arguments <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line">let C = (...c) =&gt; &#123;</span><br><span class="line">  console.log(c);</span><br><span class="line">&#125;</span><br><span class="line">C(<span class="number">3</span>,<span class="number">82</span>,<span class="number">32</span>,<span class="number">11323</span>);  =&gt;  [<span class="number">3</span>, <span class="number">82</span>, <span class="number">32</span>, <span class="number">11323</span>]</span><br></pre></td></tr></table></figure>

<p>如果箭头函数的 this 指向全局对象，使用<code>arguments</code> 会报错；</p>
<p>如果箭头函数的 this 指向一个普通函数，<code>arguments</code> 会继承这个普通函数。</p>
<h3 id="4、箭头函数通过call-或apply-方法调用一个函数时，只传入了一个参数，对this-没有影响，不会修改箭头函数的-this-指向"><a href="#4、箭头函数通过call-或apply-方法调用一个函数时，只传入了一个参数，对this-没有影响，不会修改箭头函数的-this-指向" class="headerlink" title="4、箭头函数通过call()或apply() 方法调用一个函数时，只传入了一个参数，对this 没有影响，不会修改箭头函数的 this 指向"></a>4、箭头函数通过<code>call()</code>或<code>apply()</code> 方法调用一个函数时，只传入了一个参数，对<code>this</code> 没有影响，不会修改箭头函数的 this 指向</h3><p>要想修改箭头函数的 this 指向，只需要修改它外层的普通函数 this 指向。</p>
<h3 id="5、箭头函数是匿名函数，不能作为构造函数，不能使用-new"><a href="#5、箭头函数是匿名函数，不能作为构造函数，不能使用-new" class="headerlink" title="5、箭头函数是匿名函数，不能作为构造函数，不能使用 new"></a>5、箭头函数是匿名函数，不能作为构造函数，不能使用 new</h3><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">let Fun1 = ()=&gt;<span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  console.log(&#x27;111&#x27;)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line">let fc = new Fun1();  =&gt;  Uncaught TypeError: Fun1 <span class="keyword">is</span> <span class="keyword">not</span> a <span class="function"><span class="keyword">constructor</span></span></span><br></pre></td></tr></table></figure>

<h3 id="6、箭头函数不能当做-Generator，不能使用-yield-关键字"><a href="#6、箭头函数不能当做-Generator，不能使用-yield-关键字" class="headerlink" title="6、箭头函数不能当做 Generator，不能使用 yield 关键字"></a>6、箭头函数不能当做 Generator，不能使用 yield 关键字</h3><h2 id="三、new-的过程"><a href="#三、new-的过程" class="headerlink" title="三、new 的过程"></a>三、new 的过程</h2><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="type">myFunction</span>(<span class="string">&quot;Li&quot;</span>, <span class="string">&quot;Cherry&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="type">myFunction</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  obj.__proto__ = myFunction.prototype;</span><br><span class="line">  <span class="keyword">var</span> result = myFunction.call(obj, <span class="string">&quot;Li&quot;</span>, <span class="string">&quot;Cherry&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> typeof result === <span class="string">&#x27;obj&#x27;</span> ? result : <span class="type">obj</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>创建一个空对象 obj；</li>
<li>将新创建的空对象的隐式原型（proto）指向其构造函数的显式原型（prototype）；</li>
<li>改变 this 的指向；</li>
<li>如果无返回值或者返回一个非对象值，则将 obj 返回作为新对象；如果返回值是一个新对象的话那么直接返回该对象。</li>
</ol>
<p><a href="https://juejin.im/post/5c76972af265da2dc4538b64">箭头函数参考文献</a></p>
<p><a href="https://juejin.im/post/59bfe84351882531b730bac2">new 的过程参考文献</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6：浅谈Promise、Generator以及async await</title>
    <url>/2019/10/12/ES6%EF%BC%9A%E6%B5%85%E8%B0%88Promise%E3%80%81Generator%E4%BB%A5%E5%8F%8Aasync%20await/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、Generator"><a href="#一、Generator" class="headerlink" title="一、Generator"></a>一、Generator</h2><h3 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><p>Generator 函数是 ES6 提供的一种异步编程解决方案，执行 Generator 函数会返回一个<strong>遍历器对象</strong>。形式上，Generator 函数是一个普通函数，但是有两个特征：</p>
<p>​ （1）function 关键字和函数名之间有一个星号（*）；</p>
<p>​ （2）函数体内部使用 yield 表达式。</p>
<h3 id="2、实现"><a href="#2、实现" class="headerlink" title="2、实现"></a>2、实现</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">function* hello(x)&#123;</span><br><span class="line">  let y = <span class="number">2</span> * (<span class="keyword">yield</span>(x+<span class="number">1</span>));</span><br><span class="line">  let z = <span class="keyword">yield</span>(y / <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> (x+y+z);</span><br><span class="line">&#125;</span><br><span class="line">let <span class="function"><span class="keyword">fun</span> = <span class="title">hello</span></span>(<span class="number">5</span>);</span><br><span class="line">cosnole.log(<span class="keyword">fun</span>.<span class="keyword">next</span>())     //=&gt;&#123;<span class="symbol">value:</span><span class="number">6</span>, <span class="symbol">done:</span><span class="literal">false</span>&#125;</span><br><span class="line">cosnole.log(<span class="keyword">fun</span>.<span class="keyword">next</span>(<span class="number">12</span>))   /<span class="regexp">/=&gt;&#123;value:8, done:false&#125;</span></span><br><span class="line"><span class="regexp">cosnole.log(fun.next(13))   /</span><span class="regexp">/=&gt;&#123;value:42, done:false&#125;</span></span><br></pre></td></tr></table></figure>

<p>（1）执行第一个 next 时，<strong>x=5</strong>，函数执行到 yield(x+1)，所以返回 5+1=6；</p>
<p>（2）执行第二个 next 时，<strong>x = 5</strong>，传入的参数会代替 yield(x+1)的位置，即 yield(x+1) = 12，所以<strong>y = 2 * 12 = 24</strong>，函数执行到 yield(y / 3)，所以返回 y / 3 = (2 * 12) / 3 = 8;</p>
<p>（3）执行第三个 next 时，<strong>x = 5</strong>，<strong>y = 2 * 12 = 24</strong>，传入的参数会代替 yield(y / 3)的位置，即<strong>z = 13</strong>，所以最终返回 x + y + z = 5 + 24 + 13 = 42。</p>
<p><a href="https://juejin.im/post/5c40484bf265da61171cfb4d">从 for of 聊到 Generator</a></p>
<h2 id="二、Promise"><a href="#二、Promise" class="headerlink" title="二、Promise"></a>二、Promise</h2><h3 id="1、基本概念-1"><a href="#1、基本概念-1" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><p>Promise 是异步编程的一种解决方案，简单来说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。</p>
<h3 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h3><p>（1）<strong>对象的状态不会受外界的影响</strong>。Promise 对象代表一个异步操作，有三种状态：pending（进行中）、fufilled（已成功）、rejected（已失败），只有异步操作的结果才能决定最后的状态。</p>
<p>（2）<strong>一旦该状态改变，就不会再变，任何时候都可以得到这个结果</strong>。状态的改变只能由 pending-&gt;fulfilled（resolved）和 pending-&gt;rejected.</p>
<h3 id="3、优缺点"><a href="#3、优缺点" class="headerlink" title="3、优缺点"></a>3、优缺点</h3><p><strong>优点</strong>：</p>
<p>​ （1）可以将异步操作的流程表达出来，避免了层层嵌套的回调函数；</p>
<p>​ （2）Promise 对象提供统一的接口，使得异步操作更加容易。</p>
<p><strong>缺点</strong>：</p>
<p>​ （1）无法取消 Promise，一旦新建他就会立即执行，无法中途取消 ；</p>
<p>​ （2）如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部；</p>
<p>​ （3）当处于 pending 状态时，不知道目前进行到了哪个阶段（是刚刚开始还是即将结束）。</p>
<h3 id="4、原理"><a href="#4、原理" class="headerlink" title="4、原理"></a>4、原理</h3><p>Promise 对象是一个构造函数，用来生成 Promise 实例，这个实例一旦创建就会立即执行，实例中接收一个执行函数作为参数，这个执行函数有两个函数类型形参（resolve 和 reject），resolved 函数的作用是将 Promie 对象的状态从“未完成”到“成功”，在异步函数成功时调用，并将异步操作的结果作为参数传递出去；rejected 函数的作用是将 Promise 对象的状态从“未完成”到“失败”，在异步函数失败时调用，并将异步操作报出的错误作为参数传递出去。</p>
<p>Promise 实例生成后，可以用 then 方法分别指定 resolved 状态和 rejected 状态的回调函数。</p>
<p><strong>真正的链式 Promise 是指在当前 promise 达到 fulfilled 状态后，即开始进行下一个 Promise。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  resolve(<span class="number">1</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="5、手撕-Promise"><a href="#5、手撕-Promise" class="headerlink" title="5、手撕 Promise"></a>5、手撕 Promise</h3><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = &#x27;pending&#x27;;     // 首先创建三个常量来表示状态，</span><br><span class="line"><span class="keyword">const</span> RESOLVED = &#x27;resolved&#x27;;</span><br><span class="line"><span class="keyword">const</span> REJECTED = &#x27;rejected&#x27;;</span><br><span class="line"></span><br><span class="line">function MyPromise(fn)&#123;</span><br><span class="line">  <span class="keyword">const</span> that = this;   // 在函数体内部创建常量that，因为代码可能会异步执行，用于获取正确的this对象；</span><br><span class="line">  this.<span class="keyword">state</span> = PENDING;    // 一开始Promise状态应该是pending；</span><br><span class="line">  that.value = null;    // value变量用于保存resolve或者reject中传入的值</span><br><span class="line">  that.resolvedCallbacks = [];    // 用于保存then中的回调函数，因为当执行完Promise时状态可能还是等待</span><br><span class="line">  that.rejectedCallbacks = [];    // 中，这时候应该把then中的回调保存起来用于状态改变时用</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">  首先两个函数都得判断当前状态是否为等待状态，只有等待状态才可以改变状态；</span><br><span class="line">  将当前状态改变为对应状态，并且将传入的值赋给value；</span><br><span class="line">  遍历回调数组并执行</span><br><span class="line">  */</span><br><span class="line">  function resolve(value)&#123;</span><br><span class="line">    if(that.<span class="keyword">state</span> == PENDING)&#123;</span><br><span class="line">      that.<span class="keyword">state</span> = RESOLVED;</span><br><span class="line">      that.value = value;</span><br><span class="line">      that.resolvedCallbacks.map(item=&gt;item(that.value));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  function reject(value)&#123;</span><br><span class="line">    if(that.<span class="keyword">state</span> == PENDING)&#123;</span><br><span class="line">      that.<span class="keyword">state</span> = REJECTED;</span><br><span class="line">      that.value = value;</span><br><span class="line">      that.rejectedCallbacks.map(item=&gt;item(that.value));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">  执行传入的参数并且将之前两个函数当做函数传进去；</span><br><span class="line">  可能执行函数过程中会遇到错误，需要捕获错误并执行到reject函数</span><br><span class="line">  */</span><br><span class="line">  try&#123;</span><br><span class="line">    fn(resolve, reject)</span><br><span class="line">  &#125; catch(e)&#123;</span><br><span class="line">    reject(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">首先判断两个参数是否为函数类型，因为这两个参数是可选参数；</span><br><span class="line">当参数不是函数类型的时候，需要创建一个函数赋值给对应的参数，同时也实现了透传</span><br><span class="line">*/</span><br><span class="line">MyPromise.prototype.then = function(<span class="keyword">on</span>Fulfilled,<span class="keyword">on</span>Rejected)&#123;</span><br><span class="line">  <span class="keyword">const</span> that = this;</span><br><span class="line">  <span class="keyword">on</span>Fulfilled = typeof <span class="keyword">on</span>Fulfilled === &#x27;function&#x27; ? <span class="keyword">on</span>Fulfilled : v=&gt; v;</span><br><span class="line">  <span class="keyword">on</span>Rejected = typeof <span class="keyword">on</span>Rejected === &#x27;function&#x27; ? <span class="keyword">on</span>Rejected : r=&gt; &#123;throw r&#125;;</span><br><span class="line">  if(that.<span class="keyword">state</span> === PENDING)&#123;</span><br><span class="line">    that.resolvedCallbacks.push(<span class="keyword">on</span>Fulfilled);</span><br><span class="line">    that.rejectedCallbacks.push(<span class="keyword">on</span>Rejected)</span><br><span class="line">  &#125;</span><br><span class="line">  if(that.<span class="keyword">state</span> === RESOLVED)&#123;</span><br><span class="line">    <span class="keyword">on</span>Fulfilled(that.value);</span><br><span class="line">  &#125;</span><br><span class="line">  if(that.<span class="keyword">state</span> === REJECTED)&#123;</span><br><span class="line">    <span class="keyword">on</span>Rejected(that.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://juejin.im/post/5b31a4b7f265da595725f322">面试精选之 Promise</a></p>
<h2 id="三、async、await"><a href="#三、async、await" class="headerlink" title="三、async、await"></a>三、async、await</h2><h3 id="1、基本概念-2"><a href="#1、基本概念-2" class="headerlink" title="1、基本概念"></a>1、基本概念</h3><p>async 其实就是 Generator 函数的语法糖。async 就是将函数返回值使用 Promise.resolve()包裹一下，和 then 中处理返回值一样，并且 await 只能配套 async 使用。</p>
<p>**特点 **</p>
<p>​ （1）内置执行函数</p>
<p>​ asyns 函数的执行和普通函数的一样<code>asyncFun()</code></p>
<p>​ （2）更好的语义</p>
<p>​ async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</p>
<p>​ （3）更广泛的运用性</p>
<p>​ async 函数的 await 命令后面，可以是 Promise 对象和原始类型的值（数值、字符串、布尔值，但这时等同于同步操作）</p>
<p>​ （4）返回值是 Promise</p>
<p>​ 可以使用 then 指定下一步的操作。</p>
<h3 id="2、用法"><a href="#2、用法" class="headerlink" title="2、用法"></a>2、用法</h3><p>async 函数返回一个 Promise 对象，可以使用<code>then</code>方法添加回调函数。当函数执行的时候，一旦遇到<code>await</code> 就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve,ms)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">value, ms</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> timeout(ms);</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line">asyncPrint(<span class="string">&#x27;hello world&#x27;</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<p>等同于</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve,ms)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncPrint</span>(<span class="params">value, ms</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> timeout(ms);</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line">asyncPrint(<span class="string">&#x27;hello world&#x27;</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://juejin.im/post/596e142d5188254b532ce2da">理解 async/await</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JS：call、apply、bind</title>
    <url>/2019/10/15/JS%EF%BC%9Acall%E3%80%81apply%E3%80%81bind/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、call"><a href="#一、call" class="headerlink" title="一、call"></a>一、call</h2><p>改变函数的 this 指向，<code>call()</code> 第一个参数为 this 要指定的对象，后面可以<strong>接收多个参数列表 **，会</strong>立即调用** 。</p>
<p><strong>注：</strong> 如果第一个参数为空|null|undefined，则 this 指向 window。</p>
<a id="more"></a>

<h4 id="手撕-call"><a href="#手撕-call" class="headerlink" title="手撕 call"></a>手撕 call</h4><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call = functionl(context)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">this</span> != <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> args = [...<span class="built_in">arguments</span>].slice(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> result = context.fn(...args);</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解析</strong></p>
<ol>
<li>context 为可选参数，如果不传的话默认上下文为 window；</li>
<li>给 context 创建一个 fn 属性，并将值设置为需要调用的函数（因为 call 可以传入多个参数作为调用函数的参数，所以需要将参数剥离出来）；</li>
<li>调用函数并将对象上的函数删除</li>
</ol>
<h2 id="二、apply"><a href="#二、apply" class="headerlink" title="二、apply"></a>二、apply</h2><p>和 call 一样，唯一的区别就是调用参数的形式不同，apply 传入的是数组。</p>
<h4 id="手撕-apply"><a href="#手撕-apply" class="headerlink" title="手撕 apply"></a>手撕 apply</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply = functionl(context)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">this</span> != <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span></span><br><span class="line">  context.fn = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="comment">//处理参数和call有区别</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">arguments</span>[<span class="number">1</span>])&#123;</span><br><span class="line">    result = context.fn(...arguments[<span class="number">1</span>])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = context.fn()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、bind"><a href="#三、bind" class="headerlink" title="三、bind"></a>三、bind</h2><p>bind 也是为了改变函数体内部 this 的指向，返回一个函数，稍后调用。</p>
<h4 id="手撕-bind"><a href="#手撕-bind" class="headerlink" title="手撕 bind"></a>手撕 bind</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="built_in">this</span></span><br><span class="line">  <span class="keyword">const</span> args = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">  <span class="comment">//返回一个函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//因为返回了一个函数，我们可以new F()，所以需要判断</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span> <span class="keyword">instanceof</span> F)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> _this(...args,...arguments)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _this.apply(context,args.concat(...arguments))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、区别"><a href="#四、区别" class="headerlink" title="四、区别"></a>四、区别</h2><h3 id="1、call、apply、bind-的区别"><a href="#1、call、apply、bind-的区别" class="headerlink" title="1、call、apply、bind 的区别"></a>1、call、apply、bind 的区别</h3><ul>
<li>call 和 apply 改变了函数的 this 指向后便立即执行；</li>
<li>bind 则是返回改变了上下文之后的一个函数，便于稍后调用。</li>
</ul>
<h3 id="2、call、apply-的区别"><a href="#2、call、apply-的区别" class="headerlink" title="2、call、apply 的区别"></a>2、call、apply 的区别</h3><p>call 和 apply 的第一个参数都是 this 要指向的对象，它们两个不同的地方在于第二个参数之后的参数。</p>
<ul>
<li>call 从第二个参数开始以参数列表的形式展现；</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">fn</span>.call(obj, arg<span class="number">1</span>, arg<span class="number">2</span>, arg<span class="number">3</span>...);</span><br></pre></td></tr></table></figure>

<ul>
<li>apply 将除第一个以外的所有参数都放在一个数组中作为第二个参数。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">fn</span><span class="selector-class">.apply</span>(<span class="selector-tag">obj</span>, <span class="selector-attr">[arg1, arg2, arg3...]</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS：for..in和for..of的区别</title>
    <url>/2019/10/17/JS%EF%BC%9Afor-in%E5%92%8Cfor-of%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="1、for…in"><a href="#1、for…in" class="headerlink" title="1、for…in"></a>1、for…in</h2><p><strong>for…in 主要用于遍历对象，取到的是 key</strong></p>
<a id="more"></a>

<p><strong>缺陷</strong></p>
<ol>
<li>索引是字符串类型的数字，因而不能直接进行几何运算</li>
<li>遍历顺序可能不是实际的内部顺序</li>
<li>for…in 会遍历数组所有的可枚举属性，包括原型</li>
</ol>
<h2 id="2、for…of"><a href="#2、for…of" class="headerlink" title="2、for…of"></a>2、for…of</h2><p><strong>for…of 只能遍历数组，取到的是 value</strong></p>
<h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p><strong>for…in 遍历对象或返回的是 key</strong></p>
<p><strong>for…of 遍历对象会报错，遍历数组返回的是 value</strong></p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;<span class="string">&quot;one&quot;</span>:<span class="number">1</span>,<span class="string">&quot;two&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> a)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(i)  =&gt;  one  two</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> a)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(i)  =&gt;  Uncaught TypeError: a <span class="keyword">is</span> <span class="keyword">not</span> iterable</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> b)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(i)  =&gt;  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> b)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(i)  =&gt;  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS：map、filter、reduce</title>
    <url>/2020/03/22/JS%EF%BC%9Amap%E3%80%81filter%E3%80%81reduce/</url>
    <content><![CDATA[<h3 id="1、map"><a href="#1、map" class="headerlink" title="1、map"></a>1、map</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.map((item, index, <span class="built_in">array</span>)=&gt; item = item+<span class="number">1</span>)  =&gt; [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><code>map</code>的回调函数可接受三个参数，遍历原数组，对每个元素进行操作，返回一个新数组。</p>
<h3 id="2、filter"><a href="#2、filter" class="headerlink" title="2、filter"></a>2、filter</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.map((item, index, <span class="built_in">array</span>)=&gt; item != <span class="number">2</span>)  =&gt; [<span class="number">1</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p><code>filter</code> 的回调函数也可以接受三个参数，在遍历原数组事，将返回值为 true 的元素放在新数组中，返回新数组。</p>
<h3 id="3、reduce"><a href="#3、reduce" class="headerlink" title="3、reduce"></a>3、reduce</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.map((acc, current) =&gt; acc+ current, <span class="number">0</span>)  =&gt; <span class="number">6</span></span><br></pre></td></tr></table></figure>

<p><code>reduce</code>接收两个参数，分别是回调函数和初始值。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS：scrollWidth、offsetWidth、clientWidth</title>
    <url>/2020/11/03/JS%EF%BC%9AscrollWidth%E3%80%81offsetWidth%E3%80%81clientWidth/</url>
    <content><![CDATA[<h3 id="Element-clientWidth"><a href="#Element-clientWidth" class="headerlink" title="Element.clientWidth"></a>Element.clientWidth</h3><p>内联元素以及没有css样式的元素的<code>clientWidth</code>值为0。 <code>Element.clientWidth</code>属性表示元素的内部宽度。</p>
<a id="more"></a>

<p>该属性包括内边距padding，但不包括边框border、外边距margin和垂直滚动条（如果有的话）。</p>
<p>⚠️ 当在根元素（&lt; html &gt;元素）上使用<code>clientWidth</code>(或者在&lt; body &gt;上，如果文档是在怪异模式下)，将返回viewport的宽度（不包含任何滚动条）。</p>
<blockquote>
<p>这个属性会进行四舍五入并返回整数，如果需要小数形式的值，则使用<code>element.getBoundingClientRect()</code>。</p>
</blockquote>
<h3 id="Element-scrollWidth"><a href="#Element-scrollWidth" class="headerlink" title="Element.scrollWidth"></a>Element.scrollWidth</h3><p><code>Element.scrollWidth</code>这个只读属性是元素内容宽度的一种度量，包括由于overflow溢出而在屏幕上不可见的内容。</p>
<p>scrollWidth值等于元素在不使用水平滚动条的情况下适合视口中的所有内容所需的最小宽度。</p>
<p>宽度的测量与<code>clientWidth</code>相同：它包括元素的内边距，但是不包括边框、外边距或垂直滚动条（如果存在）。它还可以包括伪元素的宽度，例如<code>::before</code>或<code>::after</code>。如果元素的内容可以适合而不需要水平滚动条，则其<code>scrollWidth</code>等于<code>clientWidth</code>。</p>
<blockquote>
<ol>
<li>这个属性会进行四舍五入并返回整数，如果需要小数形式的值，则使用<code>element.getBoundingClientRect()</code>。</li>
<li>谷歌获取的<code>Element.scrollWidth</code>和IE、火狐下获取的<code>Element.scrollWidth</code>并不相同。</li>
</ol>
</blockquote>
<h3 id="Element-offsetWidth"><a href="#Element-offsetWidth" class="headerlink" title="Element.offsetWidth"></a>Element.offsetWidth</h3><p><code>Element.offsetWidth</code>是一个只读属性，返回一个元素的布局宽度。</p>
<p><code>Element.offsetWidth</code>是测量包含元素的边框（border）、水平线上的内边距（padding）、垂直方向上的滚动条、以及css设置的的宽度（width）值。</p>
<p>⚠️ 各浏览器的offsetWidth可能有所不同。</p>
<blockquote>
<p>这个属性会进行四舍五入并返回整数，如果需要小数形式的值，则使用<code>element.getBoundingClientRect()</code>。</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS：typeof、instanceof以及Object.prototyte.toString.call()</title>
    <url>/2019/10/13/JS%EF%BC%9Atypeof%E3%80%81instanceof%E4%BB%A5%E5%8F%8Aobject-prototyte-tostring-call/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><h3 id="1、基本数据类型"><a href="#1、基本数据类型" class="headerlink" title="1、基本数据类型"></a>1、基本数据类型</h3><a id="more"></a>

<p>number、string、Boolean、undefined、null、Symbol</p>
<h3 id="2、引用数据类型"><a href="#2、引用数据类型" class="headerlink" title="2、引用数据类型"></a>2、引用数据类型</h3><p>Object(Array、Function、Date。。。)</p>
<h3 id="3、基本数据类型和引用数据类型的区别"><a href="#3、基本数据类型和引用数据类型的区别" class="headerlink" title="3、基本数据类型和引用数据类型的区别"></a>3、基本数据类型和引用数据类型的区别</h3><p>（1）基本数据类型的值不可变，引用数据类型的值可变；</p>
<p>（2）基本数据类型存储的是值，引用数据类型存储的是地址（指针）；</p>
<p>（3）基本数据类型的比较是值得比较，引用数据类型的比较是地址的比较；</p>
<p>（4）基本数据类型的值保存在栈中；引用数据类型的值保存在堆中，指针保存在栈中，这个指针指向堆中的值。</p>
<h2 id="二、判断数据类型的方法"><a href="#二、判断数据类型的方法" class="headerlink" title="二、判断数据类型的方法"></a>二、判断数据类型的方法</h2><h3 id="1、typeof"><a href="#1、typeof" class="headerlink" title="1、typeof"></a>1、typeof</h3><ul>
<li><strong>对于基本数据类型，除了 null 输出为 object，其他的都是正确的类型；</strong></li>
<li><strong>对于引用数据类型，除了 function 输出为 function，其他的都是 object</strong></li>
</ul>
<h4 id="（1）原理"><a href="#（1）原理" class="headerlink" title="（1）原理"></a>（1）原理</h4><p>js 在底层存储变量的时候，会在变量的机器码的低位 1-3 位存储其类型信息</p>
<ul>
<li>000：对象</li>
<li>010：浮点数</li>
<li>100：字符创</li>
<li>110：布尔</li>
<li>1：整数</li>
<li>null：所有机器码均为 0</li>
<li>undefined：用-2^30 整数来表示</li>
</ul>
<p><strong>因为 null 的所有机器码都为 0，所以 typeof 就把他当做了对象来看待</strong></p>
<h4 id="（2）实现"><a href="#（2）实现" class="headerlink" title="（2）实现"></a>（2）实现</h4><p>typeof 可以判断一个变量的类型，</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span>               =&gt;  <span class="string">&quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;1&quot;</span>             =&gt;  <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>       =&gt;  <span class="string">&quot;undefined&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>            =&gt;  <span class="string">&quot;boolean&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>()        =&gt;  <span class="string">&quot;symbol&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>            =&gt;  <span class="string">&quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> []              =&gt;  <span class="string">&quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;              =&gt;  <span class="string">&quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">function</span> a()&#123;&#125;  =&gt;  <span class="string">&quot;function&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、instanceof"><a href="#2、instanceof" class="headerlink" title="2、instanceof"></a>2、instanceof</h3><p>语法：<code>数据 instanceof 数据类型</code>，返回 true 或 false</p>
<h4 id="（1）作用"><a href="#（1）作用" class="headerlink" title="（1）作用"></a>（1）作用</h4><ul>
<li><strong>判断一个实例是否属于某种类型；</strong></li>
<li><strong>判断一个实例是否是其父类型或者祖先类型的实例。</strong></li>
</ul>
<h4 id="（2）原理"><a href="#（2）原理" class="headerlink" title="（2）原理"></a>（2）原理</h4><p>instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败则返回**false **</p>
<h4 id="（3）实现"><a href="#（3）实现" class="headerlink" title="（3）实现"></a>（3）实现</h4><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>             =&gt;  <span class="literal">true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Object</span>            =&gt; <span class="literal">true</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>            =&gt; <span class="literal">false</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>() <span class="keyword">instanceof</span> <span class="built_in">String</span>  =&gt; <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line">a <span class="keyword">instanceof</span> <span class="built_in">Object</span>             =&gt; <span class="literal">true</span></span><br><span class="line"><span class="keyword">function</span> b()&#123;&#125;</span><br><span class="line">b <span class="keyword">instanceof</span> <span class="built_in">Function</span>           =&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="3、Object-prototype-toString-call"><a href="#3、Object-prototype-toString-call" class="headerlink" title="3、Object.prototype toString.call()"></a>3、Object.prototype toString.call()</h3><p>语法：<code>Object.prototype.toString.call(数据)</code>返回<code>[object 数据类型]</code></p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)            =&gt;  <span class="string">&quot;[object Object]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([])            =&gt;  <span class="string">&quot;[object Array]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">function</span>()&#123;&#125;)  =&gt;  <span class="string">&quot;[object Function]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">&#x27;&#x27;</span>)            =&gt;  <span class="string">&quot;[object String]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>)             =&gt;  <span class="string">&quot;[object Number]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>)          =&gt;  <span class="string">&quot;[object Boolean]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>)          =&gt;  <span class="string">&quot;[object Null]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>)     =&gt; <span class="string">&quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call()              =&gt; <span class="string">&quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>())    =&gt;  <span class="string">&quot;[object Date]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/at/</span>)          =&gt;  <span class="string">&quot;[object RegExp]&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、类型转换"><a href="#三、类型转换" class="headerlink" title="三、类型转换"></a>三、类型转换</h2><h3 id="1、类型转换"><a href="#1、类型转换" class="headerlink" title="1、类型转换"></a>1、类型转换</h3><table>
<thead>
<tr>
<th>原始值</th>
<th align="center">转换目标</th>
<th align="right">结果</th>
</tr>
</thead>
<tbody><tr>
<td>number</td>
<td align="center">Boolean</td>
<td align="right">除了 0、-0、NaN 都为 true</td>
</tr>
<tr>
<td>string</td>
<td align="center">Boolean</td>
<td align="right">除了空串都为 true</td>
</tr>
<tr>
<td>undefined、null</td>
<td align="center">Boolean</td>
<td align="right">false</td>
</tr>
<tr>
<td>引用类型</td>
<td align="center">Boolean</td>
<td align="right">true</td>
</tr>
<tr>
<td>number</td>
<td align="center">string</td>
<td align="right">5=&gt;’5’</td>
</tr>
</tbody></table>
<p>| Boolean、函数<br>、symbol |string |’true’ |<br>|数组 |string |[1,2]=&gt;’1,2’ |<br>|对象 | string|’[object Object]’ |<br>|string |number |’1’=&gt;1,’a’=&gt;NaN |<br>|数组 |number |空数组=&gt;0,存在一个元素且为数字=&gt;数字,其他=&gt;NaN |<br>| null|number |0 |<br>|除了数组的引用类型 |number | NaN|<br>|symbol | number|报错 |</p>
<h3 id="2、四则运算"><a href="#2、四则运算" class="headerlink" title="2、四则运算"></a>2、四则运算</h3><ul>
<li><p>加法运算</p>
<ul>
<li>其中一方为字符串，会把另外一方也转成字符串；</li>
<li>如果一方不是字符串或数字，将它转换为数字或字符串；</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + &#x27;<span class="number">1</span>&#x27; =&gt; &#x27;<span class="number">11</span>&#x27;</span><br><span class="line">true + true =&gt; <span class="number">2</span></span><br><span class="line"><span class="number">4</span> + [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] =&gt;&#x27;<span class="number">41</span>,<span class="number">2</span>,<span class="number">3</span>&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>除了加法以外，只要其中一方是数字，另一方也转成数字。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端模块化</title>
    <url>/2019/10/20/JS%EF%BC%9A%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h3 id="1、CommonJS"><a href="#1、CommonJS" class="headerlink" title="1、CommonJS"></a>1、CommonJS</h3><p>从架构的角度来看，CommonJS模块是一个可以复用的JavaScript块，它出口对任何独立代码都起作用的特定对象。</p>
<a id="more"></a>

<p>CommonJS模块上包括两个基础的部分：一个取名为exports的自由变量，它包含模块希望提供给其他模块的对象，以及模块所需要的可以用来引入和导出其他模块的函数。</p>
<p>Node.js 是 CommonJS 规范的主要实践者，它有四个重要的环境变量为模块化的实现提供支持：<code>module</code>、<code>exports</code>、<code>require</code>、<code>global</code>。实际使用时，用<code>module.exports</code>定义当前模块对外输出的接口（不推荐直接用<code>exports</code>），用<code>require</code>加载模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义模块math.js</span></span><br><span class="line"><span class="keyword">var</span> basicNum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="comment">//在这里写上需要向外暴露的函数、变量</span></span><br><span class="line">  add: add,</span><br><span class="line">  basicNum: basicNum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用自定义的模块时，参数包含路径，可省略.js</span></span><br><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">&#x27;./math&#x27;</span>);</span><br><span class="line">math.add(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用核心模块时，不需要带路径</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line">http.createService(...).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>commonJS 用同步的方式加载模块。在服务端，模块文件都存在本地磁盘，读取非常快，所以这样做不会有问题。但是在浏览器端，限于网络原因，更合理的方案是使用异步加载。</p>
<h3 id="2、AMD-和-require-js"><a href="#2、AMD-和-require-js" class="headerlink" title="2、AMD 和 require.js"></a>2、AMD 和 require.js</h3><p><strong>定义：</strong> 异步模块定义（Asynchronous Module Definition）</p>
<p>AMD 规范采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。这里介绍用 require.js 实现 AMD 规范的模块化：用<code>require.config()</code>指定引用路径等，用<code>define()</code>定义模块，用<code>require()</code>加载模块。</p>
<p>首先我们需要引入 require.js 文件和一个入口文件 main.js。main.js 中配置<code>require.config()</code>并规定项目中用到的基础模块。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 网页中引入require.js及main.js</span><br><span class="line">&lt;script src=<span class="string">&quot;js/require.js&quot;</span> data-main=<span class="string">&quot;js/main&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> main.js 入口文件/主模块</span><br><span class="line"><span class="regexp">//</span> 首先用config()指定各模块路径和引用名</span><br><span class="line">require.config(&#123;</span><br><span class="line">  baseUrl: <span class="string">&quot;js/lib&quot;</span>,</span><br><span class="line">  paths: &#123;</span><br><span class="line">    <span class="string">&quot;jquery&quot;</span>: <span class="string">&quot;jquery.min&quot;</span>,  <span class="regexp">//</span>实际路径为js<span class="regexp">/lib/</span>jquery.min.js</span><br><span class="line">    <span class="string">&quot;underscore&quot;</span>: <span class="string">&quot;underscore.min&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="regexp">//</span> 执行基本操作</span><br><span class="line">require([<span class="string">&quot;jquery&quot;</span>,<span class="string">&quot;underscore&quot;</span>],<span class="keyword">function</span>($,_)&#123;</span><br><span class="line">  <span class="regexp">//</span> some code here</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>引用模块的时候，我们将模块名放在<code>[]</code>中作为<code>reqiure()</code>的第一参数；如果我们定义的模块本身也依赖其他模块,那就需要将它们放在<code>[]</code>中作为<code>define()</code>的第一参数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义math.js模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> basicNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        add: add,</span><br><span class="line">        basicNum :basicNum</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定义一个依赖underscore.js的模块</span></span><br><span class="line">define([<span class="string">&#x27;underscore&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">_</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> classify = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">list</span></span>)</span>&#123;</span><br><span class="line">    _.countBy(<span class="keyword">list</span>,<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num &gt; <span class="number">30</span> ? <span class="string">&#x27;old&#x27;</span> : <span class="string">&#x27;young&#x27;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    classify :classify</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用模块，将模块放在[]内</span></span><br><span class="line"><span class="keyword">require</span>([<span class="string">&#x27;jquery&#x27;</span>, <span class="string">&#x27;math&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$, math</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = math.add(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">  $(<span class="string">&quot;#sum&quot;</span>).html(sum);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3、CMD-和-sea-js"><a href="#3、CMD-和-sea-js" class="headerlink" title="3、CMD 和 sea.js"></a>3、CMD 和 sea.js</h3><p>require.js 在申明依赖的模块时会在第一之间加载并执行模块内的代码：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">define([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>], <span class="function"><span class="keyword">function</span><span class="params">(a, b, c, d, e, f)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 等于在最前面声明并初始化了要用到的所有模块</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">// 即便没用到某个模块 b，但 b 还是提前执行了</span></span><br><span class="line">      b.foo()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>CMD 是另一种 js 模块化方案，它与 AMD 很类似，不同点在于：AMD 推崇依赖前置、提前执行，CMD 推崇依赖就近、延迟执行。此规范其实是在 sea.js 推广过程中产生的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AMD写法</span></span><br><span class="line">define([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c, d, e, f</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 等于在最前面声明并初始化了要用到的所有模块</span></span><br><span class="line">    a.doSomething();</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 即便没用到某个模块 b，但 b 还是提前执行了</span></span><br><span class="line">        b.doSomething()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// CMD写法</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">require</span>, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">require</span>(<span class="string">&#x27;./a&#x27;</span>); <span class="comment">//在需要时申明</span></span><br><span class="line">    a.doSomething();</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="keyword">require</span>(<span class="string">&#x27;./b&#x27;</span>);</span><br><span class="line">        b.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sea.js</span></span><br><span class="line"><span class="comment">// 定义模块 math.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">require</span>, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $ = <span class="keyword">require</span>(<span class="string">&#x27;jquery.js&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    exports.add = add;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 加载模块</span></span><br><span class="line">seajs.<span class="keyword">use</span>([<span class="string">&#x27;math.js&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">math</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = math.add(<span class="number">1</span>+<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="4、ES6-Module"><a href="#4、ES6-Module" class="headerlink" title="4、ES6 Module"></a>4、ES6 Module</h3><p>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，旨在成为浏览器和服务器通用的模块解决方案。其模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。<code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义模块 math.js</span></span><br><span class="line"><span class="keyword">var</span> basicNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; basicNum, add &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; basicNum, add &#125; <span class="keyword">from</span> <span class="string">&#x27;./math&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">    ele.textContent = add(<span class="number">99</span> + basicNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上例所示，使用<code>import</code>命令的时候，用户需要知道所要加载的变量名或函数名。其实 ES6 还提供了<code>export default</code>命令，为模块指定默认输出，对应的<code>import</code>语句不需要使用大括号。这也更趋近于 ADM 的引用写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export default</span></span><br><span class="line"><span class="comment">//定义输出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; basicNum, add &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">from</span> <span class="string">&#x27;./math&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">    ele.textContent = math.add(<span class="number">99</span> + math.basicNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES6 的模块不是对象，<code>import</code>命令会被 JavaScript 引擎静态分析，在编译时就引入模块代码，而不是在代码运行时加载，所以无法实现条件加载。也正因为这个，使得静态分析成为可能。</p>
<p><strong>注意：</strong> import命令是在编译阶段执行的</p>
<h3 id="5、-ES6-模块与-CommonJS-模块的差异"><a href="#5、-ES6-模块与-CommonJS-模块的差异" class="headerlink" title="5、 ES6 模块与 CommonJS 模块的差异"></a>5、 ES6 模块与 CommonJS 模块的差异</h3><h4 id="（1）CommonJS-模块输出的是一个值的拷贝，ES6-模块输出的是值的引用。"><a href="#（1）CommonJS-模块输出的是一个值的拷贝，ES6-模块输出的是值的引用。" class="headerlink" title="（1）CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。"></a>（1）CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</h4><ul>
<li>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</li>
<li>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的<code>import</code>有点像 Unix 系统的“符号连接”，原始值变了，<code>import</code>加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</li>
</ul>
<h4 id="（2）CommonJS-模块是运行时加载，ES6-模块是编译时输出接口。"><a href="#（2）CommonJS-模块是运行时加载，ES6-模块是编译时输出接口。" class="headerlink" title="（2）CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。"></a>（2）CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</h4><ul>
<li>运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。</li>
<li>编译时加载: ES6 模块不是对象，而是通过 <code>export</code> 命令显式指定输出的代码，<code>import</code>是采用静态命令的形式。即在<code>import</code>时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。</li>
</ul>
<p>CommonJS 加载的是一个对象（即<code>module.exports</code>属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>前端模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>JS：原型、原型链继承</title>
    <url>/2019/10/15/JS%EF%BC%9A%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<a id="more"></a>

<h2 id="一、构造函数"><a href="#一、构造函数" class="headerlink" title="一、构造函数"></a>一、构造函数</h2><p><strong>构造函数模式的目的就是为了创建一个自定义类，并且创建这个类的实例。构造函数模式中拥有了类和实例的概念，并且实例和实例之间是相互独立的，即实例识别。</strong></p>
<p>构造函数就是一个普通的函数，创建方式和普通函数没有区别，<strong>不同的是构造函数习惯上首字母大写</strong>。另外就是调用方式的不同，普通函数是直接调用，<strong>而构造函数需要使用 new 关键字来调用</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">    <span class="built_in">this</span>.gender = gender</span><br><span class="line">    <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.age = age</span><br><span class="line">    <span class="built_in">this</span>.gender = gender</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">&quot;旺财&quot;</span>, <span class="number">4</span>, <span class="string">&quot;雄&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(per);<span class="comment">//当我们直接在页面中打印一个对象时，事件上是输出的对象的toString()方法的返回值</span></span><br><span class="line"><span class="built_in">console</span>.log(dog);</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/3174701-1a20d86bf6856c95?imageMogr2/auto-orient/strip%7CimageView2/2/w/587/format/webp"></p>
<p>每创建一个 c<code>Person 构造函数，在 Person 构造函数中，为每一个对象都添加了一个 sayName 方法，也就是说构造函数每执行一次就会创建一个新的 sayName 方法。这样就导致了构造函数执行一次就会创建一个新的方法，执行 10000 次就会创建 10000 个新的方法，而 10000 个方法都是一摸一样的，为什么不把这个方法单独放到一个地方，并让所有的实例都可以访问到呢?这就需要原型(</code>prototype`)</p>
<h2 id="二、原型"><a href="#二、原型" class="headerlink" title="二、原型"></a>二、原型</h2><p><strong>在 JavaScript 中，每当定义一个函数数据类型(普通函数、类)时候，都会天生自带一个 prototype 属性，这个属性指向函数的原型对象，并且这个属性是一个对象数据类型的值。</strong></p>
<p>让我们用一张图表示构造函数和实例原型之间的关系：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3174701-2dd95188a8f6b19e?imageMogr2/auto-orient/strip%7CimageView2/2/w/467/format/webp"></p>
<p>原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象，我们可以将对象中共有的内容，统一设置到原型对象中。</p>
<h2 id="三、原型链"><a href="#三、原型链" class="headerlink" title="三、原型链"></a>三、原型链</h2><h3 id="1-proto-和constructor"><a href="#1-proto-和constructor" class="headerlink" title="1.__proto__和constructor"></a>1.<code>__proto__</code>和<code>constructor</code></h3><p><strong>每一个对象数据类型(普通的对象、实例、prototype……)也天生自带一个属性</strong>proto<strong>，属性值是当前实例所属类的原型(prototype)。原型对象中有一个属性 constructor, 它指向函数对象。</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="constructor">Person()</span> &#123;&#125;</span><br><span class="line">var person = <span class="keyword">new</span> <span class="constructor">Person()</span></span><br><span class="line">console.log(person.__proto__<span class="operator"> === </span><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype)<span class="comment">//true</span></span><br><span class="line">console.log(<span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype.constructor===Person)<span class="comment">//true</span></span><br><span class="line"><span class="comment">//顺便学习一个ES5的方法,可以获得对象的原型</span></span><br><span class="line">console.log(<span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>get<span class="constructor">PrototypeOf(<span class="params">person</span>)</span><span class="operator"> === </span><span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype) <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/3174701-9a3de0b501161c07?imageMogr2/auto-orient/strip%7CimageView2/2/w/530/format/webp"></p>
<h3 id="2-何为原型链"><a href="#2-何为原型链" class="headerlink" title="2.何为原型链"></a>2.何为原型链</h3><p><strong>在 JavaScript 中万物都是对象，对象和对象之间也有关系，并不是孤立存在的。对象之间的继承关系，在 JavaScript 中是通过 prototype 对象指向父类对象，直到指向 Object 对象为止，这样就形成了一个原型指向的链条，专业术语称之为原型链</strong>。</p>
<p>举例说明:person → Person → Object ，普通人继承人类，人类继承对象类</p>
<p><strong>当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找，如果找到则直接使用。如果没有则去原型的原型中寻找,直到找到 Object 对象的原型，Object 对象的原型没有原型，如果在 Object 原型中依然没有找到，则返回 undefined。</strong></p>
<p>我们可以使用对象的<code>hasOwnProperty()</code>来检查对象自身中是否含有该属性；使用<code>in</code>检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回 true</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.a = <span class="number">123</span>;</span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(person.a)<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(person.hasOwnProperty(<span class="string">&#x27;a&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span><span class="keyword">in</span> person)<span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>person 实例中没有 a 这个属性，从 person 对象中找不到 a 属性就会从 person 的原型也就是 <code>person.__proto__</code> ，也就是 Person.prototype 中查找，很幸运地得到 a 的值为 123。那假如 <code>person.__proto__</code>中也没有该属性，又该如何查找？</p>
<p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层 Object 为止。<strong>Object 是 JS 中所有对象数据类型的基类(最顶层的类)在 Object.prototype 上没有</strong>proto<strong>这个属性。</strong></p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>) <span class="regexp">//</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="http://upload-images.jianshu.io/upload_images/3174701-18a76d28c0a9ea1b?imageMogr2/auto-orient/strip%7CimageView2/2/w/521/format/webp" alt="img"></p>
<h2 id="四、原型链继承"><a href="#四、原型链继承" class="headerlink" title="四、原型链继承"></a>四、原型链继承</h2><h3 id="1、原型链继承"><a href="#1、原型链继承" class="headerlink" title="1、原型链继承"></a>1、原型链继承</h3><p>子类的原型是父类原型的一个实例对象。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="constructor">Person(<span class="params">name</span>, <span class="params">age</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="constructor">Student(<span class="params">name</span>, <span class="params">age</span>, <span class="params">sex</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Student</span>.</span></span>prototype = <span class="keyword">new</span> <span class="constructor">Person()</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2、借用构造函数"><a href="#2、借用构造函数" class="headerlink" title="2、借用构造函数"></a>2、借用构造函数</h3><p>在子类的构造函数中使用 call()调用父类的构造函数。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="constructor">Person(<span class="params">name</span>, <span class="params">age</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="constructor">Student(<span class="params">name</span>, <span class="params">age</span>, <span class="params">sex</span>)</span>&#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>call(this, name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3、原型链继承-借用构造函数-组合继承"><a href="#3、原型链继承-借用构造函数-组合继承" class="headerlink" title="3、原型链继承+借用构造函数=组合继承"></a>3、原型链继承+借用构造函数=组合继承</h3><p>通过在子类的构造函数中调用父类型的构造函数，保留传参的优点，此外通过将父类的实例对象作为子类的原型，满足函数复用。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="constructor">Person(<span class="params">name</span>, <span class="params">age</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="constructor">Student(<span class="params">name</span>, <span class="params">age</span>, <span class="params">sex</span>)</span>&#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>call(this, name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Student</span>.</span></span>prototype = <span class="keyword">new</span> <span class="constructor">Person()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Student</span>.</span></span>prototype.constructor = <span class="constructor">Student()</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4、组合继承优化-1"><a href="#4、组合继承优化-1" class="headerlink" title="4、组合继承优化 1"></a>4、组合继承优化 1</h3><p>子类的构造函数中调用父类的构造函数，子类的原型和父类的原型指向同一对象。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="constructor">Person(<span class="params">name</span>, <span class="params">age</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="constructor">Student(<span class="params">name</span>, <span class="params">age</span>, <span class="params">sex</span>)</span>&#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>call(this, name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Student</span>.</span></span>prototype = <span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype;</span><br></pre></td></tr></table></figure>

<h3 id="5、组合继承优化-2"><a href="#5、组合继承优化-2" class="headerlink" title="5、组合继承优化 2"></a>5、组合继承优化 2</h3><p>子类的构造函数中调用父类的构造函数，使用 var B = Object.create(A)，以 A 为对象为原型生成 B。这样 B 就继承了 A 的所有属性和方法。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="constructor">Person(<span class="params">name</span>, <span class="params">age</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="constructor">Student(<span class="params">name</span>, <span class="params">age</span>, <span class="params">sex</span>)</span>&#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>call(this, name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Student</span>.</span></span>prototype = <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>create(<span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span>prototype);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Student</span>.</span></span>prototype.constructor = Student;</span><br></pre></td></tr></table></figure>

<h3 id="6：ES6-中-class-继承"><a href="#6：ES6-中-class-继承" class="headerlink" title="6：ES6 中 class 继承"></a>6：ES6 中 class 继承</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    constructor(name, age)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    constructor(name, age, sex)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://juejin.im/post/5bb091a7e51d450e8477d9ba">JavaScript 常见的六种继承方式</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS：字符串方法</title>
    <url>/2020/11/11/JS%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">let str</span> = <span class="string">&#x27;My name is Lily&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="一、提取字符串方法"><a href="#一、提取字符串方法" class="headerlink" title="一、提取字符串方法"></a>一、提取字符串方法</h3><h4 id="1-charAt"><a href="#1-charAt" class="headerlink" title="1. charAt()"></a>1. charAt()</h4><p><code>charAt</code> 获取字符串的某个字符。</p>
<a id="more"></a>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">str.charAt(<span class="number">3</span>)  <span class="regexp">//</span> <span class="string">&quot;n&quot;</span></span><br></pre></td></tr></table></figure>

<p>还有一种方式是把字符串当成一个类似数组的对象，对其中的每个字符进行索引。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">str[<span class="number">3</span>]  <span class="regexp">//</span> <span class="string">&quot;n&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-charCodeAt"><a href="#2-charCodeAt" class="headerlink" title="2. charCodeAt()"></a>2. charCodeAt()</h4><p><code>charCodeAt()</code>方法返回0到65535之间的整数，表示给定索引处的UTF-16代码单元。</p>
<p><strong>返回值：</strong> 指定index处字符的UTF-16代码单元值的一个数字；如果index超出范围，<code>charCodeAt()</code>返回NaN。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">str.<span class="built_in">char</span><span class="constructor">CodeAt(3)</span>  <span class="comment">// 110</span></span><br></pre></td></tr></table></figure>
<h3 id="二、提取部分字符串"><a href="#二、提取部分字符串" class="headerlink" title="二、提取部分字符串"></a>二、提取部分字符串</h3><h4 id="3-slice"><a href="#3-slice" class="headerlink" title="3. slice"></a>3. slice</h4><p><code>slice()</code>提取字符串的某个部分并在新字符串中返回被提取的部分</p>
<p>该方法设置两个参数：起始索引和终止索引</p>
<p>如果某个参数为负数，则从字符串的结尾开始计数</p>
<p>如果省略第二个参数，则裁剪字符串的剩余部分</p>
<h4 id="4-subString"><a href="#4-subString" class="headerlink" title="4. subString"></a>4. subString</h4><p><code>subString()</code>类似于<code>slice()</code></p>
<p>不同之处在于<code>subString()</code>不支持参数为负数</p>
<h4 id="5-subStr"><a href="#5-subStr" class="headerlink" title="5. subStr"></a>5. subStr</h4><p><code>subStr()</code>类似于<code>slice()</code></p>
<p>不同之处在于<code>subStr</code>第二个参数规定被提取部分的长度</p>
<p>如果第一个参数为负数，则从字符串的末尾开始计算</p>
<h3 id="三、替换字符串内容"><a href="#三、替换字符串内容" class="headerlink" title="三、替换字符串内容"></a>三、替换字符串内容</h3><h4 id="6-replace"><a href="#6-replace" class="headerlink" title="6. replace"></a>6. replace</h4><p><code>replace()</code>方法用一个值替换在字符串中指定的值</p>
<p><code>replace()</code>方法不会改变调用它的字符串，返回一个新字符串</p>
<p><code>replace()</code>默认只替换首个匹配</p>
<p><code>replace()</code>对大小写敏感</p>
<p>如需执行大小写不敏感的替换，则使用正则表达式<code>/i</code></p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">str = <span class="string">&quot;Please visit Microsoft!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.replace(<span class="regexp">/MICROSOFT/i</span>, <span class="string">&quot;W3School&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如需替换所有匹配，则使用正则表达式的<code>g</code></p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">str = <span class="string">&quot;Please visit Microsoft and Microsoft!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.replace(<span class="regexp">/Microsoft/g</span>, <span class="string">&quot;W3School&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="四、转换为大写和小写"><a href="#四、转换为大写和小写" class="headerlink" title="四、转换为大写和小写"></a>四、转换为大写和小写</h3><h4 id="7-toUpperCase"><a href="#7-toUpperCase" class="headerlink" title="7. toUpperCase"></a>7. toUpperCase</h4><p><code>toUpperCase()</code>把字符串转换为大写</p>
<h4 id="8-toLowerCase"><a href="#8-toLowerCase" class="headerlink" title="8. toLowerCase"></a>8. toLowerCase</h4><p><code>toLowerCase()</code>把字符串转换为小写</p>
<h3 id="五、字符串转数组"><a href="#五、字符串转数组" class="headerlink" title="五、字符串转数组"></a>五、字符串转数组</h3><h4 id="9-split"><a href="#9-split" class="headerlink" title="9.split"></a>9.split</h4><h3 id="六、查找字符串中的字符串"><a href="#六、查找字符串中的字符串" class="headerlink" title="六、查找字符串中的字符串"></a>六、查找字符串中的字符串</h3><h4 id="10-indexOf"><a href="#10-indexOf" class="headerlink" title="10. indexOf()"></a>10. indexOf()</h4><p><code>indexOf()</code> 方法返回调用它的String对象中第一次出现的指定值的索引，从fromIndex开始查找，如果没有找到该值，返回-1。</p>
<p><strong>参数：</strong></p>
<ul>
<li>searchValue：要被查找的字符串值，如果<code>searchValue</code>是空字符串，则返回<code>fromIndex</code></li>
<li>fromIndex：要开始查找的位置（数字），默认值是0</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">str.indexOf(<span class="string">&#x27;a&#x27;</span>)  <span class="regexp">//</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h4 id="11-lastIndexOf"><a href="#11-lastIndexOf" class="headerlink" title="11. lastIndexOf()"></a>11. lastIndexOf()</h4><p><code>lastIndexOf()</code>方法返回调用它的String对象中的指定值最后一次出校的索引，在一个字符串中的指定位置处从后向前搜索，如果没有找到则返回-1。</p>
<p><strong>参数：</strong></p>
<ul>
<li>searchValue：要被查找的字符串值，如果<code>searchValue</code>是空字符串，则返回<code>fromIndex</code></li>
<li>fromIndex：要开始查找的位置（数字），默认值是<code>+Infinity</code>，如果<code>fromIndex &gt;= str.length</code>，则会搜索整个字符串；如果<code>fromIndex &lt; 0</code>，则等同于<code>fromIndex == 0</code></li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">str.lastIndexOf(<span class="string">&#x27;a&#x27;</span>)  <span class="regexp">//</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h4 id="12-search"><a href="#12-search" class="headerlink" title="12. search"></a>12. search</h4><p><code>search()</code>方法搜索特定值的字符串，并返回匹配的位置</p>
<p>⚠️ 注意：indexOf()和search()方法的区别在于</p>
<ul>
<li>search()方法无法设置第二个参数</li>
<li>indexOf()方法无法设置更强大的搜索值（正则表达式）</li>
</ul>
<h3 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h3><h4 id="13-includes"><a href="#13-includes" class="headerlink" title="13. includes()"></a>13. includes()</h4><p><code>includes()</code> 方法用于判断一个字符串是否包含在另一个字符串中，根绝结果返回true或false。</p>
<p><strong>返回值：</strong> true或false</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">str.includes(<span class="string">&#x27;abc&#x27;</span>)  <span class="regexp">//</span> false</span><br></pre></td></tr></table></figure>
<h4 id="14-concat"><a href="#14-concat" class="headerlink" title="14. concat()"></a>14. concat()</h4><p><code>concat()</code>方法将一个或多个字符串与原字符串链接合并，形成一个新的字符串并返回。</p>
<p><strong>返回值：</strong> 一个新的字符串</p>
<p><strong>不会改变原字符串</strong></p>
<p><strong>性能：</strong> 强烈建议使用赋值操作符（+， +=）代替concat方法。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">str.concat(<span class="string">&#x27;, too&#x27;</span>)  <span class="regexp">//</span> <span class="string">&quot;My name is Lily, too&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.concat(&#123;&#125;)        <span class="regexp">//</span> <span class="string">&quot;[object Object]&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.concat([])        <span class="regexp">//</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.concat(null)      <span class="regexp">//</span> <span class="string">&quot;null&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.concat(<span class="number">4</span>, <span class="number">5</span>)      <span class="regexp">//</span> <span class="string">&quot;45&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="15-String-fromCharCode"><a href="#15-String-fromCharCode" class="headerlink" title="15. String.fromCharCode()"></a>15. String.fromCharCode()</h4><p><code>String.fromCharCode()</code>方法返回由指定的UTF-16代码单元序列创建的字符串。</p>
<p><strong>返回值：</strong> 一个长度为N的字符串，由N个指定的UTF-16代码单元组成。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">String.fromCharCode(<span class="number">189</span>, <span class="number">43</span>, <span class="number">190</span>, <span class="number">61</span>)  <span class="comment">// &quot;½+¾=&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="16-String-fromCodePoint"><a href="#16-String-fromCodePoint" class="headerlink" title="16. String.fromCodePoint()"></a>16. String.fromCodePoint()</h4><p><code>String.fromCodePoint()</code>静态方法返回使用指定的代码点序列创建的字符串。</p>
<p><strong>返回值：</strong> 使用指定的Unicode 编码位置创建的字符串。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">String.fromCodePoint(<span class="number">189</span>, <span class="number">43</span>, <span class="number">190</span>, <span class="number">61</span>)  <span class="comment">// &quot;½+¾=&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="17-codePointAt"><a href="#17-codePointAt" class="headerlink" title="17. codePointAt()"></a>17. codePointAt()</h4><p><code>codePointAt()</code>方法返回一个Unicode编码点值的非负整数。</p>
<p><strong>返回值：</strong> 在字符串中的给定索引的编码单元体现的数字，如果在索引处没有找到该元素则返回<code>undefined</code>。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">str.codePointAt(<span class="number">3</span>)  <span class="comment">// 110</span></span><br></pre></td></tr></table></figure>

<h4 id="18-endsWith"><a href="#18-endsWith" class="headerlink" title="18. endsWith()"></a>18. endsWith()</h4><p><code>endsWith()</code>方法用来判断当前字符串是否是以另外一个给定的子字符串结尾的，根据结果返回true或false。</p>
<p><strong>参数：</strong></p>
<ul>
<li>第一个参数：当前字符串</li>
<li>第二个参数：字符串的长度，默认是当前字符串的长度</li>
</ul>
<p><strong>返回值：</strong> true或false</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">str.endsWith(<span class="string">&#x27;ly&#x27;</span>)  <span class="regexp">//</span> true</span><br></pre></td></tr></table></figure>


<h4 id="19-localeCompare"><a href="#19-localeCompare" class="headerlink" title="19. localeCompare()"></a>19. localeCompare()</h4><p><code>localeCompare()</code>方法返回一个数字来指示一个参考字符串是否在排序顺序前面或之后与给定字符串相同。</p>
<p><strong>返回值：</strong> 如果引用字符存在于比较字符之前为<code>负数</code>；如果引用字符存在于比较字符之后则为<code>正数</code>；相等的时候返回0。</p>
<h4 id="20-match"><a href="#20-match" class="headerlink" title="20. match()"></a>20. match()</h4><p><code>match()</code>方法检索返回一个字符串匹配的正则表达式的结果。</p>
<p><strong>参数：</strong> 一个正则表达式对象，如果传入一个非正则表达式对象，则会隐式地使用<code>new RegExp(obj)</code>将其转换成一个<code>RegExp</code>；如果没有给出任何参数直接使用match()方法，则会得到一个包含空字符串的Array: [“”]。</p>
<p><strong>返回值：</strong> </p>
<ul>
<li>如果使用g标识，则将返回与完整正则表达式匹配的所有结果，但不会返回捕获组。</li>
<li>如果未使用g标志，则返回第一个完整匹配及其相关的捕获组（Array）。</li>
</ul>
<h4 id="21-matchAll"><a href="#21-matchAll" class="headerlink" title="21. matchAll()"></a>21. matchAll()</h4><p><code> matchAll()</code>方法返回一个包含所有匹配正则表达式的结果及分组捕获数组的迭代器。</p>
<p><strong>参数：</strong> 正则表达式对象，注意：正则表达式必须是设置了全局模式的g的形式，否则会抛出异常。</p>
<p><strong>返回值：</strong> 一个迭代器。</p>
<h4 id="22-normalize"><a href="#22-normalize" class="headerlink" title="22. normalize()"></a>22. normalize()</h4><p><code>normalize()</code>会按照指定的一种Unicode正规形式将当前字符串正规化。（如果该值不是字符串，则首先将其转换为一个字符串）</p>
<h4 id="23-length"><a href="#23-length" class="headerlink" title="23. length"></a>23. length</h4><p><code>length</code>属性返回字符串的长度</p>
<h4 id="24-trim"><a href="#24-trim" class="headerlink" title="24. trim"></a>24. trim</h4><p><code>trim()</code>删除字符串两端的空白符</p>
<h4 id="25-属性访问"><a href="#25-属性访问" class="headerlink" title="25. 属性访问"></a>25. 属性访问</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">str</span> = <span class="symbol">&#x27;school</span>&#x27;;</span><br><span class="line"><span class="built_in">str</span>[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS：数组去重</title>
    <url>/2019/10/16/JS%EF%BC%9A%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h3 id="1、ES6-中-Set-去重"><a href="#1、ES6-中-Set-去重" class="headerlink" title="1、ES6 中 Set 去重"></a>1、ES6 中 Set 去重</h3><p>set 中成员的值都是唯一的，没有重复的值，set 内部会判断两个值是否不同</p>
<a id="more"></a>

<p><code>Array.from(new Set(arr))</code></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">Array.<span class="keyword">from</span>(new Set(arr))  =&gt;  [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<h3 id="2、利用-for-嵌套-for，然后用-splice-去重"><a href="#2、利用-for-嵌套-for，然后用-splice-去重" class="headerlink" title="2、利用 for 嵌套 for，然后用 splice 去重"></a>2、利用 for 嵌套 for，然后用 splice 去重</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">(arr)</span>&#123;</span></span><br><span class="line">  <span class="keyword">for</span>(let <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; arr.<span class="built_in">length</span>; <span class="built_in">i</span>++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(let <span class="built_in">j</span> = <span class="built_in">i</span> + <span class="number">1</span>; <span class="built_in">j</span> &lt; arr.<span class="built_in">length</span>; <span class="built_in">j</span>++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[<span class="built_in">i</span>] == arr[<span class="built_in">j</span>])&#123;</span><br><span class="line">        arr.splice(<span class="built_in">j</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">j</span>--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;  =&gt;  [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、利用-indexOf-去重"><a href="#3、利用-indexOf-去重" class="headerlink" title="3、利用 indexOf 去重"></a>3、利用 indexOf 去重</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">function fun(arr)&#123;</span><br><span class="line"> let array = []</span><br><span class="line">  for(let i = <span class="number">0</span>; i &lt;arr.length; i++)&#123;</span><br><span class="line">    if(array.indexOf(arr[i]) == <span class="number">-1</span>)&#123;</span><br><span class="line">    	array.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return array;  =&gt; [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、sort"><a href="#4、sort" class="headerlink" title="4、sort()"></a>4、sort()</h3><p>利用 sort()排序方法，然后根据排序后的结果进行 遍历及相邻元素比对</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">function fun(arr)&#123;</span><br><span class="line"> arr = arr.sort();</span><br><span class="line"> let array = [arr[<span class="number">0</span>]];</span><br><span class="line"> for(let i = <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">   if(arr[i] != arr[i<span class="number">-1</span>])&#123;</span><br><span class="line">     array.push(arr[i])</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return array;  =&gt;  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、includes"><a href="#5、includes" class="headerlink" title="5、includes"></a>5、includes</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">function fun(arr)&#123;</span><br><span class="line">  let array = [];</span><br><span class="line">  for(let i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">     if(!array.includes(arr[i]))&#123;</span><br><span class="line">       array.push(arr[i])</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return array;  =&gt;  [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、hasOwnProperty"><a href="#6、hasOwnProperty" class="headerlink" title="6、hasOwnProperty"></a>6、hasOwnProperty</h3><p>利用 hasOwnProperty 判断是否存在对象属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">item, index, arr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.hasOwnProperty(<span class="keyword">typeof</span> item + item) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>)</span><br><span class="line">  &#125;)  =&gt;  [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、filter"><a href="#7、filter" class="headerlink" title="7、filter"></a>7、filter</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">function fun(arr)&#123;</span><br><span class="line">  return arr.filter((item, index, arr)=&gt;&#123;</span><br><span class="line">    return arr.indexOf(item, <span class="number">0</span>) === index</span><br><span class="line">  &#125;)  =&gt;  [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、Map"><a href="#8、Map" class="headerlink" title="8、Map"></a>8、Map</h3><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> arr = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">function fun(arr)&#123;</span><br><span class="line">  <span class="built_in">let</span> <span class="built_in">map</span> = <span class="built_in">new</span> Map();</span><br><span class="line">  <span class="built_in">let</span> <span class="built_in">array</span> = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">let</span> i of arr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">map</span>[i])&#123;</span><br><span class="line">      <span class="built_in">map</span>[i] = i;</span><br><span class="line">      <span class="built_in">array</span>.<span class="built_in">push</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> <span class="built_in">array</span>;  =&gt;  [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9、-…new-Set-arr"><a href="#9、-…new-Set-arr" class="headerlink" title="9、[…new Set(arr)]"></a>9、[…new Set(arr)]</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr = [...new Set(arr)]  =&gt;  [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS：数组方法</title>
    <url>/2019/10/14/JS%EF%BC%9A%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>🌿</td>
<td>常用，需熟练掌握</td>
</tr>
</tbody></table>
<meta name="referrer" content="no-referrer"/>

<h2 id="一、改变原数组"><a href="#一、改变原数组" class="headerlink" title="一、改变原数组"></a>一、改变原数组</h2><h3 id="1、push（添加元素）"><a href="#1、push（添加元素）" class="headerlink" title="1、push（添加元素）"></a>1、push（添加元素）</h3><a id="more"></a>

<p>向数组后面添加元素，返回新数组长度</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">let<span class="built_in"> array </span>= [1,2,3,4,5]</span><br><span class="line">array.push(6)   =&gt;  6</span><br><span class="line">array           =&gt;  [1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure>

<h3 id="2、pop（删除元素）"><a href="#2、pop（删除元素）" class="headerlink" title="2、pop（删除元素）"></a>2、pop（删除元素）</h3><p>从后面删除数组元素，只能删除一个，返回被删除的元素</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">let<span class="built_in"> array </span>= [1,2,3,4,5]</span><br><span class="line">array.pop()  =&gt;  5</span><br><span class="line">array        =&gt;  [1, 2, 3, 4]</span><br></pre></td></tr></table></figure>

<h3 id="3、shift（删除元素）"><a href="#3、shift（删除元素）" class="headerlink" title="3、shift（删除元素）"></a>3、shift（删除元素）</h3><p>从前面删除数组元素，只能删除一个，返回被删除的元素</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">let<span class="built_in"> array </span>= [1,2,3,4,5]</span><br><span class="line">array.shift()  =&gt;  1</span><br><span class="line">array          =&gt;  [2, 3, 4, 5]</span><br></pre></td></tr></table></figure>

<h3 id="4、unshift（添加元素）"><a href="#4、unshift（添加元素）" class="headerlink" title="4、unshift（添加元素）"></a>4、unshift（添加元素）</h3><p>从前面添加数组元素，返回添加后的数组的长度</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">let<span class="built_in"> array </span>= [1,2,3,4,5]</span><br><span class="line">array.unshift(6)  =&gt;  6</span><br><span class="line">array             =&gt;  [6, 1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>

<h3 id="5、splice（添加、删除、替换元素）"><a href="#5、splice（添加、删除、替换元素）" class="headerlink" title="5、splice（添加、删除、替换元素）"></a>5、splice（添加、删除、替换元素）</h3><h4 id="（1）添加元素"><a href="#（1）添加元素" class="headerlink" title="（1）添加元素"></a>（1）添加元素</h4><p>返回空数组</p>
<p><code>array.splice(index,0,item...)</code></p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">let<span class="built_in"> array </span>= [1,2,3,4,5]</span><br><span class="line">array.splice(2,0,6)  =&gt;  []</span><br><span class="line">array                =&gt;  [1, 2, 6, 3, 4, 5]</span><br></pre></td></tr></table></figure>

<h4 id="（2）删除元素"><a href="#（2）删除元素" class="headerlink" title="（2）删除元素"></a>（2）删除元素</h4><p>返回被删除的元素</p>
<p><code>array.splice(index,howMany)</code></p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">let<span class="built_in"> array </span>= [1,2,3,4,5]</span><br><span class="line">array.splice(1,2)  =&gt;  [2, 3]</span><br><span class="line">array              =&gt;  [1, 4, 5]</span><br></pre></td></tr></table></figure>

<h4 id="（3）替换数组"><a href="#（3）替换数组" class="headerlink" title="（3）替换数组"></a>（3）替换数组</h4><p>返回要被替换的元素</p>
<p><code>array.splice(index,homMany,item...)</code></p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">let<span class="built_in"> array </span>= [1,2,3,4,5]</span><br><span class="line">array.splice(2,1,6)  =&gt;  [3]</span><br><span class="line">array                =&gt;  [1, 2, 6, 4, 5]</span><br></pre></td></tr></table></figure>

<h3 id="6、sort"><a href="#6、sort" class="headerlink" title="6、sort"></a>6、sort</h3><p>对数组进行排序，返回排好序的数组</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">let nums = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line">nums.sort()  =&gt;  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">nums         =&gt;  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<h3 id="7、reverse"><a href="#7、reverse" class="headerlink" title="7、reverse"></a>7、reverse</h3><p>将数组反转，返回反转后的数组</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">let nums = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>.reverse()  =&gt;  [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="built_in">array</span>            =&gt;  [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h3 id="8、copyWithin（替换元素）"><a href="#8、copyWithin（替换元素）" class="headerlink" title="8、copyWithin（替换元素）"></a>8、copyWithin（替换元素）</h3><p>替换数组中的元素，返回替换后的数组</p>
<p><code>array.copyWithin(复制到指定目标索引，元素复制的起始位置，停止复印的索引位置)</code></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">let <span class="built_in">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>.copyWithin(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>)  =&gt;  [<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>                    =&gt;  [<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h3 id="9、fill（替换元素）"><a href="#9、fill（替换元素）" class="headerlink" title="9、fill（替换元素）"></a>9、fill（替换元素）</h3><p>用一个固定值填充一个数组中从索引到终止索引（不包括）内的全部元素，返回替换后的数组</p>
<p><code>array.fill(value[,start,[,end]])</code></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>.fill(<span class="number">6</span>,<span class="number">1</span>,<span class="number">3</span>)  =&gt;  [<span class="number">1</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>              =&gt;  [<span class="number">1</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h2 id="二、不改变原数组"><a href="#二、不改变原数组" class="headerlink" title="二、不改变原数组"></a>二、不改变原数组</h2><h3 id="1、concat（拼接数组）"><a href="#1、concat（拼接数组）" class="headerlink" title="1、concat（拼接数组）"></a>1、concat（拼接数组）</h3><p>返回连接后的新数组</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">let <span class="built_in">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>.concat([<span class="number">1</span>,<span class="number">2</span>])  =&gt;  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="built_in">array</span>                =&gt;  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h3 id="2、split"><a href="#2、split" class="headerlink" title="2、split"></a>2、split</h3><p>将字符串转换成数组</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">let <span class="built_in">str</span> = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line"><span class="built_in">str</span>.<span class="built_in">split</span>(<span class="string">&#x27;&#x27;</span>)  =&gt;  [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="3、slice（截取一部分元素）"><a href="#3、slice（截取一部分元素）" class="headerlink" title="3、slice（截取一部分元素）"></a>3、slice（截取一部分元素）</h3><p>切去索引值 start 到索引值 end 的值，不包含 end 索引的值，返回被切掉的数组</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">let<span class="built_in"> array </span>= [1,2,3,4,5]</span><br><span class="line">array.slice(1,3)  =&gt;  [2, 3]</span><br><span class="line">array             =&gt;  [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>

<h3 id="4、includes"><a href="#4、includes" class="headerlink" title="4、includes"></a>4、includes</h3><p>判断数组中是否包含某个值，返回 true 或 false</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>.includes(<span class="number">2</span>)  =&gt;  <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="5、join"><a href="#5、join" class="headerlink" title="5、join"></a>5、join</h3><p>将数组元素拼接起来，可以指定分隔符</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>.join(<span class="string">&#x27;&#x27;</span>)  =&gt;  <span class="string">&quot;12345&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="6、toString"><a href="#6、toString" class="headerlink" title="6、toString"></a>6、toString</h3><p>将数组转换成字符串</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;a:<span class="number">4</span>&#125;]</span><br><span class="line"><span class="built_in">array</span>.toString()  =&gt;  <span class="string">&quot;1,2,3,[object Object]&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="7、indexOf"><a href="#7、indexOf" class="headerlink" title="7、indexOf"></a>7、indexOf</h3><p>从前往后查找元素索引</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>.indexOf(<span class="number">2</span>)  =&gt;  <span class="number">1</span></span><br><span class="line"><span class="built_in">array</span>.indexOf(<span class="number">6</span>)  =&gt;  <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<h3 id="8、lastIndexOf"><a href="#8、lastIndexOf" class="headerlink" title="8、lastIndexOf"></a>8、lastIndexOf</h3><p>从后往前查找元素索引</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>.lastIndexOf(<span class="number">2</span>)  =&gt;  <span class="number">1</span></span><br><span class="line"><span class="built_in">array</span>.lastIndexOf(<span class="number">6</span>)  =&gt;  <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<h2 id="三、遍历数组"><a href="#三、遍历数组" class="headerlink" title="三、遍历数组"></a>三、遍历数组</h2><h3 id="1、forEach"><a href="#1、forEach" class="headerlink" title="1、forEach"></a>1、forEach</h3><p>遍历数组，无 return</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">let<span class="built_in"> array </span>= [1,2,3,4,5]</span><br><span class="line">array.forEach(item=&gt;&#123;</span><br><span class="line">	item = item * 2</span><br><span class="line">&#125;)</span><br><span class="line">array  =&gt;  [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>

<h3 id="2、map-🌿"><a href="#2、map-🌿" class="headerlink" title="2、map 🌿"></a>2、map 🌿</h3><p>遍历数组，对数组中元素进行修改，返回修改后的数组</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">let<span class="built_in"> array </span>= [1,2,3,4,5]</span><br><span class="line">array.map(item=&gt;item*=2)  =&gt;  [2, 4, 6, 8, 10]</span><br><span class="line">array                     =&gt;  [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>

<h3 id="3、filter-🌿"><a href="#3、filter-🌿" class="headerlink" title="3、filter 🌿"></a>3、filter 🌿</h3><p>可以筛选数组中满足条件的元素</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>.filter(item=&gt;item&gt;<span class="number">4</span>)  =&gt;  [<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>  =&gt;  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h3 id="4、reduce-🌿"><a href="#4、reduce-🌿" class="headerlink" title="4、reduce 🌿"></a>4、reduce 🌿</h3><p>接收一个函数作为累加器，接收两个参数（回调函数，初始值），返回一个值</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>.reduce((acc,current)=&gt;acc+current,<span class="number">0</span>)  =&gt;  <span class="number">15</span></span><br><span class="line"><span class="built_in">array</span>  =&gt;  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h3 id="5、some-🌿"><a href="#5、some-🌿" class="headerlink" title="5、some 🌿"></a>5、some 🌿</h3><p>用于检测数组中的元素是否满足指定条件（函数提供），返回<code>true</code>或<code>false</code></p>
<p>语法：</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>.some(<span class="function"><span class="keyword">function</span><span class="params">(currentValue,<span class="keyword">index</span>,arr)</span>,<span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure>
<p>例子🌰</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>.some((acc)=&gt;acc &gt; <span class="number">3</span>)  =&gt; <span class="literal">true</span></span><br><span class="line"><span class="built_in">array</span>  =&gt;  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h3 id="6、every-🌿"><a href="#6、every-🌿" class="headerlink" title="6、every 🌿"></a>6、every 🌿</h3><p>用于检测数组中的元素是否<strong>都</strong>满足指定条件（函数提供），返回<code>true</code>或<code>false</code></p>
<p>语法：</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>.every(<span class="function"><span class="keyword">function</span><span class="params">(currentValue,<span class="keyword">index</span>,arr)</span>,<span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure>
<p>例子🌰</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>.every((acc)=&gt;acc &gt; <span class="number">3</span>)  =&gt; <span class="literal">false</span></span><br><span class="line"><span class="built_in">array</span>  =&gt;  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h3 id="7、find-🌿"><a href="#7、find-🌿" class="headerlink" title="7、find 🌿"></a>7、find 🌿</h3><p>返回通过测试的数组的第一个元素</p>
<p>语法：</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">array</span>.find(<span class="function"><span class="keyword">function</span><span class="params">(currentValue,<span class="keyword">index</span>,arr)</span>,<span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure>
<p>例子🌰</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>.find((acc)=&gt;acc &gt; <span class="number">3</span>)  =&gt; <span class="number">4</span></span><br><span class="line"><span class="built_in">array</span>  =&gt;  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>​</p>
<h3 id="8、findIndex-🌿"><a href="#8、findIndex-🌿" class="headerlink" title="8、findIndex 🌿"></a>8、findIndex 🌿</h3><p>返回通过测试的数组的第一个元素的索引</p>
<p>语法：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span>.find<span class="constructor">Index(<span class="params">function</span>(<span class="params">currentValue</span>,<span class="params">index</span>,<span class="params">arr</span>)</span>,thisValue)</span><br></pre></td></tr></table></figure>
<p>例子🌰</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">array</span>.findIndex((acc)=&gt;acc &gt; <span class="number">3</span>)  =&gt; <span class="number">3</span></span><br><span class="line"><span class="built_in">array</span>  =&gt;  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>​<br>​</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS：赋值、深拷贝和浅拷贝</title>
    <url>/2020/02/24/JS%EF%BC%9A%E8%B5%8B%E5%80%BC%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、浅拷贝和深拷贝"><a href="#一、浅拷贝和深拷贝" class="headerlink" title="一、浅拷贝和深拷贝"></a>一、浅拷贝和深拷贝</h2><p>浅拷贝和深拷贝只针对 object 和 array 这种引用数据类型。</p>
<a id="more"></a>

<p><strong>浅拷贝：</strong> 只复制某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。</p>
<p><strong>深拷贝：</strong> 会创造一个一模一样的新对象，新对象和原对象不共享内存，修改新对象不会改到原对象。</p>
<h2 id="二、赋值和浅拷贝"><a href="#二、赋值和浅拷贝" class="headerlink" title="二、赋值和浅拷贝"></a>二、赋值和浅拷贝</h2><p><strong>赋值：</strong> 当把某个对象赋值给一个新的变量时，赋的是该对象在栈中的地址，而不是堆中的数据。</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> a =&#123;</span><br><span class="line">  <span class="built_in">na</span><span class="symbol">me:</span> <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  scor<span class="symbol">es:</span> [<span class="number">100</span>, <span class="number">99</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">var</span> b = a;</span><br></pre></td></tr></table></figure>

<p>其实是将对象 a 在栈中的指针 a 赋值给了对象 b,指针 a 和指针 b 指向的是同一个堆中的数据，那么其中一个数据改变时，另外一个也会改变。</p>
<p><strong>浅拷贝：</strong> 浅拷贝会创建一个新的对象，但它是按位拷贝对象，即如果原对象的属性是基本类型，则拷贝的是基本数据类型的值；如果原对象的属性是引用数据类型，则拷贝的是引用类型的指针。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/12/23/167da74d45d3103b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<h2 id="三、浅拷贝的实现方式"><a href="#三、浅拷贝的实现方式" class="headerlink" title="三、浅拷贝的实现方式"></a>三、浅拷贝的实现方式</h2><h3 id="1、Object-assign"><a href="#1、Object-assign" class="headerlink" title="1、Object.assign()"></a>1、Object.assign()</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">var</span> obj = &#123;</span><br><span class="line">  <span class="selector-tag">a</span>: &#123;</span><br><span class="line">    <span class="selector-tag">a</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    <span class="selector-tag">b</span>: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> copyObj = Object.assign(&#123;&#125;, obj)</span><br></pre></td></tr></table></figure>

<h3 id="2、Array-prototype-concat"><a href="#2、Array-prototype-concat" class="headerlink" title="2、Array.prototype.concat()"></a>2、Array.prototype.concat()</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">var</span> <span class="string">obj = &#123;</span></span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;zhangsan&#x27;,</span></span><br><span class="line">    <span class="attr">b</span>: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">var</span> <span class="string">copyObj = obj.concat();</span></span><br></pre></td></tr></table></figure>

<h3 id="3、Array-prototype-slice"><a href="#3、Array-prototype-slice" class="headerlink" title="3、Array.prototype.slice()"></a>3、Array.prototype.slice()</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">var</span> <span class="string">obj = &#123;</span></span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;zhangsan&#x27;,</span></span><br><span class="line">    <span class="attr">b</span>: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">var</span> <span class="string">copyObj = obj.slice();</span></span><br></pre></td></tr></table></figure>

<h2 id="四、深拷贝的实现方式"><a href="#四、深拷贝的实现方式" class="headerlink" title="四、深拷贝的实现方式"></a>四、深拷贝的实现方式</h2><h3 id="1、JSON-parse-JSON-stringify"><a href="#1、JSON-parse-JSON-stringify" class="headerlink" title="1、JSON.parse(JSON.stringify())"></a>1、JSON.parse(JSON.stringify())</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    a: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    b: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copyObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br></pre></td></tr></table></figure>

<h3 id="2、手写递归方法"><a href="#2、手写递归方法" class="headerlink" title="2、手写递归方法"></a>2、手写递归方法</h3><p>遍历对象、数组直到里面都是基本数据类型，然后再去复制。</p>
<h3 id="3、函数库-lodash"><a href="#3、函数库-lodash" class="headerlink" title="3、函数库 lodash"></a>3、函数库 lodash</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    a: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    b: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> copyObj = _.cloneDeep(obj);</span><br></pre></td></tr></table></figure>

<p><a href="https://juejin.im/post/5b5dcf8351882519790c9a2e">浅拷贝与深拷贝</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS:隐藏页面元素</title>
    <url>/2019/10/16/JS%EF%BC%9A%E9%9A%90%E8%97%8F%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>参见<a href="https://75.team/post/five-ways-to-hide-elements-in-css.html">css 隐藏页面元素</a></p>
<h2 id="一、Opacity"><a href="#一、Opacity" class="headerlink" title="一、Opacity"></a>一、Opacity</h2><p>opacity 属性的意思是设置一个元素的透明度，它只是从视觉上隐藏了这个元素</p>
<a id="more"></a>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Node：学习Express.js</title>
    <url>/2020/03/26/Node%EF%BC%9A%E5%AD%A6%E4%B9%A0Express.js/</url>
    <content><![CDATA[<h2 id="一、优缺点"><a href="#一、优缺点" class="headerlink" title="一、优缺点"></a>一、优缺点</h2><ul>
<li><strong>优点：</strong>历史悠久，文档更完整，资料更多，深入人心；</li>
<li><strong>缺点：</strong>不能忍的 callback</li>
</ul>
<a id="more"></a>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Node：学习koa.js</title>
    <url>/2020/03/26/Node%EF%BC%9A%E5%AD%A6%E4%B9%A0koa.js/</url>
    <content><![CDATA[<h2 id="一、优缺点"><a href="#一、优缺点" class="headerlink" title="一、优缺点"></a>一、优缺点</h2><ul>
<li><strong>优点：</strong>no callback</li>
<li><strong>缺点：</strong>content/express 的中间件基本不能重用，基本要重写；依然需要更多人的支持和学习。</li>
</ul>
<a id="more"></a>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>koa</tag>
      </tags>
  </entry>
  <entry>
    <title>book: 阅读清单</title>
    <url>/2021/02/09/book%EF%BC%9A%E9%98%85%E8%AF%BB%E6%B8%85%E5%8D%95/</url>
    <content><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1294118-7d84c47d8294637c.jpg"></p>
<a id="more"></a>

<h3 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h3><ol>
<li>css世界（2月9日）</li>
<li>Javascript代码整洁之道 (3月5日)</li>
<li>十天精通CSS3（5月13日）</li>
</ol>
<!-- 2. 数据结构与算法之美（3月1日） -->]]></content>
      <categories>
        <category>阅读笔记</category>
      </categories>
  </entry>
  <entry>
    <title>css：BFC规范</title>
    <url>/2019/10/27/css%EF%BC%9ABFC%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><p>BFC（Block formatting context，块级格式化上下文），他是一个独立的渲染区域，只有 Block-level box 参与，他规定了内部的 Block-level box 如何布局，并且与这个区域外部毫不相干。通俗的讲，BFC 是一个容器，用于管理块级元素。</p>
<h3 id="二、BFC-触发方式"><a href="#二、BFC-触发方式" class="headerlink" title="二、BFC 触发方式"></a>二、BFC 触发方式</h3><ul>
<li>float 为 left|right</li>
<li>overflow 为 hidden|auto|scroll</li>
<li>display 为 table-cell|table-caption|inline-block</li>
<li>position 为 absolute|fixed</li>
</ul>
<h3 id="三、特性"><a href="#三、特性" class="headerlink" title="三、特性"></a>三、特性</h3><h4 id="1-阻止垂直外边距重叠"><a href="#1-阻止垂直外边距重叠" class="headerlink" title="1. 阻止垂直外边距重叠"></a>1. 阻止垂直外边距重叠</h4><p>（1）两个兄弟元素垂直边距重叠</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;div class=&quot;content1&quot;&gt;</span><span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;div class=&quot;content2&quot;&gt;</span><span class="params">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">.<span class="class">content1 </span>&#123;</span><br><span class="line"><span class="symbol">  width:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">  height:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">  background:</span> red;</span><br><span class="line"><span class="symbol">  margin:</span> <span class="number">10</span>px;</span><br><span class="line"><span class="symbol">  overflow:</span> hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="class">content2 </span>&#123;</span><br><span class="line"><span class="symbol">  width:</span> <span class="number">200</span>px;</span><br><span class="line"><span class="symbol">  height:</span> <span class="number">200</span>px;</span><br><span class="line"><span class="symbol">  background:</span> green;</span><br><span class="line"><span class="symbol">  margin:</span> <span class="number">20</span>px <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/chajianyuan/picture/blob/master/1721617073209_.pic.jpg?raw=true"></p>
<p><strong>解决办法：</strong> 让两个元素不处于同一个BFC</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;div class=&quot;box1&quot;&gt;</span></span><br><span class="line">  <span class="params">&lt;div class=&quot;content1&quot;&gt;</span><span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;div class=&quot;content2&quot;&gt;</span><span class="params">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">.<span class="class">box1 </span>&#123;</span><br><span class="line"><span class="symbol">  overflow:</span> hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="class">content1 </span>&#123;</span><br><span class="line"><span class="symbol">  width:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">  height:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">  background:</span> red;</span><br><span class="line"><span class="symbol">  margin:</span> <span class="number">10</span>px;</span><br><span class="line"><span class="symbol">  overflow:</span> hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="class">content2 </span>&#123;</span><br><span class="line"><span class="symbol">  width:</span> <span class="number">200</span>px;</span><br><span class="line"><span class="symbol">  height:</span> <span class="number">200</span>px;</span><br><span class="line"><span class="symbol">  background:</span> green;</span><br><span class="line"><span class="symbol">  margin:</span> <span class="number">20</span>px <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/chajianyuan/picture/blob/master/1731617073258_.pic.jpg?raw=true"></p>
<h4 id="2-父子元素垂直边距重叠"><a href="#2-父子元素垂直边距重叠" class="headerlink" title="2. 父子元素垂直边距重叠"></a>2. 父子元素垂直边距重叠</h4><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;div class=&quot;box1&quot;&gt;</span></span><br><span class="line">  <span class="params">&lt;div class=&quot;content1&quot;&gt;</span><span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">.<span class="class">box1 </span>&#123;</span><br><span class="line"><span class="symbol">  margin:</span> <span class="number">20</span>px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="class">content1 </span>&#123;</span><br><span class="line"><span class="symbol">  width:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">  height:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">  background:</span> red;</span><br><span class="line"><span class="symbol">  margin:</span> <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/chajianyuan/picture/blob/master/1701617072889_.pic.jpg?raw=true"></p>
<p><strong>解决办法：</strong> 父元素形成一个BFC</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;div class=&quot;box1&quot;&gt;</span></span><br><span class="line">  <span class="params">&lt;div class=&quot;content1&quot;&gt;</span><span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">.<span class="class">box1 </span>&#123;</span><br><span class="line"><span class="symbol">  margin:</span> <span class="number">20</span>px;</span><br><span class="line"><span class="symbol">  overflow:</span> hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="class">content1 </span>&#123;</span><br><span class="line"><span class="symbol">  width:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">  height:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">  background:</span> red;</span><br><span class="line"><span class="symbol">  margin:</span> <span class="number">10</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/chajianyuan/picture/blob/master/1711617073145_.pic.jpg?raw=true"></p>
<h4 id="2-BFC不会重叠浮动元素"><a href="#2-BFC不会重叠浮动元素" class="headerlink" title="2. BFC不会重叠浮动元素"></a>2. BFC不会重叠浮动元素</h4><p>可以创造自适应两栏布局</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;div class=&quot;box1&quot;&gt;</span></span><br><span class="line">  <span class="params">&lt;div class=&quot;content1&quot;&gt;</span></span><br><span class="line">    我是浮动元素</span><br><span class="line">  <span class="params">&lt;/div&gt;</span></span><br><span class="line">  <span class="params">&lt;div class=&quot;content2&quot;&gt;</span></span><br><span class="line">    哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈</span><br><span class="line">  <span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">.<span class="class">box1 </span>&#123;</span><br><span class="line"><span class="symbol">  margin:</span> <span class="number">20</span>px;</span><br><span class="line"><span class="symbol">  width:</span> <span class="number">350</span>px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="class">content1 </span>&#123;</span><br><span class="line"><span class="symbol">  width:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">  height:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">  background:</span> red;</span><br><span class="line"><span class="symbol">  float:</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="class">content2 </span>&#123;</span><br><span class="line"><span class="symbol">  overflow:</span> hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/chajianyuan/picture/blob/master/1751617076427_.pic.jpg?raw=true"></p>
<h4 id="3-清除浮动"><a href="#3-清除浮动" class="headerlink" title="3. 清除浮动"></a>3. 清除浮动</h4><p>将父元素创造为BFC，避免高度塌陷</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;div class=&quot;box1&quot;&gt;</span></span><br><span class="line">  <span class="params">&lt;div class=&quot;content1&quot;&gt;</span></span><br><span class="line">    我是浮动元素</span><br><span class="line">  <span class="params">&lt;/div&gt;</span></span><br><span class="line">  <span class="params">&lt;div class=&quot;content2&quot;&gt;</span></span><br><span class="line">    哈哈哈</span><br><span class="line">  <span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">.<span class="class">box1 </span>&#123;</span><br><span class="line"><span class="symbol">  margin:</span> <span class="number">20</span>px;</span><br><span class="line"><span class="symbol">  background:</span> yellow;</span><br><span class="line"><span class="symbol">  overflow:</span> hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="class">content1 </span>&#123;</span><br><span class="line"><span class="symbol">  width:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">  height:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">  background:</span> red;</span><br><span class="line"><span class="symbol">  float:</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="class">content2 </span>&#123;</span><br><span class="line"><span class="symbol">  float:</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/chajianyuan/picture/blob/master/1761617076728_.pic.jpg?raw=true"></p>
<p><a href="https://juejin.im/post/5bc33d0d6fb9a05d1658afc7">参考：深入理解 BFC</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css：css3属性</title>
    <url>/2019/10/19/css%EF%BC%9Acss3%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p><a href="https://juejin.im/post/5a0c184c51882531926e4294#heading-11">参照掘金</a></p>
<a id="more"></a>

<h2 id="1、过渡（transition）"><a href="#1、过渡（transition）" class="headerlink" title="1、过渡（transition）"></a>1、过渡（transition）</h2><p>参照<a href="https://www.runoob.com/css3/css3-transitions.html">菜鸟教程|css3 过渡</a></p>
<p>CSS 过渡是元素从一种样式逐渐改变为另一种的效果，要实现这一点，必须规定两项内容：</p>
<ul>
<li>指定要参加效果的 CSS 属性</li>
<li>指定效果的持续时间</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>transition</td>
<td>简写属性，用于在一个属性中设置四个过渡属性</td>
</tr>
<tr>
<td>transition-property</td>
<td>规定应用过渡的 CSS 属性的名称</td>
</tr>
<tr>
<td>transition-duration</td>
<td>定义过渡效果花费的时间。默认是 0</td>
</tr>
<tr>
<td>transition-timing-function</td>
<td>规定过渡效果的时间曲线。默认是“ease”</td>
</tr>
<tr>
<td>transition-delay</td>
<td>规定过渡效果何时开始。默认是 0</td>
</tr>
</tbody></table>
<figure class="highlight roboconf"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">div&#123;</span><br><span class="line">	<span class="attribute">width</span>:100px;</span><br><span class="line">	<span class="attribute">height</span>:100px;</span><br><span class="line">	<span class="attribute">background</span>:red;</span><br><span class="line">	<span class="attribute">transition-property</span>:width;</span><br><span class="line">	<span class="attribute">transition-duration</span>:1s;</span><br><span class="line">	<span class="attribute">transition-timing-function</span>:linear;</span><br><span class="line">	<span class="attribute">transition-delay</span>:2s;</span><br><span class="line">	/* <span class="attribute">Safari */</span></span><br><span class="line"><span class="attribute">	-webkit-transition-property</span>:width;</span><br><span class="line">	<span class="attribute">-webkit-transition-duration</span>:1s;</span><br><span class="line">	<span class="attribute">-webkit-transition-timing-function</span>:linear;</span><br><span class="line">	<span class="attribute">-webkit-transition-delay</span>:2s;</span><br><span class="line">&#125;</span><br><span class="line">div:hover&#123;</span><br><span class="line">	<span class="attribute">width</span>:200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、动画（animation）"><a href="#2、动画（animation）" class="headerlink" title="2、动画（animation）"></a>2、动画（animation）</h2><p>参考<a href="https://www.runoob.com/css3/css3-animations.html">菜鸟教程|css3 动画</a></p>
<h2 id="3、形状转换（transform）"><a href="#3、形状转换（transform）" class="headerlink" title="3、形状转换（transform）"></a>3、形状转换（transform）</h2><p>参照<a href="https://www.runoob.com/cssref/css3-pr-transform.html">菜鸟教程|css3 transform</a></p>
<p>transform 适用于 2D 或 3D 转换的元素</p>
<p><code>transform: none|transform-functions;</code></p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>定义不进行转换。</td>
</tr>
<tr>
<td>matrix(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td>
<td>定义 2D 转换，使用六个值的矩阵。</td>
</tr>
<tr>
<td>matrix3d(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td>
<td>定义 3D 转换，使用 16 个值的 4x4 矩阵。</td>
</tr>
<tr>
<td>translate(<em>x</em>,<em>y</em>)</td>
<td>定义 2D 转换。</td>
</tr>
<tr>
<td>translate3d(<em>x</em>,<em>y</em>,<em>z</em>)</td>
<td>定义 3D 转换。</td>
</tr>
<tr>
<td>translateX(<em>x</em>)</td>
<td>定义转换，只是用 X 轴的值。</td>
</tr>
<tr>
<td>translateY(<em>y</em>)</td>
<td>定义转换，只是用 Y 轴的值。</td>
</tr>
<tr>
<td>translateZ(<em>z</em>)</td>
<td>定义 3D 转换，只是用 Z 轴的值。</td>
</tr>
<tr>
<td>scale(<em>x</em>[,<em>y</em>]?)</td>
<td>定义 2D 缩放转换。</td>
</tr>
<tr>
<td>scale3d(<em>x</em>,<em>y</em>,<em>z</em>)</td>
<td>定义 3D 缩放转换。</td>
</tr>
<tr>
<td>scaleX(<em>x</em>)</td>
<td>通过设置 X 轴的值来定义缩放转换。</td>
</tr>
<tr>
<td>scaleY(<em>y</em>)</td>
<td>通过设置 Y 轴的值来定义缩放转换。</td>
</tr>
<tr>
<td>scaleZ(<em>z</em>)</td>
<td>通过设置 Z 轴的值来定义 3D 缩放转换。</td>
</tr>
<tr>
<td>rotate(<em>angle</em>)</td>
<td>定义 2D 旋转，在参数中规定角度。</td>
</tr>
<tr>
<td>rotate3d(<em>x</em>,<em>y</em>,<em>z</em>,<em>angle</em>)</td>
<td>定义 3D 旋转。</td>
</tr>
<tr>
<td>rotateX(<em>angle</em>)</td>
<td>定义沿着 X 轴的 3D 旋转。</td>
</tr>
<tr>
<td>rotateY(<em>angle</em>)</td>
<td>定义沿着 Y 轴的 3D 旋转。</td>
</tr>
<tr>
<td>rotateZ(<em>angle</em>)</td>
<td>定义沿着 Z 轴的 3D 旋转。</td>
</tr>
<tr>
<td>skew(<em>x-angle</em>,<em>y-angle</em>)</td>
<td>定义沿着 X 和 Y 轴的 2D 倾斜转换。</td>
</tr>
<tr>
<td>skewX(<em>angle</em>)</td>
<td>定义沿着 X 轴的 2D 倾斜转换。</td>
</tr>
<tr>
<td>skewY(<em>angle</em>)</td>
<td>定义沿着 Y 轴的 2D 倾斜转换。</td>
</tr>
<tr>
<td>perspective(<em>n</em>)</td>
<td>为 3D 转换元素定义透视视图。</td>
</tr>
</tbody></table>
<p><code>transform:rotate(30deg);</code></p>
<p><img src="https://user-gold-cdn.xitu.io/2017/11/15/15fbf4073fe59bee?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css：css动画</title>
    <url>/2019/08/22/css%EF%BC%9Acss%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h3 id="一、使用-css3-中-animation-属性（-keyframes-规则）"><a href="#一、使用-css3-中-animation-属性（-keyframes-规则）" class="headerlink" title="一、使用 css3 中 animation 属性（@keyframes 规则）"></a>一、使用 css3 中 animation 属性（@keyframes 规则）</h3><p>当在 <strong>@keyframes</strong> 创建动画，把它绑定到一个选择器，否则动画不会有任何效果。</p>
<a id="more"></a>

<p>指定至少这两个 CSS3 的动画属性绑定向一个选择器：</p>
<ul>
<li>规定动画的名称</li>
<li>规定动画的时长</li>
</ul>
<p>参见<a href="https://www.runoob.com/css3/css3-animations.html">css3 动画</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css：css小技巧</title>
    <url>/2021/04/16/css%EF%BC%9Acss%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<ol>
<li>超出x行省略</li>
</ol>
<ul>
<li>两行或多行省略<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line"><span class="comment">/*! autoprefixer: off */</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure></li>
<li>一行省略<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>
一行省略除了使用上面代码中的方法，还可以将多行省略代码中的限制行数设置为1</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css：css选择器及优先级</title>
    <url>/2019/10/19/css%EF%BC%9Acss%E9%80%89%E6%8B%A9%E5%99%A8%E5%8F%8A%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、css-特性"><a href="#一、css-特性" class="headerlink" title="一、css 特性"></a>一、css 特性</h2><ul>
<li><strong>继承</strong>：子类元素继承父类的样式</li>
<li><strong>优先级</strong>：不同类别样式的权重比较</li>
<li><strong>层叠</strong>：当数量相同时，后者覆盖前者的样式</li>
</ul>
<a id="more"></a>

<h2 id="二、css-选择符"><a href="#二、css-选择符" class="headerlink" title="二、css 选择符"></a>二、css 选择符</h2><ol>
<li>标签选择器：div、p</li>
<li>类选择器：.class</li>
<li>ID 选择器：#ID</li>
<li>全局选择器：*</li>
<li>后代选择器：div p（中间用空格隔开）（div 层下的所有 p 标签）</li>
<li>伪类选择器：a:hover </li>
<li>属性选择器：input[type=”text”]</li>
<li>子元素选择器：li:first-child、p:nth-child(1)</li>
<li>子选择器：ul &gt; li（一个标签的下一代（第一个））</li>
<li>相邻选择器：h1+p（相邻的一个兄弟选择器）</li>
</ol>
<p>伪类就是一个class类，伪元素就是一个元素，但是在不再文档树中渲染。</p>
<p><img src="http://www.alloyteam.com/2016/05/summary-of-pseudo-classes-and-pseudo-elements/" alt="参考：总结伪类和伪元素"></p>
<h2 id="三、优先级"><a href="#三、优先级" class="headerlink" title="三、优先级"></a>三、优先级</h2><h3 id="1、不同级别"><a href="#1、不同级别" class="headerlink" title="1、不同级别"></a>1、不同级别</h3><p>!important &gt; 行内样式 &gt; ID 选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通配符选择器</p>
<p><strong>注</strong>：</p>
<ul>
<li><strong>一定</strong>要优化考虑使用样式规则的优先级来解决问题而不是 <code>!important</code></li>
<li><strong>只有</strong>在需要覆盖全站或外部 CSS 的特定页面中使用 <code>!important</code></li>
<li><strong>永远不要</strong>在你的插件中使用 <code>!important</code></li>
<li><strong>永远不要</strong>在全站范围的 CSS 代码中使用 <code>!important</code></li>
</ul>
<h3 id="2、同一级别"><a href="#2、同一级别" class="headerlink" title="2、同一级别"></a>2、同一级别</h3><p>每个规则对应一个初始”四位数”：0.0.0.0</p>
<ul>
<li>若是 行内选择符，则加 1.0.0.0</li>
<li>若是 ID 选择符，则加 0.1.0.0</li>
<li>若是 类选择符/属性选择符/伪类选择符，则分别加 0.0.1.0</li>
<li>若是 元素选择符/伪元素选择符，则分别加 0.0.0.1</li>
</ul>
<p><strong>算法</strong>：将每条规则中，选择符对应的数相加后得到的”四位数“，从左到右进行比较，大的优先级越高。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css：css的引入方式</title>
    <url>/2020/03/22/css%EF%BC%9Acss%E7%9A%84%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="1、css-的引入方式有三种"><a href="#1、css-的引入方式有三种" class="headerlink" title="1、css 的引入方式有三种"></a>1、css 的引入方式有三种</h3><p>（1）行内式将样式写在元素的 style 属性里面</p>
<p>（2）内嵌式将样式写在&lt; style &gt;元素里面</p>
<p>（3）外链式指通过 link 标签引入 css 文件</p>
<a id="more"></a>

<h3 id="2、link-和-import-引入样式文件的区别"><a href="#2、link-和-import-引入样式文件的区别" class="headerlink" title="2、link 和@import 引入样式文件的区别"></a>2、link 和@import 引入样式文件的区别</h3><p>（1）加载资源的限制</p>
<p>link 是 XHTML 的标签，除了加载 css 文件之外，还能加载 RSS 等其他事务，如加载模板等；</p>
<p>@import 只能加载 css 文件</p>
<p>（2）加载方式</p>
<p>用 link 引用 css，在页面载入时同时加载，即同步加载；</p>
<p>用@import 引用 css，则需要等到网页完全载入后，再加载 css 文件，即异步加载</p>
<p>（3）兼容性</p>
<p>link 是 XHTML 标签，没有兼容问题</p>
<p>@import 是在 css2.1 中提出的，不支持低版本的浏览器</p>
<p>（4）改变样式</p>
<p>link 的标签是 DOM 元素，支持使用 JavaScript 控制 DOM 和修改样式</p>
<p>@import 是一种方法，不支持控制 DOM 和修改元素</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css：flex布局</title>
    <url>/2019/10/13/css%EF%BC%9Aflex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>



<a id="more"></a>

<h3 id="一、容器的属性"><a href="#一、容器的属性" class="headerlink" title="一、容器的属性"></a>一、容器的属性</h3><h4 id="1、flex-direction"><a href="#1、flex-direction" class="headerlink" title="1、flex-direction"></a>1、flex-direction</h4><p>定义主轴的方向。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png"></p>
<h4 id="2、flex-wrap"><a href="#2、flex-wrap" class="headerlink" title="2、flex-wrap"></a>2、flex-wrap</h4><p>定义如果一行排不下，如何换行。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: npwrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png" alt="nowrap"><br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg" alt="wrap"><br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg" alt="wrap-reverse"></p>
<h4 id="3、flex-flow"><a href="#3、flex-flow" class="headerlink" title="3、flex-flow"></a>3、flex-flow</h4><p>flex-direction 和 flex-wrap 的简写，默认值为 row nowrap。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">.<span class="class">box </span>&#123;</span><br><span class="line"><span class="symbol">  display:</span> flex;</span><br><span class="line">  flex-flow：<span class="params">&lt;flex-direction&gt;</span> || <span class="params">&lt;flex-row&gt;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、justify-content"><a href="#4、justify-content" class="headerlink" title="4、justify-content"></a>4、justify-content</h4><p>定义了项目在主轴上的对齐方式。</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">.<span class="built_in">box</span> &#123;</span><br><span class="line">  <span class="built_in">display</span>: flex;</span><br><span class="line">  justify-<span class="built_in">content</span>：flex-start | flex-end | <span class="built_in">center</span> | <span class="built_in">space</span>-between | <span class="built_in">space</span>-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png"></p>
<h4 id="5、align-items"><a href="#5、align-items" class="headerlink" title="5、align-items"></a>5、align-items</h4><p>定义了项目在交叉轴上如何对齐。</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items：flex-start | <span class="type">flex</span>-<span class="keyword">end</span> | <span class="type">center</span> | <span class="type">baseline</span> | <span class="type">stretch</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png"></p>
<h4 id="6、align-content"><a href="#6、align-content" class="headerlink" title="6、align-content"></a>6、align-content</h4><p>定义了多个项目在主轴上的对齐方式。如果只有一个项目则该属性不奏效。</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-content：flex-start | <span class="type">flex</span>-<span class="keyword">end</span> | <span class="type">center</span> | <span class="type">space</span>-between | <span class="type">space</span>-around | <span class="type">stretch</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png"></p>
<h3 id="二、项目的属性"><a href="#二、项目的属性" class="headerlink" title="二、项目的属性"></a>二、项目的属性</h3><h4 id="1、order"><a href="#1、order" class="headerlink" title="1、order"></a>1、order</h4><p>定义项目的排列顺序。数值越小，排列越靠前，默认值为 0。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">.<span class="class">box </span>&#123;</span><br><span class="line"><span class="symbol">  display:</span> flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="class">item </span>&#123;</span><br><span class="line">  order： <span class="params">&lt;integer&gt;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png"></p>
<h4 id="2、flex-grow"><a href="#2、flex-grow" class="headerlink" title="2、flex-grow"></a>2、flex-grow</h4><p>定义项目的放大比例，默认值为 0，即如果存在剩余空间，也不放大。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">.<span class="class">box </span>&#123;</span><br><span class="line"><span class="symbol">  display:</span> flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="class">item </span>&#123;</span><br><span class="line">  flex-grow：<span class="params">&lt;number&gt;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png"></p>
<h4 id="3、flex-shrink"><a href="#3、flex-shrink" class="headerlink" title="3、flex-shrink"></a>3、flex-shrink</h4><p>定义了项目的缩小比例，默认值为 1，即如果空间不足，该项目将缩小。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">.<span class="class">box </span>&#123;</span><br><span class="line"><span class="symbol">  display:</span> flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="class">item </span>&#123;</span><br><span class="line">  flex-shrink：<span class="params">&lt;number&gt;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg"></p>
<h4 id="4、flex-basis"><a href="#4、flex-basis" class="headerlink" title="4、flex-basis"></a>4、flex-basis</h4><p>定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间。默认值为 auto，即项目本身的大小。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">.<span class="class">box </span>&#123;</span><br><span class="line"><span class="symbol">  display:</span> flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="class">item </span>&#123;</span><br><span class="line">  flex-basis：<span class="params">&lt;length&gt;</span> | auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5、flex"><a href="#5、flex" class="headerlink" title="5、flex"></a>5、flex</h4><p>flex-grow，flex-shrink，flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">.<span class="class">box </span>&#123;</span><br><span class="line"><span class="symbol">  display:</span> flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="class">item </span>&#123;</span><br><span class="line">  flex：none | <span class="params">&lt;flex-grow&gt;</span> <span class="params">&lt;flex-shrink&gt;</span>? || <span class="params">&lt;flex-basis&gt;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6、align-self"><a href="#6、align-self" class="headerlink" title="6、align-self"></a>6、align-self</h4><p>允许单个项目有不同于其他项目在交叉轴上的对齐方式，可以覆盖 align-items。默认为 auto，表示继承父元素的 align-items 属性，如果父元素没有 align-items 属性，则等同于 stretch。</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">  align-self：<span class="built_in">auto</span> | <span class="type">flex</span>-start | <span class="type">flex</span>-<span class="keyword">end</span> | <span class="type">center</span> | <span class="type">baseline</span> | <span class="type">stretch</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png"></p>
<h3 id="三、小技巧-💡"><a href="#三、小技巧-💡" class="headerlink" title="三、小技巧 💡"></a>三、小技巧 💡</h3><h4 id="1-flex布局实现头部和底部固定，中间滚动布局-少了撑满，多了滚动"><a href="#1-flex布局实现头部和底部固定，中间滚动布局-少了撑满，多了滚动" class="headerlink" title="1. flex布局实现头部和底部固定，中间滚动布局(少了撑满，多了滚动)"></a>1. flex布局实现头部和底部固定，中间滚动布局(少了撑满，多了滚动)</h4><p>实现思路：</p>
<ol>
<li>设置最外层为flex布局，方向为纵向</li>
<li>中间的div设置<code>flex: 1</code>，撑满除topbar和footer之外的空间</li>
</ol>
<p>代码实现：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;body&quot;</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;topbar&quot;</span>&gt;topbar&lt;/div&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;content&quot;</span>&gt;contentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontent&lt;/div&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;footer&quot;</span>&gt;footer&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80vh</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.topbar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考资料：<a href="https://my.oschina.net/u/4336279/blog/3569932">flex 布局实现固定头部和底部，中间滚动布局</a></p>
<p>参照<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">阮一峰的 Flex 布局教程</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css：float和position</title>
    <url>/2019/10/18/css%EF%BC%9Afloat%E5%92%8Cposition/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、float-浮动"><a href="#一、float-浮动" class="headerlink" title="一、float(浮动)"></a>一、float(浮动)</h2><p><code>float: left | right | none | inherit</code></p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>元素向左浮动</td>
</tr>
<tr>
<td>right</td>
<td>元素向右移动</td>
</tr>
<tr>
<td>none</td>
<td>默认值，元素不浮动。并会显示其在文本中出现的位置</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 float 属性的值</td>
</tr>
</tbody></table>
<h3 id="1、什么是-float-浮动？"><a href="#1、什么是-float-浮动？" class="headerlink" title="1、什么是 float 浮动？"></a>1、什么是 float 浮动？</h3><p>float 会使元素向左或向右移动，直到它的外边缘碰到包含框或者另一个浮动框的边框为止</p>
<h3 id="2、元素怎么浮动？有什么特点？"><a href="#2、元素怎么浮动？有什么特点？" class="headerlink" title="2、元素怎么浮动？有什么特点？"></a>2、元素怎么浮动？有什么特点？</h3><p><strong>特点可以用八个字来表示：脱标、贴边、字围、收缩</strong></p>
<p><img src="https://user-gold-cdn.xitu.io/2018/9/4/165a5221116132cf?imageslim"></p>
<p>当框 1 向左浮动时，它脱离文档流（<strong>脱标</strong>）并且向左移动（<strong>贴边</strong>），直到它的左边缘碰到包含框的左边缘，因为它脱离了文档流，所以不占据空间，实际上覆盖了 2，使框 2 从视图上消失，如果框 2 中有文字，会围着框 1 排开（<strong>字围</strong>）。如果给一个内联元素设置浮动后，不需要设置<code>dispaly:block</code>他就可以设置宽高，如果给一个块级元素设置浮动，它的宽度不再是给定的宽度（或者是占满一行），而是里面内容的宽度（<strong>收缩</strong>）。</p>
<p>浮动元素之后的元素将围绕它。</p>
<p>浮动元素之前的元素不会受到他的影响。</p>
<h3 id="3、彼此相邻的浮动元素"><a href="#3、彼此相邻的浮动元素" class="headerlink" title="3、彼此相邻的浮动元素"></a>3、彼此相邻的浮动元素</h3><p>如果把几个浮动的元素放在一起，如果有空间的话，他们将彼此相邻</p>
<h3 id="4、浮动元素引起的问题"><a href="#4、浮动元素引起的问题" class="headerlink" title="4、浮动元素引起的问题"></a>4、浮动元素引起的问题</h3><p>（1）父元素的高度无法撑开（<strong>高度塌陷</strong>），影响与父元素同级的元素</p>
<p>（2）与元素同级的非浮动元素会紧随其后（类似遮盖现象）</p>
<h3 id="5、清除浮动"><a href="#5、清除浮动" class="headerlink" title="5、清除浮动"></a>5、清除浮动</h3><p>元素浮动之后，周围的元素会重新排列，为了避免这种情况</p>
<p>（1）为父元素设置固定高度（扩展性不好）</p>
<p>（2）为父元素设置<code>overflow: hidden</code> ，即可清楚浮动，让父元素的高度被撑开，这种方法让父容器形成了 BFC（块级格式化上下文），因为 BFC 中能包含浮动。<strong>但是有个缺陷：如果有内容出了盒子，用这种方法就会把多余的部分裁切掉，所以这时不能使用。</strong></p>
<p>（3）使用<code>clear</code>属性，clear 属性指定元素两侧不能出现浮动元素<code>clear: both</code></p>
<p>（4）外墙法指在父元素外面，添加一道墙，设置<code>clear: both</code></p>
<p>（5）内墙法指在父元素内部，浮动元素的最后面，添加一道墙，设置属性<code>clear: both</code> ，<strong>添加的那个元素必须是块级元素，不然无法撑起父级元素高度</strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;inner&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">div</span> style=<span class="string">&quot;clear: both;&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#inner</span>&#123;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（6）伪元素是指为了少创建元素，对父元素添加 after 伪元素，设置属性<code>content: &quot;&quot;; display: bloak; clear: both</code></p>
<p>（7）使用通用类 clearfix，clearfix 的实现如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（7）br 标签清除浮动，br 标签存在一个属性：clear。这个属性就是能够清除浮动的利器，在 br 标签中设置属性 clear，并赋值 all。即能清除掉浮动</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;inner&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">	&lt;br clear=<span class="string">&quot;all&quot;</span> /&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://juejin.im/post/5be53c0fe51d451e5a32e5ac">如何清除浮动</a></p>
<p><a href="https://www.runoob.com/css/css-float.html">CSS Float(浮动)</a></p>
<h2 id="二、position"><a href="#二、position" class="headerlink" title="二、position"></a>二、position</h2><p><a href="https://www.runoob.com/css/css-positioning.html">参照菜鸟教程 position</a></p>
<p><code>position: absolute | fixed | relative | static | sticky | inherit</code></p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>absolute</td>
<td><strong>绝对定位</strong>，相对于<strong>除 static 以外的第一个已定位父元素</strong>进行定位，如果元素没有已定位的父元素，那么他的位置相对于&lt; html &gt;，absolute 定位使元素的位置与文档流无关，因此<strong>不占据空间</strong> ，</td>
</tr>
<tr>
<td>fixed</td>
<td><strong>固定定位</strong>，相对于<strong>浏览器窗口</strong>进行定位，元素的位置通过“left”,”top”,”right”以及”bottom”属性进行规定，Fixed 定位使元素的位置与文档流无关，因此<strong>不占据空间</strong>，Fixed 定位的元素和其他元素**重叠 **</td>
</tr>
<tr>
<td>relative</td>
<td><strong>相对定位</strong> ，相对于<strong>其正常位置</strong>进行定位，因此，<code>left:20px</code> 会向元素的 LEFT 位置添加 20 像素，移动相对定位元素，但他<strong>原本所占的空间不会改变</strong> ，相对定位元素经常被用来作为绝对定位元素的容器块</td>
</tr>
<tr>
<td>static</td>
<td><strong>默认，没有定位</strong> ，元素出现 在正常的流中（忽略 top，bottom，left，right 或者 z-index 声明）</td>
</tr>
<tr>
<td>sticky</td>
<td><strong>粘性定位</strong> ，该定位基于<strong>用户滚动</strong>的位置，他的行为就像 position:relative；当页面滚动超出目标区域时，它的表现就像<code>position:fixed</code> ，他会固定在目标位置，元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。这个特定阈值指的是 top、right、bottom 或 left 之一，换言之，指定 top、right、bottom 或 left 四个阈值其中之一，才可使粘性定位生效，否则其行为与相对定位相同</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从<strong>父元素继承<code>position</code> 属性</strong></td>
</tr>
</tbody></table>
<h2 id="三、重叠元素"><a href="#三、重叠元素" class="headerlink" title="三、重叠元素"></a>三、重叠元素</h2><p><code>z-index: number | auto | inherit</code></p>
<p>元素的定位与文档流无关，所以他们可以覆盖在页面其它元素</p>
<p>z-index 属性指定了一个元素的堆叠顺序（那个元素应该放在前面或后面）</p>
<p>一个元素可以有正数或负数的排列顺序</p>
<p>具有更高堆叠顺序的元素总是在较低的堆叠顺序元素的前面</p>
<p><strong>注意</strong>：如果两个定位元素重叠，没有指定 z-index，最后定位在 HTML 代码中的元素将被显示在最前面</p>
<h2 id="四、position-absolute和-float-的异同"><a href="#四、position-absolute和-float-的异同" class="headerlink" title="四、position: absolute和 float 的异同"></a>四、<code>position: absolute</code>和 <code>float</code> 的异同</h2><p><strong>共同点：</strong> 可以让元素脱离文档流，如果是内联元素，可以为它设置宽高</p>
<p><strong>不同点：</strong> float 仍可以占据位置，不会覆盖在另一个 BFC 区域上，浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止，如果浮动盒子后面是个非浮动盒子，浮动盒子会覆盖非浮动盒子，但是非浮动盒子中的内容不会被覆盖，会环绕在浮动盒子四周；absolute 会覆盖文档流中的其他元素，即出现遮盖元素</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css：元素单位的使用</title>
    <url>/2019/10/17/css%EF%BC%9A%E5%85%83%E7%B4%A0%E5%8D%95%E4%BD%8D%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h3 id="1、px"><a href="#1、px" class="headerlink" title="1、px"></a>1、px</h3><p>px 像素，绝对长度单位，像素 px 是相对于<strong>显示器屏幕分辨率</strong>而言的</p>
<a id="more"></a>

<p><strong>特点</strong></p>
<ol>
<li>IE 无法调整那些使用 px 作为单位的字体大小</li>
<li>国外的大部分网站能够调整的原因在于其使用了 em 或 rem 作为字体单位</li>
<li>Firefox 能够调整 px 和 em，rem，但是 96%以上的中国网民使用 IE 浏览器（或内核）</li>
</ol>
<h3 id="2、em"><a href="#2、em" class="headerlink" title="2、em"></a>2、em</h3><p>1em = 16px</p>
<p>em 是相对长度单位。相对于当前对象内文本的字体尺寸，如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸</p>
<p>如果某个 p 元素为<code>font-size:12px</code> ，在它的内部有个 span 标签，设置<code>font-size:2em</code> ，那么这个时候 span 字体的大小为 12*2 = 24px</p>
<p><strong>特点</strong></p>
<ol>
<li>em 的值并不是固定的</li>
<li>em 会继承<strong>父级元素</strong>的字体大小</li>
</ol>
<h3 id="3、rem"><a href="#3、rem" class="headerlink" title="3、rem"></a>3、rem</h3><p>1rem = html 根元素设定的 font-size 的 px 值（如果没有设置就是 1rem = 16px）</p>
<p>使用 rem 为元素设置字体大小时，仍然是相对大小，但相对的是 HTML 根元素</p>
<p>如果 html 的<code>font-size:12px</code> ，在其中的 div 设置为<code>font-size:2rem</code> ，则这个 div 的的实际字体大小为 2*12 = 24px</p>
<p><strong>特点</strong></p>
<ol>
<li>rem 是相对单位，总是相对于<strong>根元素&lt; html &gt;</strong></li>
<li>相对大小和绝对大小的优点于一身</li>
<li>修改根元素就成比例的调整所有字体大小</li>
<li>避免字体大小逐层复合的连锁反应</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>JS：作用域和作用域链</title>
    <url>/2021/03/23/JS%EF%BC%9A%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</url>
    <content><![CDATA[<img src="https://github.com/chajianyuan/picture/blob/master/1621616508791_.pic.jpg?raw=true" width="600px" />

<a id="more"></a>

<h3 id="一、作用域链"><a href="#一、作用域链" class="headerlink" title="一、作用域链"></a>一、作用域链</h3><p>当查找变量时，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做<code>作用域链</code>。</p>
<h3 id="二、作用域"><a href="#二、作用域" class="headerlink" title="二、作用域"></a>二、作用域</h3><p><strong><code>作用域</code>就是一个独立的地盘，让变量不会外泄、暴露出去，也就是说作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。</strong></p>
<p>ES6 之前 JavaScript 没有块级作用域，只有全局作用域和函数作用域</p>
<ul>
<li><strong>全局作用域</strong>：在代码中任何地方都能访问到，比如最外层函数和在最外层函数外面定义的变量、所有未定义直接赋值的变量、所有 window 对象的属性</li>
<li><strong>函数作用域</strong>：声明在函数里面的变量 ，只在固定的代码片段内能访问到</li>
<li><strong>块级作用域</strong>：可通过 let 和 const 声明，所声明的变量在指定块的作用域外无法被访问，所声明的变量不会提升到代码块顶部，禁止重复声明，如在一个函数内部、在一个代码块（用一对花括号包裹）内部</li>
</ul>
<p><strong>块语句（大括号“{}”中间的语句），如 if 和 switch 条件语句或 for 和 while 循环语句，不像函数，他们不会创建一个新的作用域。</strong></p>
<p><strong>作用域在定义时就确定，并且不会改变；执行上下文在运行时确定，随时可能改变。</strong></p>
<p>参考：<a href="https://juejin.im/post/5c8290455188257e5d0ec64f">深入理解 JavaScript 作用域和作用域链</a></p>
]]></content>
  </entry>
  <entry>
    <title>css：单列、两列、三列布局</title>
    <url>/2019/10/27/css%EF%BC%9A%E5%8D%95%E5%88%97%E3%80%81%E4%B8%A4%E5%88%97%E3%80%81%E4%B8%89%E5%88%97%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、单列布局"><a href="#一、单列布局" class="headerlink" title="一、单列布局"></a>一、单列布局</h2><p><img src="https://user-gold-cdn.xitu.io/2018/11/7/166ed4e13cc2753f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<a id="more"></a>

<h3 id="1、header-content-和-footer-等宽的单列布局"><a href="#1、header-content-和-footer-等宽的单列布局" class="headerlink" title="1、header,content 和 footer 等宽的单列布局"></a>1、header,content 和 footer 等宽的单列布局</h3><p>先通过对 header,content,footer 统一设置<code>width:1000px</code>或者<code>max-width:1000px</code> （这两者的区别是当屏幕小于 1000px 时，前者会出现滚动条，后者则不会，显示实际宽度），然后设置<code>margin:auto</code> 实现居中即可得到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.header</span>,</span></span><br><span class="line"><span class="css">	<span class="selector-class">.content</span>,</span></span><br><span class="line"><span class="css">	<span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">		margin: 0 auto;</span><br><span class="line">		max-width: 1000px;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.header</span> &#123;</span></span><br><span class="line">		height: 100px;</span><br><span class="line">		background-color: green;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.content</span> &#123;</span></span><br><span class="line">		height: 200px;</span><br><span class="line">		background-color: blue;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">		height: 100px;</span><br><span class="line">		background-color: red;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、header-与-footer-等宽，content-略窄的单列布局"><a href="#2、header-与-footer-等宽，content-略窄的单列布局" class="headerlink" title="2、header 与 footer 等宽，content 略窄的单列布局"></a>2、header 与 footer 等宽，content 略窄的单列布局</h3><p>header、footer 的内容宽度不设置，块级元素充满整个屏幕，但 header、content、footer 的内容区设置同一个 width，并通过 margin：0 auto 实现居中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.header</span>,</span></span><br><span class="line"><span class="css">	<span class="selector-class">.content</span>,</span></span><br><span class="line"><span class="css">	<span class="selector-class">.footer</span>,</span></span><br><span class="line"><span class="css">	<span class="selector-class">.nav</span> &#123;</span></span><br><span class="line">		margin: 0 auto;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.header</span> &#123;</span></span><br><span class="line">		max-width: 1000px;</span><br><span class="line">		height: 100px;</span><br><span class="line">		background-color: green;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line">		max-width: 800px;</span><br><span class="line">		height: 10px;</span><br><span class="line">		background-color: yellow;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.content</span> &#123;</span></span><br><span class="line">		width: 500px;</span><br><span class="line">		height: 200px;</span><br><span class="line">		background-color: blue;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">		max-width: 1000px;</span><br><span class="line">		height: 100px;</span><br><span class="line">		background-color: red;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、两列布局"><a href="#二、两列布局" class="headerlink" title="二、两列布局"></a>二、两列布局</h2><h3 id="1、利用-float-配合-margin-实现"><a href="#1、利用-float-配合-margin-实现" class="headerlink" title="1、利用 float 配合 margin 实现"></a>1、利用 float 配合 margin 实现</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">        overflow: hidden;</span><br><span class="line">        height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">        height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        background-color: red;</span><br><span class="line">        width: 100px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">        background-color: blue;</span><br><span class="line">        margin-left: 100px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、利用-float-配合-overflow-实现"><a href="#2、利用-float-配合-overflow-实现" class="headerlink" title="2、利用 float 配合 overflow 实现"></a>2、利用 float 配合 overflow 实现</h3><p>如果是普通的两列布局，<strong>浮动+普通元素的 margin ** 便可以实现，但如果是自适应的两列布局，利用</strong>float+overflow:hidden** 便可以实现，这种办法主要是通过 overflow 触发 BFC，因为 BFC 不会重叠浮动元素，由于设置 overflow:hidden 并不会触发 IE6-浏览器的 laslayout 属性，所以需要设置 zoom:1 来兼容 IE6-浏览器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line">    background-color: aqua;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    zoom: 1;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">    float: left;</span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">    overflow: hidden;</span><br><span class="line">    background-color: blue;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、使用-flex-实现"><a href="#3、使用-flex-实现" class="headerlink" title="3、使用 flex 实现"></a>3、使用 flex 实现</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line">    background-color: aqua;</span><br><span class="line">    display: flex;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">    flex: 1;</span><br><span class="line">    background-color: blue;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、grid-布局"><a href="#4、grid-布局" class="headerlink" title="4、grid 布局"></a>4、grid 布局</h3><p>Grid 布局，是一个基于网格的二维布局系统，目的是用来优化用户界面设计。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line">    background-color: aqua;</span><br><span class="line">    display: grid;</span><br><span class="line">    grid-template-columns: auto 1fr;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">    background-color: blue;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、三列布局"><a href="#三、三列布局" class="headerlink" title="三、三列布局"></a>三、三列布局</h2><p><strong>特征：中间列自适应宽度，旁边两侧固定宽度</strong></p>
<h3 id="1、圣杯布局"><a href="#1、圣杯布局" class="headerlink" title="1、圣杯布局"></a>1、圣杯布局</h3><h4 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1 特点"></a>1.1 特点</h4><p>比较特殊的三栏布局，同样也是两固定宽度，中间自适应，唯一的区别是 dom 结构必须是先写中间列部分，这样实现中间列可以优先加载。</p>
<h4 id="1-2-实现步骤"><a href="#1-2-实现步骤" class="headerlink" title="1.2 实现步骤"></a>1.2 实现步骤</h4><ul>
<li><p>三个部分都设定为左浮动，否则左右两边内容上不去，就不可能和中间列同一行，然后设置 center 的宽度为 100%（实现中间列内容自适应），此时，left 和 right 部分会跳到下一行。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/10/18/16682cae82722a6a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
</li>
<li><p>通过设置 margin-left 为负值让 left 和 right 部分回到与 center 部分同一行</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/10/18/16682c1d72a1ea68?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
</li>
<li><p>通过设置父容器的 padding-left 和 padding-right，让左右两边留出间隙</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/10/18/16682c473f605745?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
</li>
<li><p>通过设置相对定位，让 left 和 right 部分移动到两边</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/10/17/16682bf3615502c2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
</li>
</ul>
<h4 id="1-3-缺点"><a href="#1-3-缺点" class="headerlink" title="1.3 缺点"></a>1.3 缺点</h4><ul>
<li><p>center 部分的最小宽度不能小于 left 部分的宽度，否则 left 部分会掉到下一行</p>
</li>
<li><p>如果其中一列内容高度拉长，其他两列的背景并不会自动填充（借助等高布局正 padding+负 padding 可解决）</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/11/8/166f229b862b187f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;center&quot;</span>&gt;圣杯布局&lt;/div&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;left&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=<span class="string">&quot;right&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.left</span>,</span><br><span class="line">  <span class="selector-class">.center</span>,</span><br><span class="line">  <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">100px</span>;   <span class="comment">//为左右栏腾出空间</span></span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2、双飞翼布局"><a href="#2、双飞翼布局" class="headerlink" title="2、双飞翼布局"></a>2、双飞翼布局</h3><h4 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h4><p>同样是三栏布局，在圣杯布局基础上进一步优化，解决了圣杯布局错误问题，实现了内容与布局的分离。而且任何一栏都可以是最高栏，不会出问题。</p>
<h4 id="2-2-实现步骤（前两步与圣杯布局）"><a href="#2-2-实现步骤（前两步与圣杯布局）" class="headerlink" title="2.2 实现步骤（前两步与圣杯布局）"></a>2.2 实现步骤（前两步与圣杯布局）</h4><ul>
<li>三个部分都设定为左浮动，然后设置 center 的宽度为 100%，此时，left 和 right 部分会跳到下一行</li>
<li>通过设置 margin-left 为负值让 left 和 right 部分回到与 center 部分同一行</li>
<li>center 部分增加一个内层 div，并设<code>margin：0 200px</code>；</li>
</ul>
<h4 id="2-3-缺点"><a href="#2-3-缺点" class="headerlink" title="2.3 缺点"></a>2.3 缺点</h4><p>多加一层 dom 树节点，增加渲染树生成的计算量</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main col&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main_inner&quot;</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left col&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right col&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  body,</span><br><span class="line">  html,</span><br><span class="line">  container &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.col</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">float</span>: <span class="selector-tag">left</span>; <span class="comment">/*把left和right定位到左右不分*/</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="comment">/*处理中间栏被遮盖问题*/</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.main_inner</span> &#123;</span></span><br><span class="line">    margin: 0 200px 0 100px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100%;</span><br><span class="line">    margin-left: -100%;</span><br><span class="line">    background-color: green;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 100%;</span><br><span class="line">    margin-left: -200px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>对比圣杯布局和双飞翼布局</strong></p>
<p>（1）都是左右栏定宽，中间自适应的三栏布局，中间栏都放在文档流前面，保证先行渲染</p>
<p>（2）解决方案基本相似：都是三栏全部设置左浮动<code>float: left</code> ，然后分别解决中间栏内容被覆盖问题</p>
<p>（3）解决中间栏内容被覆盖问题时，圣杯布局设置父元素的 padding，双飞翼布局在中间栏外面嵌套了一个 div，并设置 margin，实际上双飞翼布局就是圣杯布局的改进方案</p>
<h3 id="3、flex-布局"><a href="#3、flex-布局" class="headerlink" title="3、flex 布局"></a>3、flex 布局</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        background-color: red;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        flex: 1;</span><br><span class="line">        background-color: blue;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        background-color: green;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、流体布局"><a href="#4、流体布局" class="headerlink" title="4、流体布局"></a>4、流体布局</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.right</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        height: 200px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 100px;</span><br><span class="line">        background-color: red;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">        float: right;</span><br><span class="line">        width: 100px;</span><br><span class="line">        background-color: green;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        background-color: blue;</span><br><span class="line">        margin-left: 100px;</span><br><span class="line">        margin-right: 100px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>缺点</strong>：主要内容无法最先加载，当页面内容较多时会影响用户体验</p>
<h3 id="5、BFC-三栏布局"><a href="#5、BFC-三栏布局" class="headerlink" title="5、BFC 三栏布局"></a>5、BFC 三栏布局</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.right</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        height: 200px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 100px;</span><br><span class="line">        background-color: red;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">        float: right;</span><br><span class="line">        width: 100px;</span><br><span class="line">        background-color: green;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        background-color: blue;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://juejin.im/post/5bbcd7ff5188255c80668028">几种常见的 CSS 布局</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css：实现文字自动滚动（animation属性和@keyframes规则）</title>
    <url>/2021/01/08/css%EF%BC%9A%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E8%87%AA%E5%8A%A8%E6%BB%9A%E5%8A%A8%EF%BC%88animation%E5%B1%9E%E6%80%A7%E5%92%8C@keyframes%E8%A7%84%E5%88%99%EF%BC%89/</url>
    <content><![CDATA[<p>使用css的animation属性和@keyframes规则，实现中奖信息的滚动播报</p>
<p>要创建 css3 动画，需要了解@keyframes 规则</p>
<a id="more"></a>

<ul>
<li>@keyframes 规则是创建动画</li>
<li>@keyframes 规则内指定一个 CSS 样式动画将逐步从目前的样式更改为新的样式</li>
</ul>
<p>当在 <strong>@keyframes</strong> 创建动画，把它绑定到一个选择器，否则动画不会有任何效果。</p>
<p>指定至少这两个 CSS3 的动画属性绑定向一个选择器：</p>
<ul>
<li>规定动画的名称</li>
<li>规定动画的时长</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>keyframes</td>
<td>规定动画。</td>
</tr>
<tr>
<td>animation</td>
<td>所有动画属性的简写属性，除了 animation-play-state 属性。</td>
</tr>
<tr>
<td>animation-name</td>
<td>规定 @keyframes 动画的名称。</td>
</tr>
<tr>
<td>animation-duration</td>
<td>规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>规定动画的速度曲线。默认是 “ease”。</td>
</tr>
<tr>
<td>animation-fill-mode</td>
<td>规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。</td>
</tr>
<tr>
<td>animation-delay</td>
<td>规定动画何时开始。默认是 0。</td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td>规定动画被播放的次数。默认是 1。</td>
</tr>
<tr>
<td>animation-direction</td>
<td>规定动画是否在下一周期逆向地播放。默认是 “normal”。</td>
</tr>
<tr>
<td>animation-play-state</td>
<td>规定动画是否正在运行或暂停。默认是 “running”。</td>
</tr>
</tbody></table>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">div&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>:red;</span><br><span class="line">	<span class="attribute">position</span>:relative;</span><br><span class="line">	<span class="attribute">animation-name</span>:myfirst;</span><br><span class="line">	<span class="attribute">animation-duration</span>:<span class="number">5s</span>;</span><br><span class="line">	<span class="attribute">animation-timing-function</span>:linear;</span><br><span class="line">	<span class="attribute">animation-delay</span>:<span class="number">2s</span>;</span><br><span class="line">	<span class="attribute">animation-iteration-count</span>:infinite;</span><br><span class="line">	<span class="attribute">animation-direction</span>:alternate;</span><br><span class="line">	<span class="attribute">animation-play-state</span>:running;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes myfirst</span><br><span class="line">&#123;</span><br><span class="line">	<span class="number">0%</span>   &#123;<span class="attribute">background</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">	<span class="number">25%</span>  &#123;<span class="attribute">background</span>:yellow; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">	<span class="number">50%</span>  &#123;<span class="attribute">background</span>:blue; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">	<span class="number">75%</span>  &#123;<span class="attribute">background</span>:green; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">	<span class="number">100%</span> &#123;<span class="attribute">background</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="animation-和-transition-的异同"><a href="#animation-和-transition-的异同" class="headerlink" title="animation 和 transition 的异同"></a>animation 和 transition 的异同</h3><p><strong>相同：</strong> 功能相同，都是通过改变元素的属性值来实现动画效果的。</p>
<p><strong>不同：</strong> transition 只能用指定属性的开始值和结束值，然后在这两个属性值之间使用平滑过渡的方式实现动画效果，因此不能实现比较复杂的动画效果；animation 通过定义多个关键帧，以及定义每个关键帧中元素的属性值来实现更为复杂的动画效果。</p>
<p>以react.js为例</p>
<p>JSX部分</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;prize-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;rowup&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">      winners.<span class="keyword">map</span>(<span class="type">item</span> =&gt; &lt;div<span class="built_in"> key</span>=&#123;<span class="type">item</span>.nick&#125;</span><span class="xml"> className=&quot;winner-info&quot;&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;prize-img&quot;</span> <span class="attr">src</span>=</span></span><span class="xquery">&#123;<span class="type">item</span>.headerpic ? <span class="type">item</span>.headerpic : defaultAvatar&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xquery">&#123;<span class="type">item</span>.nick&#125;</span><span class="xml">已获得</span><span class="xquery">&#123;<span class="type">item</span>.price&#125;</span><span class="xml">元试用资格</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml">)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>CSS部分</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.prize-info</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: rgba(<span class="number">#FFFFFF</span>, .<span class="number">19</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.63rem</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">9.5rem</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">15rem</span> .<span class="number">7rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">55rem</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="selector-class">.winner-info</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: .<span class="number">2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.prize-img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: .<span class="number">7rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: .<span class="number">7rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: .<span class="number">15rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.prize-info</span> <span class="selector-class">.rowup</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: .<span class="number">85rem</span>;</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: <span class="number">10s</span> rowup linear infinite normal;</span><br><span class="line">  <span class="attribute">animation</span>: <span class="number">10s</span> rowup linear infinite normal;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> rowup &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: translate3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="attribute">transform</span>: translate3d(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">      -webkit-<span class="attribute">transform</span>: translate3d(<span class="number">0</span>, -<span class="number">8em</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="attribute">transform</span>: translate3d(<span class="number">0</span>, -<span class="number">8rem</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>待更～（后续会记录使用websocket时时更新数据）</p>
]]></content>
  </entry>
  <entry>
    <title>css：水平垂直居中</title>
    <url>/2019/10/16/css%EF%BC%9A%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、水平居中"><a href="#一、水平居中" class="headerlink" title="一、水平居中"></a>一、水平居中</h2><h3 id="1、行内元素"><a href="#1、行内元素" class="headerlink" title="1、行内元素"></a>1、行内元素</h3><a id="more"></a>

<h4 id="（1）父元素是块级元素"><a href="#（1）父元素是块级元素" class="headerlink" title="（1）父元素是块级元素"></a>（1）父元素是块级元素</h4><p>父元素设置<code>text-align: center</code></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">one</span>&quot;&gt;</span></span><br><span class="line"><span class="class">	&lt;span&gt;我是行内元素&lt;/span&gt;</span></span><br><span class="line"><span class="class">&lt;/div&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">.<span class="title">one</span> &#123;</span></span><br><span class="line">	<span class="built_in">width</span>: <span class="number">200</span>px;</span><br><span class="line">	<span class="built_in">height</span>: <span class="number">100</span>px;</span><br><span class="line">	border: solid <span class="number">1</span>px red;</span><br><span class="line">	<span class="built_in">text</span>-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720191016123813.png?raw=true"></p>
<h4 id="（2）父元素不是块级元素"><a href="#（2）父元素不是块级元素" class="headerlink" title="（2）父元素不是块级元素"></a>（2）父元素不是块级元素</h4><p>先将父元素设置为块级元素，再将父元素设置<code>text-align: center</code></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">&lt;span <span class="class"><span class="keyword">class</span>=&quot;<span class="title">one</span>&quot;&gt;</span></span><br><span class="line"><span class="class">	&lt;span&gt;我是行内元素&lt;/span&gt;</span></span><br><span class="line"><span class="class">&lt;/span&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">.<span class="title">one</span> &#123;</span></span><br><span class="line">	<span class="built_in">width</span>: <span class="number">200</span>px;</span><br><span class="line">	<span class="built_in">height</span>: <span class="number">100</span>px;</span><br><span class="line">	border: solid <span class="number">1</span>px red;</span><br><span class="line">	<span class="built_in">display</span>: block;</span><br><span class="line">	<span class="built_in">text</span>-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720191016123813.png?raw=true"></p>
<h3 id="2、块级元素"><a href="#2、块级元素" class="headerlink" title="2、块级元素"></a>2、块级元素</h3><h4 id="（1）定宽度"><a href="#（1）定宽度" class="headerlink" title="（1）定宽度"></a>（1）定宽度</h4><p><code>margin: 0 auto;</code></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;div class=&quot;main&quot;&gt;</span></span><br><span class="line">	<span class="params">&lt;div class=&quot;one&quot;&gt;</span></span><br><span class="line">		我是有宽度的块级元素</span><br><span class="line">	<span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">.<span class="class">main </span>&#123;</span><br><span class="line"><span class="symbol">	width:</span> <span class="number">500</span>px;</span><br><span class="line"><span class="symbol">	height:</span> <span class="number">300</span>px;</span><br><span class="line"><span class="symbol">	border:</span> solid <span class="number">1</span>px red;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="class">one </span>&#123;</span><br><span class="line"><span class="symbol">	width:</span> <span class="number">200</span>px;</span><br><span class="line"><span class="symbol">	height:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">	margin:</span> <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720191016124428.png?raw=true"></p>
<h4 id="（2）不定宽度"><a href="#（2）不定宽度" class="headerlink" title="（2）不定宽度"></a>（2）不定宽度</h4><ol>
<li>设置子元素<code>display: inline</code> 或<code>display: inline-block</code>;</li>
<li>给父元素设置<code>text-align: center</code></li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;main&quot;</span>&gt;</span><br><span class="line">	&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;one&quot;</span>&gt;</span><br><span class="line">		我是没有宽度的块级元素</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720191016125427.png?raw=true"></p>
<h4 id="（3）使用定位属性"><a href="#（3）使用定位属性" class="headerlink" title="（3）使用定位属性"></a>（3）使用定位属性</h4><ol>
<li>设置父元素为相对定位；</li>
<li>子元素为绝对定位，</li>
<li>设置子元素的 left:50%，即让子元素的左上角水平居中</li>
</ol>
<h5 id="（a）-定宽度"><a href="#（a）-定宽度" class="headerlink" title="（a） 定宽度"></a>（a） 定宽度</h5><p>设置绝对子元素的<code>margin-left: -子元素宽度的一半px</code> ；或者设置<code>transform: translateX(-50%)</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;main&quot;</span>&gt;</span><br><span class="line">	&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;one&quot;</span>&gt;</span><br><span class="line">		我是使用定位属性有宽度的块级元素</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720191016131118.png?raw=true"></p>
<h5 id="（b）不定宽度"><a href="#（b）不定宽度" class="headerlink" title="（b）不定宽度"></a>（b）不定宽度</h5><p>利用 css 新增属性<code>transform: translateX(-50%)</code></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;div class=&quot;main&quot;&gt;</span></span><br><span class="line">	<span class="params">&lt;div class=&quot;one&quot;&gt;</span></span><br><span class="line">		我是使用定位属性没有宽度的块级元素</span><br><span class="line">	<span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">.<span class="class">main </span>&#123;</span><br><span class="line"><span class="symbol">	width:</span> <span class="number">500</span>px;</span><br><span class="line"><span class="symbol">	height:</span> <span class="number">300</span>px;</span><br><span class="line"><span class="symbol">	border:</span> solid <span class="number">1</span>px red;</span><br><span class="line"><span class="symbol">	position:</span> relative;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="class">one </span>&#123;</span><br><span class="line"><span class="symbol">	position:</span> absolute;</span><br><span class="line"><span class="symbol">	left:</span> <span class="number">50</span>%;</span><br><span class="line"><span class="symbol">	width:</span> <span class="number">200</span>px;</span><br><span class="line"><span class="symbol">	transform:</span> translateX(<span class="number">-50</span>%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720191016150151.png?raw=true"></p>
<h4 id="（4）flex-justify-content"><a href="#（4）flex-justify-content" class="headerlink" title="（4）flex + justify-content"></a>（4）flex + justify-content</h4><p>利用 flexbox，只需要给待处理的块状元素的父元素添加属性<code>dispaly: flex;justify-content: center;</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;main&quot;</span>&gt;</span><br><span class="line">	&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;one&quot;</span>&gt;</span><br><span class="line">		我是使用<span class="attribute">flex</span>布局的块级元素</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">	<span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720191016150717.png?raw=true"></p>
<h4 id="（5）flex-margin"><a href="#（5）flex-margin" class="headerlink" title="（5）flex + margin"></a>（5）flex + margin</h4><p>父元素设置为 flex 布局，子元素只用 margin 居中。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;main&quot;</span>&gt;</span><br><span class="line">	&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;one&quot;</span>&gt;</span><br><span class="line">		我是使用<span class="attribute">flex</span>布局的块级元素</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、垂直居中"><a href="#二、垂直居中" class="headerlink" title="二、垂直居中"></a>二、垂直居中</h2><h3 id="1、单行的行内元素"><a href="#1、单行的行内元素" class="headerlink" title="1、单行的行内元素"></a>1、单行的行内元素</h3><p>只需要设置单行行内元素的行高 = 盒子高度即可</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;main&quot;</span>&gt;</span><br><span class="line">	&lt;<span class="selector-tag">span</span> class=<span class="string">&quot;one&quot;</span>&gt;</span><br><span class="line">		我是单行行内元素</span><br><span class="line">	&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720191016152131.png?raw=true"></p>
<h3 id="2、多行的行内元素"><a href="#2、多行的行内元素" class="headerlink" title="2、多行的行内元素"></a>2、多行的行内元素</h3><p>给父元素设置<code>display: table-cell</code> 和<code>vertical-align:middle</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;main&quot;</span>&gt;</span><br><span class="line">	&lt;<span class="selector-tag">span</span> class=<span class="string">&quot;one&quot;</span>&gt;</span><br><span class="line">		我是多行行内元素我是多行行内元素我是多行行内元素我是多行行内元素我是多行行内元素我是多行行内元素我是多行行内元素我是多行行内元素我是多行行内元素我是多行行内元素</span><br><span class="line">	&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">	<span class="attribute">display</span>: table-cell;</span><br><span class="line">	<span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720191016153152.png?raw=true"></p>
<h3 id="3、块级元素"><a href="#3、块级元素" class="headerlink" title="3、块级元素"></a>3、块级元素</h3><h4 id="（1）使用定位属性"><a href="#（1）使用定位属性" class="headerlink" title="（1）使用定位属性"></a>（1）使用定位属性</h4><ol>
<li>设置父元素为相对定位</li>
<li>设置子元素为绝对定位</li>
<li>设置子元素的<code>top:50%</code> ，即让子元素在左上角垂直居中</li>
</ol>
<h5 id="（a）定高度"><a href="#（a）定高度" class="headerlink" title="（a）定高度"></a>（a）定高度</h5><p>设置绝对子元素的<code>margin-top:-子元素高度的一半px</code> ；或者设置<code>translateY(-50%)</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;main&quot;</span>&gt;</span><br><span class="line">	&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;one&quot;</span>&gt;</span><br><span class="line">		我是使用定位属性有高度的块级元素</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">	<span class="attribute">display</span>: table-cell;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720191016160059.png?raw=true"></p>
<h5 id="（b）不定高度"><a href="#（b）不定高度" class="headerlink" title="（b）不定高度"></a>（b）不定高度</h5><p>使用 css3 新增属性<code>transform:translateY(-50%)</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;main&quot;</span>&gt;</span><br><span class="line">	&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;one&quot;</span>&gt;</span><br><span class="line">		我是使用定位属性没有高度的块级元素</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">	<span class="attribute">display</span>: table-cell;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">transform</span>: translateY(-<span class="number">50%</span>);</span><br><span class="line">	<span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720191016160537.png?raw=true"></p>
<h4 id="（2）使用-flex-布局"><a href="#（2）使用-flex-布局" class="headerlink" title="（2）使用 flex 布局"></a>（2）使用 flex 布局</h4><p>使用 flexbox 布局，只需要给待处理的块状元素的父元素添加属性<code>display:flex; align-items:center;</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;main&quot;</span>&gt;</span><br><span class="line">	&lt;<span class="selector-tag">div</span> class=<span class="string">&quot;one&quot;</span>&gt;</span><br><span class="line">		我是使用<span class="attribute">flex</span>布局的块级元素</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>: solid <span class="number">1px</span> red;</span><br><span class="line">	<span class="attribute">display</span>: flex;</span><br><span class="line">	<span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720191016162740.png?raw=true"></p>
<h2 id="三、水平垂直居中"><a href="#三、水平垂直居中" class="headerlink" title="三、水平垂直居中"></a>三、水平垂直居中</h2><h3 id="1、绝对定位与负边距"><a href="#1、绝对定位与负边距" class="headerlink" title="1、绝对定位与负边距"></a>1、绝对定位与负边距</h3><p>子元素有宽度高度</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;div class=&quot;one&quot;&gt;</span></span><br><span class="line">	<span class="params">&lt;div class=&quot;two&quot;&gt;</span></span><br><span class="line">	<span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">.<span class="class">one </span>&#123;</span><br><span class="line"><span class="symbol">	position:</span> relative;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="class">two </span>&#123;</span><br><span class="line"><span class="symbol">	width:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">	height:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">	position:</span> absolute;</span><br><span class="line"><span class="symbol">	top:</span> <span class="number">50</span>%;</span><br><span class="line"><span class="symbol">	left:</span> <span class="number">50</span>%;</span><br><span class="line"><span class="symbol">	margin:</span> <span class="number">-50</span>px <span class="number">0</span> <span class="number">0</span> <span class="number">-50</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、绝对定位与-margin-auto"><a href="#2、绝对定位与-margin-auto" class="headerlink" title="2、绝对定位与 margin: auto"></a>2、绝对定位与 margin: auto</h3><p>父元素必须有高度</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;div class=&quot;one&quot;&gt;</span></span><br><span class="line">	<span class="params">&lt;div class=&quot;two&quot;&gt;</span></span><br><span class="line">	<span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">.<span class="class">one </span>&#123;</span><br><span class="line"><span class="symbol">	position:</span> relative;</span><br><span class="line"><span class="symbol">	height:</span> <span class="number">100</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="class">two </span>&#123;</span><br><span class="line"><span class="symbol">	position:</span> absolute;</span><br><span class="line"><span class="symbol">	top:</span> <span class="number">0</span>;</span><br><span class="line"><span class="symbol">	left:</span> <span class="number">0</span>;</span><br><span class="line"><span class="symbol">	right:</span> <span class="number">0</span>;</span><br><span class="line"><span class="symbol">	bottom:</span> <span class="number">0</span>;</span><br><span class="line"><span class="symbol">	margin:</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、绝对定位-css3"><a href="#3、绝对定位-css3" class="headerlink" title="3、绝对定位+css3"></a>3、绝对定位+css3</h3><p>不知道子元素的宽高</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;div class=&quot;one&quot;&gt;</span></span><br><span class="line">	<span class="params">&lt;div class=&quot;two&quot;&gt;</span></span><br><span class="line">	<span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">.<span class="class">one </span>&#123;</span><br><span class="line"><span class="symbol">	position:</span> relative;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="class">two </span>&#123;</span><br><span class="line"><span class="symbol">	position:</span> absolute;</span><br><span class="line"><span class="symbol">	top:</span> <span class="number">50</span>%;</span><br><span class="line"><span class="symbol">	left:</span> <span class="number">50</span>%;</span><br><span class="line"><span class="symbol">	transform:</span> translate(<span class="number">-50</span>%, <span class="number">-50</span>%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、flex-布局"><a href="#4、flex-布局" class="headerlink" title="4、flex 布局"></a>4、flex 布局</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><br><span class="line">	&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><br><span class="line">	&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"></span><br><span class="line">.one &#123;</span><br><span class="line">	display: flex;</span><br><span class="line">	justify-content: center;</span><br><span class="line">	align-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、flex-grid-与-margin-auto"><a href="#5、flex-grid-与-margin-auto" class="headerlink" title="5、flex/grid 与 margin: auto"></a>5、flex/grid 与 margin: auto</h3><p>父元素必须有高度</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;div class=&quot;one&quot;&gt;</span></span><br><span class="line">	<span class="params">&lt;div class=&quot;two&quot;&gt;</span></span><br><span class="line">	<span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">.<span class="class">one </span>&#123;</span><br><span class="line"><span class="symbol">	height:</span> <span class="number">100</span>px;</span><br><span class="line"><span class="symbol">	display:</span> grid / flex;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="class">two </span>&#123;</span><br><span class="line"><span class="symbol">	margin:</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://juejin.im/post/5bc3eb8bf265da0a8a6ad1ce">如何居中一个元素（终结版）</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css：瀑布流布局</title>
    <url>/2021/05/02/css%EF%BC%9A%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<img src="https://github.com/chajianyuan/picture/blob/master/WX20210515-164933@2x.png?raw=true" width="600px" />

 <a id="more"></a>

<h3 id="一、实现方式"><a href="#一、实现方式" class="headerlink" title="一、实现方式"></a>一、实现方式</h3><h4 id="1-使用javascript原生实现"><a href="#1-使用javascript原生实现" class="headerlink" title="1. 使用javascript原生实现"></a>1. 使用javascript原生实现</h4><ul>
<li><p>优点：图片排序是按照图片计算的位置横向排列，位置是计算出来的，比较规范</p>
</li>
<li><p>缺点：需要计算，列数 = 浏览器窗口宽度 / 图片宽度，图片定位是根据每一列数据块的高度计算接下来图片的位置</p>
</li>
</ul>
<p>盒子之间的间距建议使用padding，因为需要使用<code>offsetHeight</code>计算盒子的高度，<code>offsetHeight</code>指包括<code>padding</code>，不包括<code>margin</code></p>
<p>js代码实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  waterfall(<span class="string">&#x27;main&#x27;</span>, <span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> dataInt = &#123;</span><br><span class="line">    data: [</span><br><span class="line">      &#123;<span class="attr">src</span>: <span class="string">&#x27;1.jpeg&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">src</span>: <span class="string">&#x27;2.jpeg&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">src</span>: <span class="string">&#x27;3.jpeg&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.onscroll = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (checkScrollSlide()) &#123;</span><br><span class="line">      <span class="comment">// 将数据块渲染到当前页面的尾部</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dataInt.data.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> oParent = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> oBox = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        oBox.className = <span class="string">&#x27;box&#x27;</span>;</span><br><span class="line">        oParent.appendChild(oBox);</span><br><span class="line">        <span class="keyword">let</span> oPic = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        oPic.className = <span class="string">&#x27;pic&#x27;</span>;</span><br><span class="line">        oBox.appendChild(oPic);</span><br><span class="line">        <span class="keyword">let</span> oImg = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">        oImg.src = <span class="string">`images/<span class="subst">$&#123;dataInt.data[i].src&#125;</span>`</span>;</span><br><span class="line">        oPic.appendChild(oImg);</span><br><span class="line">      &#125;</span><br><span class="line">      waterfall(<span class="string">&#x27;main&#x27;</span>, <span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> waterfall = <span class="function">(<span class="params">parent, box</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 将main下的所有class为box的元素取出来</span></span><br><span class="line">  <span class="keyword">let</span> oParent = <span class="built_in">document</span>.getElementById(parent);</span><br><span class="line">  <span class="keyword">let</span> oBoxs = getByClass(oParent, box);</span><br><span class="line">  <span class="comment">// 计算整个页面显示的列数（页面宽/box的宽）</span></span><br><span class="line">  <span class="keyword">let</span> oBoxW = oBoxs[<span class="number">0</span>].offsetWidth;</span><br><span class="line">  <span class="keyword">let</span> cols = <span class="built_in">Math</span>.floor(<span class="built_in">document</span>.documentElement.clientWidth / oBoxW);</span><br><span class="line">  <span class="comment">// 设置main的宽</span></span><br><span class="line">  oParent.style.cssText = <span class="string">&#x27;width:&#x27;</span> + oBoxW * cols + <span class="string">&#x27;px; margin: 0 auto;&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> hArr = []; <span class="comment">// 存放每一列高度的数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oBoxs.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; cols) &#123;</span><br><span class="line">      hArr.push(oBoxs[i].offsetHeight);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> minH = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, hArr);</span><br><span class="line">      <span class="keyword">let</span> index = getMinHIndex(hArr, minH);</span><br><span class="line">      oBoxs[i].style.position = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">      oBoxs[i].style.top = minH + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">      <span class="comment">// oBoxs[i].style.left = oBoxW * index + &#x27;px&#x27;;</span></span><br><span class="line">      oBoxs[i].style.left = oBoxs[index].offsetLeft + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">      hArr[index] += oBoxs[i].offsetHeight;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据class获取元素</span></span><br><span class="line"><span class="keyword">const</span> getByClass = <span class="function">(<span class="params">parent, className</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> boxArr = []; <span class="comment">// 用来存储获取到的所有class为box的元素</span></span><br><span class="line">  <span class="keyword">let</span> oElements = parent.getElementsByTagName(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oElements.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oElements[i].className === className) &#123;</span><br><span class="line">      boxArr.push(oElements[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> boxArr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getMinHIndex = <span class="function">(<span class="params">arr, val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> min = arr.findIndex(<span class="function"><span class="params">i</span> =&gt;</span> i === val);</span><br><span class="line">  <span class="keyword">return</span> min;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  检测是否具备了滚动条加载数据块的条件</span></span><br><span class="line"><span class="keyword">const</span> checkScrollSlide = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> oParent = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> oBoxs = getByClass(oParent, <span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> lastBoxH = oBoxs[oBoxs.length - <span class="number">1</span>].offsetTop + <span class="built_in">Math</span>.floor(oBoxs[oBoxs.length - <span class="number">1</span>].offsetHeight / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">  <span class="keyword">let</span> height = <span class="built_in">document</span>.body.clientHeight || <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">  <span class="keyword">return</span> lastBoxH &lt; scrollTop + height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>html代码实现</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/1.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/2.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/3.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/4.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/5.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/6.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/7.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/8.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/9.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span><br><span class="line">        &lt;img src=<span class="string">&quot;images/10.jpeg&quot;</span> /&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<p>css代码实现：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pic</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-css3多栏布局实现"><a href="#2-css3多栏布局实现" class="headerlink" title="2. css3多栏布局实现"></a>2. css3多栏布局实现</h4><h5 id="1-使用column属性"><a href="#1-使用column属性" class="headerlink" title="(1) 使用column属性"></a>(1) 使用column属性</h5><ul>
<li><p>优点：不需要计算，浏览器自动计算，只需设置列宽，性能高</p>
</li>
<li><p>缺点：不可横向排列，只能纵向排列，打乱图片的排列顺序</p>
</li>
</ul>
<p>css代码实现：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-column-width</span>: <span class="number">202px</span>;</span><br><span class="line">  <span class="attribute">-moz-column-width</span>: <span class="number">202px</span>;</span><br><span class="line">  <span class="attribute">-moz-column-width</span>: <span class="number">202px</span>;</span><br><span class="line">  <span class="attribute">-ms-column-width</span>: <span class="number">202px</span>;</span><br><span class="line">  <span class="comment">/* -webkit-column-count: 5;</span></span><br><span class="line"><span class="comment">  -moz-column-count: 5;</span></span><br><span class="line"><span class="comment">  -moz-column-count: 5;</span></span><br><span class="line"><span class="comment">  -ms-column-count: 5; */</span></span><br><span class="line">  <span class="attribute">-webkit-column-gap</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">-moz-column-gap</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">-moz-column-gap</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">-ms-column-gap</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-使用flex布局"><a href="#2-使用flex布局" class="headerlink" title="(2) 使用flex布局"></a>(2) 使用flex布局</h5><ul>
<li>优点：可实现横向排列的瀑布流</li>
<li>缺点：容器必须有固定高度，并且高度要大于最高的列高</li>
</ul>
<p>css代码实现：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="comment">/* 容器必须有固定高度</span></span><br><span class="line"><span class="comment">   * 且高度大于最高的列高 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2000px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 强制换列 */</span></span><br><span class="line"><span class="selector-id">#main</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-id">#main</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:nth-child(2n+1)</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:nth-child(2n)</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">32%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>git：学习Git</title>
    <url>/2019/09/09/git%EF%BC%9A%E5%AD%A6%E4%B9%A0Git/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<img src="https://github.com/chajianyuan/picture/blob/master/1631616508997_.pic.jpg?raw=true" width="600px" />

<a id="more"></a>

<h3 id="一、Git-简介"><a href="#一、Git-简介" class="headerlink" title="一、Git 简介"></a>一、Git 简介</h3><p>Git 是目前世界上最先进的分布式版本控制系统。</p>
<h3 id="二、集中式和分布式的区别"><a href="#二、集中式和分布式的区别" class="headerlink" title="二、集中式和分布式的区别"></a>二、集中式和分布式的区别</h3><h4 id="1、集中式版本控制系统"><a href="#1、集中式版本控制系统" class="headerlink" title="1、集中式版本控制系统"></a>1、集中式版本控制系统</h4><p>提到集中式版本控制，大家首先想到的就是<code>SVN</code>，集中式版本控制系统中版本库是集中存放在中央服务器上的，而干活的时候，用的是自己的电脑，所以要先从中央服务器拿到最新的版本，然后开始干活，干完活再把自己的活推送到中央服务器，最大的缺点就是必须联网才能工作。</p>
<h4 id="2、分布式版本控制系统"><a href="#2、分布式版本控制系统" class="headerlink" title="2、分布式版本控制系统"></a>2、分布式版本控制系统</h4><p>每个人的电脑都是一个完整的版本库，这样，你工作的时候就不需要联网了，因为版本库就在自己的电脑上，多人协作时，只需要把各自的修改推送给对方就可以看到对方的修改了。</p>
<h3 id="二、Git-指令"><a href="#二、Git-指令" class="headerlink" title="二、Git 指令"></a>二、Git 指令</h3><h4 id="1、git-clone-git-server-name-path-reponame-git-从远程克隆"><a href="#1、git-clone-git-server-name-path-reponame-git-从远程克隆" class="headerlink" title="1、git clone git@server-name:path/reponame.git 从远程克隆"></a>1、<code>git clone git@server-name:path/reponame.git</code> 从远程克隆</h4><h4 id="2、git-remote-add-origin-git-server-name-path-reponame-git-关联一个远程仓库"><a href="#2、git-remote-add-origin-git-server-name-path-reponame-git-关联一个远程仓库" class="headerlink" title="2、git remote add origin git@server-name:path/reponame.git 关联一个远程仓库"></a>2、<code>git remote add origin git@server-name:path/reponame.git</code> 关联一个远程仓库</h4><h4 id="3、git-init-初始化一个仓库"><a href="#3、git-init-初始化一个仓库" class="headerlink" title="3、git init 初始化一个仓库"></a>3、<code>git init</code> 初始化一个仓库</h4><p>初始化一个新的git仓库，或者重新初始化已存在的仓库</p>
<h4 id="4、创建与合并分支"><a href="#4、创建与合并分支" class="headerlink" title="4、创建与合并分支"></a>4、创建与合并分支</h4><p>在每次提交时，Git都将他们串成一条时间线，这条时间线只有一条叫做主分支（master），HEAD 指向当前分支</p>
<p>1）创建 dev 分支，并切换到 dev 分支</p>
<p><code>git checkout -b dev</code> 或者<code>git switch -c dev</code></p>
<p>等同于</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">git branch <span class="built_in">dev</span></span><br><span class="line">git checkout <span class="built_in">dev</span> 或者 git switch <span class="built_in">dev</span></span><br></pre></td></tr></table></figure>

<p>2）查看当前分支<code>git branch</code></p>
<p>3）将 dev 分支合并到 master<code>git merge dev</code></p>
<blockquote>
<p><strong>PS: merge和rebase有什么区别❓</strong></p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">dev</span>                 <span class="comment">✅</span> -- <span class="comment">✅</span> </span><br><span class="line">                  <span class="comment">/</span>                </span><br><span class="line">                 <span class="comment">/</span>                </span><br><span class="line">                <span class="comment">/</span>               </span><br><span class="line"><span class="comment">matser</span>  <span class="comment">⭕️</span> -- <span class="comment">⭕️</span> -- <span class="comment">⭕</span> --<span class="comment">️️</span> <span class="comment">⭕</span></span><br></pre></td></tr></table></figure>
<ul>
<li>merge<ul>
<li>特点：会自动创建一个新的commit</li>
<li>优点：真实记录commit</li>
<li>缺点：commit繁杂</li>
</ul>
</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">dev                 ✅ -- ✅ -- ✅（多了一次合并的commit）</span><br><span class="line">                  <span class="regexp">/           /</span></span><br><span class="line">                 <span class="regexp">/           /</span></span><br><span class="line">                <span class="regexp">/           /</span></span><br><span class="line">matser  ⭕️ -- ⭕️ -- ⭕ --️️ ⭕ </span><br></pre></td></tr></table></figure>

<ul>
<li>rebase<ul>
<li>特点：合并之前的commit地址</li>
<li>优点：得到更简洁的commit历史</li>
<li>缺点：如果合并代码时出现了问题，不容易定位，因为重写了commit history<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">dev</span>                <span class="comment">⭕</span> -- <span class="comment">⭕️️</span> -- <span class="comment">✅</span> -- <span class="comment">✅</span> </span><br><span class="line">                 <span class="comment">/</span>                </span><br><span class="line">                <span class="comment">/</span>                </span><br><span class="line">               <span class="comment">/</span>               </span><br><span class="line"><span class="comment">matser</span>  <span class="comment">⭕️</span> -- <span class="comment">⭕️</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="5、添加文件到-Git-本地仓库"><a href="#5、添加文件到-Git-本地仓库" class="headerlink" title="5、添加文件到 Git 本地仓库"></a>5、添加文件到 Git 本地仓库</h4><p>1）使用<code>git add &lt;file&gt;</code> ，注意，可以反复多次使用，添加多个文件（放到暂存区）；</p>
<p>2）使用<code>git commit -m &lt;message&gt;</code> 提交到本地仓库（放到工作区）。</p>
<p><strong>注意：</strong> &lt; message &gt;存在规范，不能随便写，例如修改了哪个文件或者新增了哪个文件</p>
<p><code>commit message格式</code></p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">type</span>&gt;(scope): &lt;subject&gt;</span><br></pre></td></tr></table></figure>
<p><strong>type(必须)：用于识别<code>git commit</code>的类别</strong></p>
<ul>
<li>feat: 新功能</li>
<li>fix/to: 修复bug<ul>
<li>fix: 适合于一次提交直接修复问题</li>
<li>to: 适合于多次提交。最终修复问题提交时使用fix</li>
</ul>
</li>
<li>docs: 文档</li>
<li>style: 格式（不影响代码运行的变动）</li>
<li>refactor: 重构（既不是新增功能，也不是修复bug）</li>
<li>perf: 优化相关，比如提升性能、体验</li>
<li>test: 增加测试</li>
<li>chore: 构建过程或辅助工具的变动</li>
<li>revert: 回滚到上一个版本</li>
<li>merge: 代码合并</li>
<li>sync: 同步主线或分支的bug</li>
</ul>
<p><strong>scope(可选)：用于说明commit影响的范围</strong></p>
<p><strong>subject(必须)：<code>commit</code>目的的简短描述</strong></p>
<h4 id="6、git-push-u-origin-lt-name-gt-推送到远程-master-分支"><a href="#6、git-push-u-origin-lt-name-gt-推送到远程-master-分支" class="headerlink" title="6、git push -u origin &lt;name&gt; 推送到远程 master 分支"></a>6、<code>git push -u origin &lt;name&gt;</code> 推送到远程 master 分支</h4><p>如果远程仓库没有对应的分支，则使用<code>git push --set-upstream origin &lt;name&gt;</code>创建远程分支</p>
<h4 id="7、git-pull-u-origin-lt-name-gt-将最新的提交拉取下来"><a href="#7、git-pull-u-origin-lt-name-gt-将最新的提交拉取下来" class="headerlink" title="7、git pull -u origin &lt;name&gt; 将最新的提交拉取下来"></a>7、<code>git pull -u origin &lt;name&gt;</code> 将最新的提交拉取下来</h4><h4 id="8、git-status查看工作区的状态"><a href="#8、git-status查看工作区的状态" class="headerlink" title="8、git status查看工作区的状态"></a>8、<code>git status</code>查看工作区的状态</h4><p>可以查看本地未提交的代码中，修改了哪些文件。</p>
<h4 id="9、git-diff-lt-file-gt-查看具体修改了什么内容"><a href="#9、git-diff-lt-file-gt-查看具体修改了什么内容" class="headerlink" title="9、git diff &lt;file&gt; 查看具体修改了什么内容"></a>9、<code>git diff &lt;file&gt;</code> 查看具体修改了什么内容</h4><p>执行<code>git diff</code>可以查看所有具体修改，也可以指定查看具体的文件修改</p>
<h4 id="10、git-log-pretty-oneline-查看历史记录"><a href="#10、git-log-pretty-oneline-查看历史记录" class="headerlink" title="10、git log --pretty=oneline 查看历史记录"></a>10、<code>git log --pretty=oneline</code> 查看历史记录</h4><h4 id="11、版本回退"><a href="#11、版本回退" class="headerlink" title="11、版本回退"></a>11、版本回退</h4><ol>
<li><code>git reset --hard commit_id</code></li>
</ol>
<p><strong>场景</strong>：如果想撤销之前的某个版本，但是又想保留该目标版本之后的版本，记录下整个版本变动流程</p>
<p><code>HEAD</code> 表示当前版本，上一个版本<code>HEAD^</code> ，上上个版本<code>HEAD^^</code> ，以此类推，往上 100 个版本是<code>HEAD~100</code></p>
<p><strong>具体操作</strong>：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. git <span class="built_in">log</span> 查看版本号</span><br><span class="line"><span class="number">2</span>. git <span class="built_in">reset</span> --hard 目标版本</span><br><span class="line"><span class="number">3</span>. git <span class="built_in">push</span> -f <span class="built_in">origin</span> 分支名</span><br></pre></td></tr></table></figure>

<!--穿梭前，用`git log` 查看提交历史，以便确定要回退到哪个版本。-->

<!--重返未来，用`git reflog` 查看历史命令，以便确定要回到未来的哪个版本。-->

<p>2） <code>git revert（反做）</code></p>
<p><strong>场景</strong>：如果想恢复到之前某个提交的版本，并且那个版本之后的提交都不要了</p>
<p><strong>具体操作</strong>：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> git log 查看版本号</span><br><span class="line"><span class="number">2.</span> git revert -n 版本号</span><br><span class="line"><span class="number">3.</span> git commit -m <span class="string">&quot;版本名&quot;</span></span><br><span class="line"><span class="number">4.</span> git push</span><br></pre></td></tr></table></figure>

<h4 id="12、git-checkout-file-丢弃工作区的修改"><a href="#12、git-checkout-file-丢弃工作区的修改" class="headerlink" title="12、git checkout -- file 丢弃工作区的修改"></a>12、<code>git checkout -- file</code> 丢弃工作区的修改</h4><p>1）文件自修改后还没有放到暂存区，现在撤销修改就回到和版本库一模一样的状态；</p>
<p>2）文件已经添加到暂存区后，又做了修改，现在撤销修改就回到添加到暂存区后的状态。</p>
<h4 id="13、删除文件"><a href="#13、删除文件" class="headerlink" title="13、删除文件"></a>13、删除文件</h4><p>本地文件管理器删除文件<code>rm file</code> 后，使用<code>git status</code>可以 查询哪些文件被删除了：</p>
<p>1）如果确定要删除,使用<code>git rm file</code> ，并且<code>git commit</code></p>
<p>2）如果误删，则恢复删除的文件<code>git checkout -- file</code></p>
<h4 id="14、git-log-graph-查看分支合并图"><a href="#14、git-log-graph-查看分支合并图" class="headerlink" title="14、git log --graph 查看分支合并图"></a>14、<code>git log --graph</code> 查看分支合并图</h4><h4 id="15、bug-分支"><a href="#15、bug-分支" class="headerlink" title="15、bug 分支"></a>15、bug 分支</h4><p>例如，你正在 dev 分支上进行工作到一半，突然接到要修复一个代号 101 的 bug 任务</p>
<p>1）把当前工作现场储藏起来<code>git stash</code> ；</p>
<p>2）创建分支修复 bug，修复完之后 commit。切换到 master 分支完成合并，最后删除新创建的 bug 分支；</p>
<p>3）恢复未做完的 dev 工作现场</p>
<p>​ 使用<code>git stash list</code> 查看工作现场</p>
<p>​ （a）用<code>git stash apply</code> ，然后使用<code>git stash drop</code> 删除 stash 内容。使用<code>git stash apply stash@&#123;0&#125;</code> 恢复指定的 stash;</p>
<p>​ （b）使用<code>git stash pop</code> 恢复的同时能把 stash 内容也删除了。</p>
<p>在 master 分支上修复 bug，想要合并到当前的 dev 分支，可以使用<code>git cherry-pick &lt;commit&gt;</code> ,把 bug 提交的修改复制到当前分支，避免重复劳动。</p>
<h4 id="16、git-branch-D-lt-name-gt-删除本地分支"><a href="#16、git-branch-D-lt-name-gt-删除本地分支" class="headerlink" title="16、git branch -D &lt;name&gt; 删除本地分支"></a>16、<code>git branch -D &lt;name&gt;</code> 删除本地分支</h4><p><code>git push origin -d &lt;name&gt;</code> 删除远程分支</p>
<blockquote>
<p>⚠ ️删除分支时需要切换到除被删除分支之外的分支</p>
</blockquote>
<h4 id="17、查看远程仓库的信息用git-remote-或git-remote-v"><a href="#17、查看远程仓库的信息用git-remote-或git-remote-v" class="headerlink" title="17、查看远程仓库的信息用git remote 或git remote -v"></a>17、查看远程仓库的信息用<code>git remote</code> 或<code>git remote -v</code></h4><h4 id="18、git-tag-lt-name-gt-打标签"><a href="#18、git-tag-lt-name-gt-打标签" class="headerlink" title="18、git tag &lt;name&gt; 打标签"></a>18、<code>git tag &lt;name&gt;</code> 打标签</h4><p>为什么要打标签？四个字：<strong>以示重要</strong>，比如说使用tag标记发布节点（v1.0、v2.0等）</p>
<p>1）切换到需要打标签的分支上</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">branch</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout &lt;tagname&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）打标签<code>git tag &lt;tagname&gt;</code></p>
<p>3）查看所有标签<code>git tag</code></p>
<p>4）查看指定标签信息<code>git show &lt;tagname&gt;</code></p>
<p>5）删除标签 <code>git tag -d &lt;tagname&gt;</code></p>
<p>6）推送一个本地标签<code>git push origin &lt;tagname&gt;</code></p>
<p>7）推送全部未推送过的本地标签<code>git push origin --tags</code></p>
<p>8）删除一个远程标签<code>git push origin :refs/tags/&lt;tagname&gt;</code></p>
<h4 id="19、git-bisect-查找哪一次代码提交引入了错误"><a href="#19、git-bisect-查找哪一次代码提交引入了错误" class="headerlink" title="19、git bisect 查找哪一次代码提交引入了错误"></a>19、<code>git bisect</code> 查找哪一次代码提交引入了错误</h4><p><strong>原理</strong>：二分法</p>
<p>举个栗子：一共有101次提交</p>
<p><strong>使用流程</strong>：</p>
<p> 1） 检查代码提交记录 <code>git log --pretty=oneline</code></p>
<p> 2） 启动查错 <code>git bisect start [终点commit] [起点commit]</code></p>
<p>终点是最近一次的提交，起点是更久之前的提交</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">git bisect <span class="keyword">start</span> [第<span class="number">101</span>次<span class="keyword">commit</span>] [第<span class="number">1</span>次<span class="keyword">commit</span>]</span><br></pre></td></tr></table></figure>

<p>执行上述命令完之后，代码库会切换到上述范围正中间的那一次提交(也就是第51次提交)</p>
<p> 3）此时运行代码，如果代码运行正常，则使用<code>git bisect good</code>标记本次提交是没有问题的，此时代码会自动切换到后半段中点的版本（也就是第76次提交）</p>
<p> 4） 继续运行代码，如果代码运行不正常了，则使用<code>git bisect bad</code>标记本次提交是有问题的，此时代码会自动切换到本次提交到上一次提交的中点（也就是第63次提交）</p>
<p> 5） 不断重复上述第3、4步骤，就能找到出问题的那次提交<br> <img src="https://github.com/chajianyuan/picture/blob/master/1661616730056_.pic.jpg?raw=true"></p>
<p> 6） 退出查错，回到最近一次提交<code>git bisect reset</code></p>
<blockquote>
<ul>
<li>参照 <a href="https://mp.weixin.qq.com/s/vzgST0ko-HZVkFFiSZ2xGg">如何规范你的Git commit</a></li>
<li>参照 <a href="http://www.ruanyifeng.com/blog/2018/12/git-bisect.html">git bisect 命令教程</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>html：cookie、session、sessionStorage、localStorage详细讲解</title>
    <url>/2019/10/26/html%EF%BC%9Acookie%E3%80%81sessionStorage%E3%80%81localStorage%E8%AF%A6%E7%BB%86%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、cookie"><a href="#一、cookie" class="headerlink" title="一、cookie"></a>一、cookie</h2><h3 id="1、cookie-的来源"><a href="#1、cookie-的来源" class="headerlink" title="1、cookie 的来源"></a>1、cookie 的来源</h3><p>cookie 的本质工作并非本地存储，而是“维持状态”。因为<strong>http 协议是无状态的，http 协议本身并不对请求和响应之间的通信状态进行保存</strong>，通常来说，服务器不知道用户上一次做了什么。</p>
<a id="more"></a>

<h3 id="2、什么是-cookie-及应用场景"><a href="#2、什么是-cookie-及应用场景" class="headerlink" title="2、什么是 cookie 及应用场景"></a>2、什么是 cookie 及应用场景</h3><p><strong>cookie</strong>是某些网站为了辨别用户身份而存储在本地终端上的数据（通常经过加密）。</p>
<p>cookie 是服务端生成，客户端进行维护和存储。</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/3/20/1699babec3c4fcc4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<p>cookie 以键值对的形式存在。</p>
<p><strong>典型的应用场景</strong></p>
<ul>
<li>记住密码，下次自动登录</li>
<li>购物车功能</li>
<li>记录用户浏览数据，进行广告（商品）推荐</li>
</ul>
<h3 id="3、cookie-的原理"><a href="#3、cookie-的原理" class="headerlink" title="3、cookie 的原理"></a>3、cookie 的原理</h3><p><strong>cookie 原理</strong></p>
<p><img src="https://user-gold-cdn.xitu.io/2019/3/21/1699f22b7029ca14?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<ul>
<li>第一次访问网站时，浏览器发出请求，服务器响应请求后，会在响应头重添加一个 Set-Cookie 选项，将 cookie 放入响应请求中，</li>
<li>浏览器收到 Set-Cookie 选项后将它保存在本地</li>
<li>在浏览器第二次发起请求时，通过 cookie 请求头部将 cookie 信息发送给服务器，服务端会辨别用户身份。</li>
</ul>
<h2 id="二、session"><a href="#二、session" class="headerlink" title="二、session"></a>二、session</h2><p>session 代表着服务器和客户端一次会话的过程。session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序中的 web 页之间跳转时，存储在 session 对象中的变量将不会丢失，而是在整个会话中一直存在下去。当客户端关闭会话，或者 session 超时失效后会话结束。</p>
<h2 id="三、cookie-和-session-的关系"><a href="#三、cookie-和-session-的关系" class="headerlink" title="三、cookie 和 session 的关系"></a>三、cookie 和 session 的关系</h2><p><img src="https://user-gold-cdn.xitu.io/2019/5/13/16aafb5d90f398e2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<ul>
<li>用户第一次请求服务器时，服务器根据用户提交的相关信息，创建对应的 session，请求返回时将此 session 的唯一标识符 sessionID 返回给浏览器，</li>
<li>浏览器收到 sessionID 后，将它保存在 cookie 中，同时 cookie 记录 sessionID 属于哪个域名</li>
<li>当用户第二次访问服务器时，请求会自动判断此域名下是否存在 cookie 信息，如果存在自动将 cookie 信息也发送给服务端，服务端会从 cookie 中获取 sessionID，再根据 sessionID 查找对应的 session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 session 证明用户已经登录可执行后面操作</li>
</ul>
<h2 id="四、cookie-和-session-的区别"><a href="#四、cookie-和-session-的区别" class="headerlink" title="四、cookie 和 session 的区别"></a>四、cookie 和 session 的区别</h2><ul>
<li><strong>存放位置不同</strong>，cookie 数据保存在客户端的浏览器上，session 数据保存在服务器上；</li>
<li><strong>存取方式不同</strong>，cookie 只能是字符串，session 可以是任意数据类型</li>
<li><strong>隐私策略不同</strong>，cookie 不是很安全，别人可以分析存放在本地的 cookie 并进行 cookie 欺骗，考虑到安全问题应该使用 session</li>
<li><strong>存储大小不同</strong>，单个 cookie 保存的数据不能超过 4K，session 可存储数据远高于 4K</li>
<li><strong>有效期不同</strong>，cookie 可以较长时间保存，session 在客户端关闭或者 session 超时都会失效</li>
</ul>
<h2 id="五、localStorage、sessionStorage、cookie-的区别"><a href="#五、localStorage、sessionStorage、cookie-的区别" class="headerlink" title="五、localStorage、sessionStorage、cookie 的区别"></a>五、localStorage、sessionStorage、cookie 的区别</h2><ul>
<li><strong>http 请求</strong><ul>
<li>cookie 每次都会携带在 HTTP 头中，如果使用 cookie 保存数据过多会带来性能问题</li>
<li>sessionStorage 和 localStorage 不会把数据发送给服务器，仅在本地保存</li>
</ul>
</li>
<li><strong>存储数据大小</strong><ul>
<li>cookie 存储的数据不能超过 4K</li>
<li>sessionStorage 和 localStorage 可以达到 5M 或更大</li>
</ul>
</li>
<li><strong>数据存储有效期</strong><ul>
<li>cookie 在设置的 cookie 过期时间之前有效，如果没有设置，默认是关闭浏览器后失效</li>
<li>sessionStroage 仅在关闭当前窗口之前有效，关闭页面或浏览器后会被清除</li>
<li>localStorage 始终有效，除非被手动清除</li>
</ul>
</li>
<li><strong>易用性</strong><ul>
<li>cookie 需要自己封装，原生的 cookie 接口不太友好</li>
<li>localStorage 和 sessionStorage：原生接口可以接受，也可以再次封装来对 Object 和 Array 有更好的支持</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>html：WebSocket学习</title>
    <url>/2019/10/26/html%EF%BC%9AwebSocket%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017051502.png"></p>
<a id="more"></a>

<p><strong>特点</strong></p>
<ul>
<li>服务器可以主动向客户端推送消息，客户端也可以主动向服务器发送消息，是真正的双向平等对话，属于服务器推送技术的一种</li>
<li>建立在 TCP 协议之上，服务器端的实现比较容易</li>
<li>与 HTTP 协议有着良好的兼容性，默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器</li>
<li>数据格式比较轻量，性能开销小，通信高效</li>
<li>可以发送文本，也可以发送二进制数据</li>
<li>没有同源限制，客户端可以与任意服务器通信</li>
<li>协议标志符是 ws（如果加密，则为 wss），服务器网址就是 URL。</li>
</ul>
<h2 id="二、客户端的简单实例"><a href="#二、客户端的简单实例" class="headerlink" title="二、客户端的简单实例"></a>二、客户端的简单实例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&quot;wss://echo.websocket.org&quot;</span>);</span><br><span class="line"></span><br><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Connection open ...&quot;</span>);</span><br><span class="line">  ws.send(<span class="string">&quot;Hello WebSockets!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">&quot;Received Message: &quot;</span> + evt.data);</span><br><span class="line">  ws.close();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Connection closed.&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="三、客户端的-API"><a href="#三、客户端的-API" class="headerlink" title="三、客户端的 API"></a>三、客户端的 API</h2><h3 id="1、WebSocket-构造函数"><a href="#1、WebSocket-构造函数" class="headerlink" title="1、WebSocket 构造函数"></a>1、WebSocket 构造函数</h3><p><code>websocket</code>对象作为一个构造函数，用于新建一个<code>websocket</code>实例</p>
<p><code>var ws = new WebSocket(&#39;ws://localhost:8080&#39;);</code></p>
<p>执行上面语句之后，客户端就会与服务器进行连接</p>
<h3 id="2、webSocket-readyState"><a href="#2、webSocket-readyState" class="headerlink" title="2、webSocket.readyState"></a>2、webSocket.readyState</h3><p><code>readyState</code>属性返回实例对象的当前状态，共有四种。</p>
<ul>
<li><code>CONNECTING</code>：值为 0，表示正在连接</li>
<li><code>OPEN</code>：值为 1，表示连接成功，可以通信了</li>
<li><code>CLOSING</code>：值为 2，表示连接正在关闭</li>
<li><code>CLOSED</code>：值为 3，表示连接已经关闭，或者打开连接失败</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">switch (ws.readyState) &#123;</span><br><span class="line">  case WebSocket.CONNECTING:</span><br><span class="line">    <span class="regexp">//</span> <span class="keyword">do</span> something</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  case WebSocket.OPEN:</span><br><span class="line">    <span class="regexp">//</span> <span class="keyword">do</span> something</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  case WebSocket.CLOSING:</span><br><span class="line">    <span class="regexp">//</span> <span class="keyword">do</span> something</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  case WebSocket.CLOSED:</span><br><span class="line">    <span class="regexp">//</span> <span class="keyword">do</span> something</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  default:</span><br><span class="line">    <span class="regexp">//</span> this never happens</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、webSocket-onopen"><a href="#3、webSocket-onopen" class="headerlink" title="3、webSocket.onopen"></a>3、webSocket.onopen</h3><p>实例对象的<code>onopen</code>属性，用于指定连接成功后的回调函数</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  ws.send(<span class="string">&#x27;Hello Server!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要指定多个回调函数，可以使用<code>addEventListener</code>方法</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">ws.addEventListener(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span><br><span class="line">  ws.send(<span class="string">&#x27;Hello Server!&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="4、webSocket-onclose"><a href="#4、webSocket-onclose" class="headerlink" title="4、webSocket.onclose"></a>4、webSocket.onclose</h3><p>实例对象的<code>onclose</code>属性，用于指定连接关闭后的回调函数</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">ws<span class="variable">.onclose</span> = <span class="keyword">function</span>(<span class="keyword">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> code = <span class="keyword">event</span><span class="variable">.code</span>;</span><br><span class="line">  <span class="keyword">var</span> reason = <span class="keyword">event</span><span class="variable">.reason</span>;</span><br><span class="line">  <span class="keyword">var</span> wasClean = <span class="keyword">event</span><span class="variable">.wasClean</span>;</span><br><span class="line">  <span class="comment">// handle close event</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws<span class="variable">.addEventListener</span>(<span class="string">&quot;close&quot;</span>, <span class="keyword">function</span>(<span class="keyword">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> code = <span class="keyword">event</span><span class="variable">.code</span>;</span><br><span class="line">  <span class="keyword">var</span> reason = <span class="keyword">event</span><span class="variable">.reason</span>;</span><br><span class="line">  <span class="keyword">var</span> wasClean = <span class="keyword">event</span><span class="variable">.wasClean</span>;</span><br><span class="line">  <span class="comment">// handle close event</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="5、webSocket-onmessage"><a href="#5、webSocket-onmessage" class="headerlink" title="5、webSocket.onmessage"></a>5、webSocket.onmessage</h3><p>实例对象的<code>onmessage</code>属性，用于指定收到服务器数据后的回调函数。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = event.data;</span><br><span class="line">  <span class="comment">// 处理数据</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ws.addEventListener(<span class="string">&quot;message&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = event.data;</span><br><span class="line">  <span class="comment">// 处理数据</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意，服务器数据可能是文本，也可能是二进制数据（<code>blob</code>对象或<code>Arraybuffer</code>对象）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> event.data === <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Received data string&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(event.data <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = event.data;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Received arraybuffer&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了动态判断收到的数据类型，也可以使用<code>binaryType</code>属性，显示指定收到的二进制数据类型。</p>
<figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 收到的是 blob 数据</span></span><br><span class="line">ws.binaryType = <span class="string">&quot;blob&quot;</span>;</span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(e)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(e.data.<span class="built_in">size</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收到的是 ArrayBuffer 数据</span></span><br><span class="line">ws.binaryType = <span class="string">&quot;arraybuffer&quot;</span>;</span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(e)</span> &#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(e.data.byteLength);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="6、webSocket-send"><a href="#6、webSocket-send" class="headerlink" title="6、webSocket.send()"></a>6、webSocket.send()</h3><p>实例对象的<code>send()</code> 方法用于向服务器发送数据</p>
<p>发送文本的例子</p>
<p><code>ws.send(&#39;your message&#39;);</code></p>
<p>发送 Blob 对象的例子</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">file</span> = document.querySelector(&#x27;<span class="keyword">input</span>[<span class="keyword">type</span>=<span class="string">&quot;file&quot;</span>]&#x27;).files[0];</span><br><span class="line">ws.send(<span class="keyword">file</span>);</span><br></pre></td></tr></table></figure>

<p>发送<code>ArrayBuffer</code>对象的例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sending canvas ImageData as ArrayBuffer</span></span><br><span class="line"><span class="keyword">var</span> img = canvas_context.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">320</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">binary</span> = <span class="keyword">new</span> Uint8Array(img.data.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; img.data.length; i++) &#123;</span><br><span class="line">  <span class="keyword">binary</span>[i] = img.data[i];</span><br><span class="line">&#125;</span><br><span class="line">ws.send(<span class="keyword">binary</span>.buffer);</span><br></pre></td></tr></table></figure>

<h3 id="7、webSocket-bufferedAmount"><a href="#7、webSocket-bufferedAmount" class="headerlink" title="7、webSocket.bufferedAmount"></a>7、webSocket.bufferedAmount</h3><p>实例对象的<code>bufferedAmount</code> 属性，表示还有多少字节的二进制数据没有发送出去，他可以用来判断发送是否结束</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">data</span> = <span class="literal">new</span> ArrayBuffer(<span class="number">10000000</span>);</span><br><span class="line">socket.send(<span class="built_in">data</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (socket.bufferedAmount === <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// 发送完毕</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 发送还没结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、webSocket-onerror"><a href="#8、webSocket-onerror" class="headerlink" title="8、webSocket.onerror"></a>8、webSocket.onerror</h3><p>实现对象的<code>onerror</code> 属性，用于指定报错时的回调函数</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">socket.onerror = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// handle error event</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.addEventListener(<span class="string">&quot;error&quot;</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// handle error event</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>详细参见<a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">阮一峰 WebSocket 教程</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>css：盒模型及box-sizing</title>
    <url>/2019/10/15/css%EF%BC%9A%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%8F%8Abox-sizing/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<img src="https://github.com/chajianyuan/picture/blob/master/1681617070154_.pic.jpg?raw=true" width="600px" />

<a id="more"></a>

<h3 id="一、盒模型"><a href="#一、盒模型" class="headerlink" title="一、盒模型"></a>一、盒模型</h3><p><img src="https://user-gold-cdn.xitu.io/2017/10/25/9cb491d4bd5d326aeb16632280411283?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<h4 id="1、IE-盒模型（box-sizing-border-box）"><a href="#1、IE-盒模型（box-sizing-border-box）" class="headerlink" title="1、IE 盒模型（box-sizing:border-box）"></a>1、IE 盒模型（box-sizing:border-box）</h4><p>width = 2 x border + 2 x padding + content</p>
<p>height = 2 x border + 2 x padding + content</p>
<p><strong>实际盒子宽度 = width</strong></p>
<h4 id="2、标准盒模型（box-sizing-content-box）"><a href="#2、标准盒模型（box-sizing-content-box）" class="headerlink" title="2、标准盒模型（box-sizing:content-box）"></a>2、标准盒模型（box-sizing:content-box）</h4><p>width = content</p>
<p>height = content</p>
<p><strong>实际盒子宽度 = width + 2 x padding + 2 x border</strong></p>
<h3 id="二、box-sizing"><a href="#二、box-sizing" class="headerlink" title="二、box-sizing"></a>二、box-sizing</h3><p>css3新增属性，<code>box-sizing: content-box | border-box</code>用来设置标准模型和IE模型</p>
<h3 id="三、外边距重叠"><a href="#三、外边距重叠" class="headerlink" title="三、外边距重叠"></a>三、外边距重叠</h3><p>当两个外边距相遇时，会形成一个外边距，合并后的外边距高度等于合并前两个外边距最大的那一个</p>
<blockquote>
<p>⚠️ 只有普通文档流中块级元素的<strong>垂直外边距</strong>才会发生合并。</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>html：行内元素、行内块级元素、块级元素</title>
    <url>/2019/10/15/html%EF%BC%9A%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E3%80%81%E8%A1%8C%E5%86%85%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E3%80%81%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、行内元素"><a href="#一、行内元素" class="headerlink" title="一、行内元素"></a>一、行内元素</h2><p>可以通过<code>display: inline</code>设置</p>
<a id="more"></a>

<p><strong>特点</strong></p>
<ol>
<li>设置宽高无效</li>
<li>对 margin 仅设置左右有效，设置 padding 有效，即会撑大空间</li>
<li>不会自动换行</li>
</ol>
<p><strong>举例</strong></p>
<p>&lt; span &gt;、&lt; b &gt;、&lt; i &gt;、&lt; a &gt;、&lt; sub &gt;、&lt; sup &gt;、&lt; br &gt;</p>
<h2 id="二、行内块级元素"><a href="#二、行内块级元素" class="headerlink" title="二、行内块级元素"></a>二、行内块级元素</h2><p>可以通过<code>display: inline-block</code>设置</p>
<p><strong>特点</strong></p>
<ol>
<li>可以设置宽高</li>
<li>设置 margin、padding 都有效</li>
<li>不自动换行，默认排序从左到右</li>
</ol>
<p><strong>举例</strong></p>
<p>&lt; img &gt;、&lt; input &gt;、&lt; td &gt;</p>
<h2 id="三、块级元素"><a href="#三、块级元素" class="headerlink" title="三、块级元素"></a>三、块级元素</h2><p>可以通过<code>display: block</code>设置</p>
<p><strong>特点</strong></p>
<ol>
<li>可以设置宽高</li>
<li>设置 margin、padding 都有效</li>
<li>能自动换行，多个块级元素写在一起默认从上到下</li>
</ol>
<p><strong>举例</strong></p>
<p>&lt; p &gt;、&lt; div &gt;、&lt; ul &gt;、&lt; li &gt;、&lt; h1 &gt;-&lt; h6 &gt;、&lt; ol &gt;</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>mac：macbook蓝牙不可用问题</title>
    <url>/2021/04/14/mac%EF%BC%9Amacbook%E8%93%9D%E7%89%99%E4%B8%8D%E5%8F%AF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>突然发现mac电脑的蓝牙打不开了，按理说百分之八十的问题，都可以使用重启电脑来解决，可是这次不管用了😭</p>
<p>各方百度，终于找到了解决办法</p>
<ol>
<li><p>拔掉所有usb设备</p>
</li>
<li><p>关机</p>
</li>
<li><p>同时按[shift+control+command+开机键]6秒</p>
</li>
<li><p>再按[command+option+p+r+开机键]直到开机</p>
</li>
</ol>
<p>万能的百度啊😄，再次感谢百度🙏<a href="https://jingyan.baidu.com/article/fedf0737e4368735ac8977f5.html">奉献上参考地址</a></p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>react：setState</title>
    <url>/2021/03/28/react%EF%BC%9AsetState/</url>
    <content><![CDATA[<img src="https://github.com/chajianyuan/picture/blob/master/1671616928038_.pic.jpg?raw=true" width="600px" />

<a id="more"></a>

<h3 id="一、setState的执行过程"><a href="#一、setState的执行过程" class="headerlink" title="一、setState的执行过程"></a>一、setState的执行过程</h3><p><img src="https://user-gold-cdn.xitu.io/2019/2/23/169197bbdc7ae14e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<p>简单描述：</p>
<ol>
<li>将<code>setState</code>传入<code>partialState</code>参数存储在当前组件实例的state暂存队列中；</li>
<li>判断当前React是否处于批量更新状态，如果是，将当前组件加入待更新的组件队列中；</li>
<li>如果未处于批量更新状态，将批量更新状态标识设置为<code>true</code>，用事务再次调用上一步方法，保证当前组件加入了待更新组件队列中；</li>
<li>调用事务的<code>waper</code>方法，遍历待更新组件队列依次执行更新；</li>
<li>执行生命周期<code>componentWillReceiveProps</code>；</li>
<li>将组件的state暂存队列中的<code>state</code>进行合并，获得最终要更新的state对象，并将队列置为空；</li>
<li>执行生命周期<code>componentShouldUpdate</code>，更具返回值判断是否要继续更新；</li>
<li>执行生命周期<code>componentWillUpdate</code>；</li>
<li>执行真正的更新<code>render</code>；</li>
<li>执行生命周期<code>componentDidUpdate</code>。</li>
</ol>
<h3 id="二、setState是同步还是异步"><a href="#二、setState是同步还是异步" class="headerlink" title="二、setState是同步还是异步"></a>二、setState是同步还是异步</h3><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">class Route extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.<span class="keyword">state</span> = &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.<span class="built_in">set</span>State(&#123;count: this.<span class="keyword">state</span>.count + <span class="number">1</span>&#125;);</span><br><span class="line">    console.<span class="keyword">log</span>(this.<span class="keyword">state</span>.count);  // 打印 -&gt; <span class="number">0</span></span><br><span class="line">    this.<span class="built_in">set</span>State(&#123;count: this.<span class="keyword">state</span>.count + <span class="number">1</span>&#125;);</span><br><span class="line">    console.<span class="keyword">log</span>(this.<span class="keyword">state</span>.count);  // 打印 -&gt; <span class="number">0</span></span><br><span class="line">    <span class="built_in">set</span>Timeout(() =&gt; &#123;</span><br><span class="line">      this.<span class="built_in">set</span>State(&#123;count: this.<span class="keyword">state</span>.count + <span class="number">1</span>&#125;);</span><br><span class="line">      console.<span class="keyword">log</span>(this.<span class="keyword">state</span>.count);  // 打印 -&gt; <span class="number">1</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">set</span>Timeout(() =&gt; &#123;</span><br><span class="line">      this.<span class="built_in">set</span>State(&#123;count: this.<span class="keyword">state</span>.count + <span class="number">1</span>&#125;);</span><br><span class="line">      console.<span class="keyword">log</span>(this.<span class="keyword">state</span>.count);  // 打印 -&gt; <span class="number">2</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return <span class="variable">&lt;div&gt;</span>&#123;this.<span class="keyword">state</span>.count&#125;&lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结论可能是异步更新</p>
</blockquote>
<blockquote>
<p>setTimeout\自定义dom事件中是同步更新的<br>普通使用是异步更新的</p>
</blockquote>
<p><a href="https://juejin.cn/post/6844903781813993486">参考：【React深入】setState的执行机制</a></p>
]]></content>
  </entry>
  <entry>
    <title>react: useEffect</title>
    <url>/2020/10/27/react%EF%BC%9AuseEffect/</url>
    <content><![CDATA[<p>本文是在学习<a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/">useEffect完整指南</a>中做的笔记，记录自己不理解的地方以及学到的知识。</p>
<h3 id="🍀-每一次渲染都有它自己的Props和State"><a href="#🍀-每一次渲染都有它自己的Props和State" class="headerlink" title="🍀 每一次渲染都有它自己的Props和State"></a>🍀 每一次渲染都有它自己的Props和State</h3><h3 id="🍀-每一次渲染都有它自己的事件处理函数"><a href="#🍀-每一次渲染都有它自己的事件处理函数" class="headerlink" title="🍀 每一次渲染都有它自己的事件处理函数"></a>🍀 每一次渲染都有它自己的事件处理函数</h3><a id="more"></a>

<h3 id="🍀-每一次渲染都有它自己的Effects"><a href="#🍀-每一次渲染都有它自己的Effects" class="headerlink" title="🍀 每一次渲染都有它自己的Effects"></a>🍀 每一次渲染都有它自己的Effects</h3><p>每一个组件内的函数（包括事件处理函数，effects，定时器或者API调用等等）都会捕捉某次渲染中定义的props和state。</p>
<p>React会根据我们当前的props和state同步到DOM。</p>
<p>useEffect使你能够根据props和state同步React tree之外的东西。</p>
<p>useEffect中的依赖项用来告诉React去对比你的Effects。</p>
<h3 id="🍀-关于依赖项不要对React撒谎"><a href="#🍀-关于依赖项不要对React撒谎" class="headerlink" title="🍀 关于依赖项不要对React撒谎"></a>🍀 关于依赖项不要对React撒谎</h3><ul>
<li><p>诚实告知依赖</p>
<ul>
<li><p>在依赖中包含所有effect中用到的组件内的值。</p>
</li>
<li><p>修改effect内部的代码，以确保它包含的值只会在需要的时候发生变更。</p>
</li>
</ul>
</li>
</ul>
<h3 id="🍀-函数式更新"><a href="#🍀-函数式更新" class="headerlink" title="🍀 函数式更新"></a>🍀 函数式更新</h3><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    const id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(id);</span><br><span class="line">  &#125;, []);</span><br></pre></td></tr></table></figure>

<p>例如用<code>setCount(c =&gt; c + 1)</code> 代替  <code>setCount(count+1)</code>, 在effect中传递最小的信息</p>
<h3 id="🍀-解耦来自Actions的更新"><a href="#🍀-解耦来自Actions的更新" class="headerlink" title="🍀 解耦来自Actions的更新"></a>🍀 解耦来自Actions的更新</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [step, setStep] = useState(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + step);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id);</span><br><span class="line">  &#125;, [step]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;input value=&#123;step&#125; onChange=&#123;<span class="function"><span class="params">e</span> =&gt;</span> setStep(<span class="built_in">Number</span>(e.target.value))&#125; /&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当你想更新一个状态，并且这个状态更新依赖于另一个状态的值时，你可能需要使用<code>useReducer</code>去替换它们。</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [<span class="keyword">state</span>, dispatch] = useReducer(reducer, initialState);</span><br><span class="line"><span class="keyword">const</span> &#123; count, step &#125; = <span class="keyword">state</span>;</span><br><span class="line"></span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">set</span>Interval(() =&gt; &#123;</span><br><span class="line">    dispatch(&#123; type: &#x27;tick&#x27; &#125;); // Instead of <span class="built_in">set</span>Count(c =&gt; c + step);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  return () =&gt; clearInterval(id);</span><br><span class="line">&#125;, [dispatch]);</span><br></pre></td></tr></table></figure>

<p>React会保证<code>dispatch</code>在组件的生命周期内保持不变。</p>
]]></content>
      <categories>
        <category>阅读笔记</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react：受控组件 VS 非受控组件</title>
    <url>/2021/06/04/react%EF%BC%9A%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%20VS%20%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h4 id="一、非受控组件"><a href="#一、非受控组件" class="headerlink" title="一、非受控组件"></a>一、非受控组件</h4><ol>
<li><p>必须手动操作DOM元素</p>
</li>
<li><p>无法使用setState</p>
</li>
<li><p>举个 🌰</p>
<ul>
<li><p>ref</p>
</li>
<li><p>defaultValue defaultChecked</p>
</li>
<li><p>文件上传<code>&lt;input type=&quot;file&quot; /&gt;</code></p>
</li>
<li><p>某些富文本编辑器，需要传入DOM元素</p>
</li>
<li><p><code>&lt;input defaultValue=&quot;value&quot; /&gt;</code>，如果想更新defaultValue的值，需要加一个key,<code>&lt;input defaultValue=&quot;value&quot; key=&quot;value&quot; /&gt;</code>，❓为什么加一个key，就能更新defalutValue的值了呢？</p>
</li>
</ul>
</li>
</ol>
<h4 id="二、受控组件"><a href="#二、受控组件" class="headerlink" title="二、受控组件"></a>二、受控组件</h4><ol>
<li><p>受state影响</p>
</li>
<li><p>需要自行监听onChange，更新state</p>
</li>
<li><p>无需手动操作DOM</p>
</li>
<li><p>举个 🌰</p>
<ul>
<li><p>input 标签中的value属性</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="title">extents</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      name: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange = e =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>.setstate(&#123;</span><br><span class="line">      name: e.target.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;input value=&#123;<span class="keyword">this</span>.state.name&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ol>
<h4 id="三、受控组件-vs-非受控组件"><a href="#三、受控组件-vs-非受控组件" class="headerlink" title="三、受控组件 vs 非受控组件"></a>三、受控组件 vs 非受控组件</h4><ol>
<li>优先使用受控组件，符合react设计原则</li>
<li>必须操作DOM元素，再使用非受控组件</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react：实现分页器</title>
    <url>/2021/06/01/react%EF%BC%9A%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E5%99%A8/</url>
    <content><![CDATA[<p>参照antd的Pagination组件，使用React也实现了一个类似的分页器。</p>
<p>效果如下：</p>
<p><img src="https://raw.githubusercontent.com/chajianyuan/picture/4485ac08d26158c067207500c5dee0bcfcb53378/Kapture%202021-06-02%20at%2014.50.17.gif"></p>
<a id="more"></a>

<p>具体参见代码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;useEffect, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> cx <span class="keyword">from</span> <span class="string">&#x27;classnames&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Pagination = <span class="function">(<span class="params">&#123;allPage, currentPage, handleSearch, loading&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> MORETXT = <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> MAX_PAGE = <span class="number">7</span>; <span class="comment">// 最多展示的分页器个数，建议为奇数，保证分页器的对称</span></span><br><span class="line">  <span class="keyword">const</span> MINMORE = <span class="number">2</span>; <span class="comment">// 第一个...的位置</span></span><br><span class="line">  <span class="keyword">const</span> MAXMORE = <span class="number">6</span>; <span class="comment">// 最后一个...的位置</span></span><br><span class="line">  <span class="keyword">const</span> INTERTALS = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">const</span> [nums, setNums] = useState([]); <span class="comment">// 显示的页码数组</span></span><br><span class="line">  <span class="keyword">const</span> [current, setCurrent] = useState(currentPage);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    changePage(allPage, currentPage);</span><br><span class="line">  &#125;, [allPage, currentPage]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> changePage = <span class="function">(<span class="params">total, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> numsRes = drawPage(total, cur);</span><br><span class="line">    setCurrent(cur);</span><br><span class="line">    setNums(numsRes);</span><br><span class="line">    handleSearch(cur);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 改变分页器中的内容</span></span><br><span class="line"><span class="comment">   * @param &#123;number&#125; total</span></span><br><span class="line"><span class="comment">   * @param &#123;number&#125; cur</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> drawPage = <span class="function">(<span class="params">total, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = MAX_PAGE - <span class="number">2</span>; <span class="comment">// 可显示页码数 =  页码个数 - 首页 - 尾页</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pagesNum = []; <span class="comment">// 显示页码数组</span></span><br><span class="line">    <span class="keyword">if</span> (total &lt;= MAX_PAGE) &#123; <span class="comment">// 如果当前总页数 &lt;= MAX_PAGE，则直接将当前总页数转成数组</span></span><br><span class="line">      pagesNum = [...Array(total).keys()].map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> pagesNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前总页数 &gt; MAX_PAGE，则需要分为三种情况</span></span><br><span class="line">    <span class="comment">// 1. 当前页码离首页稍近的时候，尾部显示省略号</span></span><br><span class="line">    <span class="keyword">if</span> (cur &lt;= <span class="built_in">Math</span>.ceil(temp / <span class="number">2</span>)) &#123;</span><br><span class="line">      pagesNum = [...Array(temp).keys()].map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>); <span class="comment">// 除省略号和尾页之外的数字</span></span><br><span class="line">      pagesNum = [...pagesNum, MORETXT, total];</span><br><span class="line">      <span class="keyword">return</span> pagesNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.当前页码离尾页稍近的时候，头部显示省略号</span></span><br><span class="line">    <span class="keyword">if</span> (cur &gt;= total - <span class="built_in">Math</span>.floor(temp / <span class="number">2</span>)) &#123;</span><br><span class="line">      pagesNum = [...Array(temp).keys()].map(<span class="function"><span class="params">item</span> =&gt;</span> total - item); <span class="comment">// 除省略号和首页之外的数字</span></span><br><span class="line">      pagesNum = [<span class="number">1</span>, MORETXT, ...pagesNum.reverse()]; <span class="comment">// 上一步拿到的pagesNum是倒序的，所以需要反转一下</span></span><br><span class="line">      <span class="keyword">return</span> pagesNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 以上情况都不成立，则显示两个省略号</span></span><br><span class="line">    pagesNum = around(total, cur);</span><br><span class="line">    <span class="keyword">return</span> pagesNum;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理两边都有省略号的情况</span></span><br><span class="line"><span class="comment">   * @param &#123;array&#125; total</span></span><br><span class="line"><span class="comment">   * @param &#123;number&#125; curPage</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> around = <span class="function">(<span class="params">total, curPage</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> side = (MAX_PAGE - <span class="number">5</span>) / <span class="number">2</span>; <span class="comment">// 5 = 首 + 省略号 + curPage + 省略号 + 尾</span></span><br><span class="line">    <span class="keyword">const</span> leftArr = [...Array(curPage).keys()].reverse().slice(<span class="number">0</span>, side); <span class="comment">// curPage左边的数组</span></span><br><span class="line">    <span class="keyword">const</span> rightArr = [...Array(total).keys()].slice(curPage + <span class="number">1</span>, curPage + side + <span class="number">1</span>); <span class="comment">// curPage右边的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> pagesNum = [<span class="number">1</span>, MORETXT, ...leftArr, curPage, ...rightArr, MORETXT, allPage];</span><br><span class="line">    <span class="keyword">return</span> pagesNum;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (loading) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果是...，则分两种情况</span></span><br><span class="line"><span class="comment">     * 1. 向前更多时，将num设置成当前中间数字向前两个</span></span><br><span class="line"><span class="comment">     * 2. 向前更多时，将num设置成当前中间数字向后两个</span></span><br><span class="line"><span class="comment">     * 需要注意，不要超过边界值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> isMoreTxt = item === MORETXT;</span><br><span class="line">    <span class="keyword">let</span> num = isMoreTxt ? <span class="number">0</span> : <span class="built_in">parseInt</span>(item, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (isMoreTxt) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index + <span class="number">1</span> === MINMORE) &#123; <span class="comment">// 是否是第一个...</span></span><br><span class="line">        num = current - INTERTALS &lt; <span class="number">1</span> ? <span class="number">1</span> : current - INTERTALS;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (index + <span class="number">1</span> === MAXMORE) &#123; <span class="comment">// 是否是第二个...</span></span><br><span class="line">        num = current + INTERTALS &gt; allPage ? allPage : current + INTERTALS;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    changePage(allPage, num);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul className=<span class="string">&quot;pagination&quot;</span>&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        nums.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> isMore = item === MORETXT;</span><br><span class="line">          <span class="keyword">const</span> isChoosed = item === current;</span><br><span class="line">          <span class="keyword">return</span> &lt;li key=&#123;index&#125;</span><br><span class="line">            className=&#123;cx(<span class="string">&#x27;page-change&#x27;</span>, &#123;choosed: isChoosed, <span class="string">&#x27;page-more&#x27;</span>: isMore&#125;)&#125;</span><br><span class="line">            onClick=&#123;<span class="function">() =&gt;</span> handleClick(item, index)&#125;&gt;</span><br><span class="line">            &#123;item&#125;</span><br><span class="line">          &lt;/li&gt;;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Pagination;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react：有状态组件和无状态组件</title>
    <url>/2020/02/11/react%EF%BC%9A%E6%9C%89%E7%8A%B6%E6%80%81%E7%BB%84%E4%BB%B6%E5%92%8C%E6%97%A0%E7%8A%B6%E6%80%81%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h3 id="一、React-中创建组件的方式"><a href="#一、React-中创建组件的方式" class="headerlink" title="一、React 中创建组件的方式"></a>一、React 中创建组件的方式</h3><h4 id="1、ES5：React-createClass"><a href="#1、ES5：React-createClass" class="headerlink" title="1、ES5：React.createClass"></a>1、ES5：React.createClass</h4><a id="more"></a>

<h4 id="2、ES6：React-Component"><a href="#2、ES6：React-Component" class="headerlink" title="2、ES6：React.Component"></a>2、ES6：React.Component</h4><h4 id="3、无状态函数"><a href="#3、无状态函数" class="headerlink" title="3、无状态函数"></a>3、无状态函数</h4><h3 id="一、有状态组件"><a href="#一、有状态组件" class="headerlink" title="一、有状态组件"></a>一、有状态组件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      name: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">  	<span class="keyword">const</span> &#123;name&#125; = <span class="built_in">this</span>.state;</span><br><span class="line">  	<span class="keyword">const</span> &#123;title&#125; = <span class="built_in">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;name&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;title&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> A;</span><br></pre></td></tr></table></figure>

<h3 id="二、无状态组件"><a href="#二、无状态组件" class="headerlink" title="二、无状态组件"></a>二、无状态组件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> B = <span class="function">(<span class="params">props</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123;title&#125; = props;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">     &lt;div&gt;</span><br><span class="line">       &lt;div&gt;&#123;name&#125;&lt;/div&gt;</span><br><span class="line">       &lt;div&gt;&#123;title&#125;&lt;/div&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> B;</span><br></pre></td></tr></table></figure>

<p>无状态组件主要用来定义模板，接收来自父组件 props 传递过来的数据。</p>
<p>无状态组件应该保持模板的纯粹性，以便组件的复用。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp：APP实现定位</title>
    <url>/2019/05/12/uniapp%EF%BC%9AAPP%E5%AE%9E%E7%8E%B0%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h3 id="使用高德地图定位"><a href="#使用高德地图定位" class="headerlink" title="使用高德地图定位"></a>使用高德地图定位</h3><h4 id="1、先去高德地图-API中申请-key-值"><a href="#1、先去高德地图-API中申请-key-值" class="headerlink" title="1、先去高德地图 API中申请 key 值"></a>1、先去<a href="https://lbs.amap.com/dev/key/app">高德地图 API</a>中申请 key 值</h4><p><img src="https://github.com/cjy1/picture/blob/master/1.png?raw=true"></p>
<a id="more"></a>

<p>如何获取 SHA1 指纹？</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> .android</span><br><span class="line">keytool -<span class="keyword">list</span> -v -keystore <span class="keyword">debug</span>.keystore</span><br></pre></td></tr></table></figure>

<p>如果出现如下错误<br><img src="https://github.com/cjy1/picture/blob/master/2.png?raw=true"><br>去本地的 jdk 安装目录中的 bin 目录下可以发现 keytool.exe<br><img src="https://github.com/cjy1/picture/blob/master/3.png?raw=true"><br>用命令符输入</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">keytool</span><span class="selector-class">.exe</span> <span class="selector-tag">-list</span> <span class="selector-tag">-keystore</span> <span class="selector-tag">C</span>:\<span class="selector-tag">Users</span>\<span class="selector-tag">cjy</span><span class="selector-class">.android</span>\<span class="selector-tag">debug</span><span class="selector-class">.keystore</span></span><br></pre></td></tr></table></figure>

<p>密钥库口令默认为 android<br><img src="https://github.com/cjy1/picture/blob/master/4.png?raw=true"></p>
<h4 id="2、下载Android-定位-SDK"><a href="#2、下载Android-定位-SDK" class="headerlink" title="2、下载Android 定位 SDK"></a>2、下载<a href="https://lbs.amap.com/api/android-location-sdk/download">Android 定位 SDK</a></h4><p>在代码中引入 SDK 文件</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> amapFile <span class="keyword">from</span> <span class="string">&#x27;../../utils/amap-wx.js&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3、在代码中编写"><a href="#3、在代码中编写" class="headerlink" title="3、在代码中编写"></a>3、在代码中编写</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myAmapFun = <span class="keyword">new</span> amapFile.AMapWX(&#123; <span class="attr">key</span>: <span class="string">&#x27;在步骤1中拿到的key值&#x27;</span> &#125;);</span><br><span class="line">myAmapFun.getRegeo(&#123;</span><br><span class="line">  success: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//成功回调</span></span><br><span class="line">    <span class="built_in">this</span>.address = data[<span class="number">0</span>];</span><br><span class="line">  fail: <span class="function"><span class="params">info</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//失败回调</span></span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(info));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>uniapp</tag>
      </tags>
  </entry>
  <entry>
    <title>JS：闭包</title>
    <url>/2021/03/24/JS%EF%BC%9A%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<img src="https://github.com/chajianyuan/picture/blob/master/1641616548534_.pic.jpg?raw=true" width="600px" />

<a id="more"></a>

<h4 id="MDN对闭包的定义"><a href="#MDN对闭包的定义" class="headerlink" title="MDN对闭包的定义"></a>MDN对闭包的定义</h4><blockquote>
<p>闭包是指那些能够访问自由变量的函数。</p>
</blockquote>
<p>❓<strong>自由变量是什么？</strong></p>
<blockquote>
<p>自由变量是指能够在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。</p>
</blockquote>
<p>对于闭包，我的理解就是当某个函数 A 被调用时，这个函数 A 可以访问它定义时的作用域中的变量。</p>
<p>使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染；缺点是闭包会常驻内存，增加内存使用量，使用不当很容易造成内存泄漏。在 JavaScript 中，函数即闭包，只有函数才会产生作用域。</p>
<p>闭包有 3 个特性：</p>
<ol>
<li>函数嵌套函数；</li>
<li>在函数内部可以引用外部的参数和变量；</li>
<li>参数和变量不会以垃圾回收机制回收。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://segmentfault.com/a/1190000006875662">JavaScript 闭包</a></p>
]]></content>
  </entry>
  <entry>
    <title>vue：vue版本之间的区别</title>
    <url>/2020/03/27/vue%EF%BC%9Avue%E7%89%88%E6%9C%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p><img src="https://pic3.zhimg.com/80/v2-120c6f2e62e740210a77ab3c87d65c0e_1440w.jpg"></p>
<a id="more"></a>

<ul>
<li><p>运行时版本 vue.runtime.js</p>
<ul>
<li><p>不支持从 html 获取视图；</p>
</li>
<li><p>不支持 template，需要通过 webpack 的工具 vue-loader 将组件，预编译 template 模板为 render 函数；</p>
</li>
<li><p>没有 complier 编译器，因此代码体积会比完整版小 40%，html 转化成节点。</p>
<p><code>&lt;script src=&quot;https://cdn.bootcss.com/vue/2.6.9/vue.runtime.min.js&quot;&gt;&lt;/script&gt;</code></p>
</li>
</ul>
</li>
<li><p>完整版 vue.js</p>
<ul>
<li>支持从 html 获取视图；</li>
<li>支持 template；</li>
<li>有 complier 编译器，而 complier 可以将字符串<br><code>&lt;script src=&quot;https://cdn.bootcss.com/vue/2.6.10/vue.min.js&quot;&gt;&lt;/script&gt;</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue：单页面和多页面的区别</title>
    <url>/2019/10/18/vue%EF%BC%9A%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%92%8C%E5%A4%9A%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p><img src="https://user-gold-cdn.xitu.io/2019/6/13/16b51814c9cab135?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<a id="more"></a>

<h2 id="一、单页应用-SPA"><a href="#一、单页应用-SPA" class="headerlink" title="一、单页应用(SPA)"></a>一、单页应用(SPA)</h2><p>单页面应用就是只有一个主页面的应用，浏览器一开始就要加载所有必须的 html、css、js，所有的页面内容都包含在这个所谓的主页面中，但在写的时候，还是会分开写，对每一个功能模块组件化，单页应用跳转，就是切换相关组件，仅刷新局部资源</p>
<p><strong>优点：</strong></p>
<ul>
<li>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；</li>
<li>基于上面一点，SPA 相对对服务器压力小；</li>
<li>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；</li>
<li>前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；</li>
<li>SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。</li>
</ul>
<h2 id="二、多页应用-MPA"><a href="#二、多页应用-MPA" class="headerlink" title="二、多页应用(MPA)"></a>二、多页应用(MPA)</h2><p>多页应用指多个独立的页面的应用，每个页面都必须重复加载 js、css 等相关资源。多页面应用跳转，需要整页资源刷新</p>
<h2 id="三、两者对比"><a href="#三、两者对比" class="headerlink" title="三、两者对比"></a>三、两者对比</h2><table>
<thead>
<tr>
<th>对比项/模式</th>
<th>SPA</th>
<th>MPA</th>
</tr>
</thead>
<tbody><tr>
<td>结构</td>
<td>一个主页面+许多模块的组件</td>
<td>许多完整的页面</td>
</tr>
<tr>
<td>体验</td>
<td>页面切换快，体验佳；当初次加载文件过多时，需要做相关的优化</td>
<td>页面切换快，网速慢的时候，体验尤其不好</td>
</tr>
<tr>
<td>资源文件</td>
<td>组件公用的资源只需要加载一次</td>
<td>每个页面都要自己加载公用的资源</td>
</tr>
<tr>
<td>适用场景</td>
<td>对体验度和流畅度有较高要求的应用，不利于 SEO（可借助 SSR 来优化 SEO）</td>
<td>适用于对 SEO 要求较高的应用</td>
</tr>
<tr>
<td>过渡动画</td>
<td>Vue 提供了 transition 的封装组件，容易实现</td>
<td>很难实现</td>
</tr>
<tr>
<td>内容更新</td>
<td>相关组件的切换，即局部更新</td>
<td>整体 HTML 的切换，费钱（重复 HTTP 请求）</td>
</tr>
<tr>
<td>路由模式</td>
<td>可以使用 hash，history</td>
<td>普通链接跳转</td>
</tr>
<tr>
<td>数据传递</td>
<td>因为单页面，使用全局变量就好（Vuex）</td>
<td>cookie、localStorage 等缓存方案，URL 参数，调用接口保存等</td>
</tr>
<tr>
<td>相关成本</td>
<td>前期开发成本较高，后期维护较为容易</td>
<td>前期开发成本低，后期维护就比较麻烦，因为可能一个功能需要改很多地方</td>
</tr>
</tbody></table>
<h2 id="四、单页应用实现–前端路由"><a href="#四、单页应用实现–前端路由" class="headerlink" title="四、单页应用实现–前端路由"></a>四、单页应用实现–前端路由</h2><h3 id="1、hash"><a href="#1、hash" class="headerlink" title="1、hash"></a>1、hash</h3><p>早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 ‘#search’：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.word.com<span class="comment">#search</span></span><br></pre></td></tr></table></figure>

<p>hash 路由模式的实现主要是基于下面几个特性：</p>
<ul>
<li>URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；</li>
<li>hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制 hash 的切换；</li>
<li>可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用 JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；</li>
<li>我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。</li>
</ul>
<h3 id="2、history"><a href="#2、history" class="headerlink" title="2、history"></a>2、history</h3><p>HTML5 提供了 History API 来实现 URL 的变化。其中做最主要的 API 有以下两个：history.pushState() 和 history.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">window</span>.history.pushState(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="type">path</span>);</span><br><span class="line"><span class="keyword">window</span>.history.replaceState(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="type">path</span>);</span><br></pre></td></tr></table></figure>

<p>history 路由模式的实现主要基于存在下面几个特性：</p>
<ul>
<li>pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；</li>
<li>我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；</li>
<li>history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue：双向绑定</title>
    <url>/2019/10/19/vue%EF%BC%9A%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、Vue-双向数据绑定"><a href="#一、Vue-双向数据绑定" class="headerlink" title="一、Vue 双向数据绑定"></a>一、Vue 双向数据绑定</h2><p><img src="https://upload-images.jianshu.io/upload_images/8560482-d18d5fe20c1ade5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/730/format/webp"></p>
<a id="more"></a>

<p>vue 双向数据绑定是通过数据劫持和订阅者-发布者模式实现的</p>
<ol>
<li>实现一个监听器 Observer：对数据进行遍历，包括子属性对象的属性，利用 Object.defineProperty()或 Proxy 对属性都加上 setter 和 getter。这样给这个对象的某个值赋值，就会触发 setter，就能监听到了数据变化；</li>
<li>实现一个解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新；</li>
<li>实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数</li>
<li>实现一个订阅器 Dep：订阅器采用发布-订阅设计模式，用来收集订阅者 Watcher，对监听器 Observer 和订阅者 Watcher 进行统一管理</li>
</ol>
<p><strong>注意：</strong> Object.defineProperty()对数据进行劫持，但是 Object.defineProperty()只能对属性进行数据劫持，不能对整个对象进行劫持，同理无法对数组进行劫持，所以 Vue 框架是通过遍历数组的递归遍历对象，从而达到利用 Object.defineProperty()也能对对象和数组（部分方法的操作）进行监听。</p>
<p><strong>代码实现：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-bind</span>=<span class="string">&quot;number&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;count&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-click</span>=<span class="string">&quot;incre&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-bind</span>=<span class="string">&quot;count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">myVue</span>(<span class="params">options</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>._init();</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  myVue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$options = options;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$data = options.data;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$methods = options.methods;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>._binding = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>._obverse(<span class="built_in">this</span>.$data);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>._complie(<span class="built_in">this</span>.$el);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  myVue.prototype._obverse = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span></span><br><span class="line">      if (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">        _this._binding[key] = &#123;</span><br><span class="line">          _directives: []</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(_this._binding[key])</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> value = obj[key];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) &#123;</span></span><br><span class="line">          _this._obverse(value);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> binding = _this._binding[key];</span></span><br><span class="line"><span class="javascript">        <span class="built_in">Object</span>.defineProperty(_this.$data, key, &#123;</span></span><br><span class="line"><span class="javascript">          enumerable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          configurable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>获取<span class="subst">$&#123;value&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> value;</span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="javascript">          set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>更新<span class="subst">$&#123;newVal&#125;</span>`</span>);</span></span><br><span class="line">            if (value !== newVal) &#123;</span><br><span class="line">              value = newVal;</span><br><span class="line"><span class="javascript">              binding._directives.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span></span><br><span class="line">                item.update();</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  myVue.prototype._complie = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> nodes = root.children;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> node = nodes[i];</span></span><br><span class="line">      if (node.children.length) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>._complie(node);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">&#x27;v-click&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">        node.onclick = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> attrVal = nodes[i].getAttribute(<span class="string">&#x27;v-click&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> _this.$methods[attrVal].bind(_this.$data);</span></span><br><span class="line">        &#125;)();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">&#x27;v-model&#x27;</span>) &amp;&amp; (node.tagName = <span class="string">&#x27;INPUT&#x27;</span> || node.tagName == <span class="string">&#x27;TEXTAREA&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">        node.addEventListener(<span class="string">&#x27;input&#x27;</span>, (<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> attrVal = node.getAttribute(<span class="string">&#x27;v-model&#x27;</span>);</span></span><br><span class="line"><span class="javascript">          _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(</span></span><br><span class="line"><span class="javascript">            <span class="string">&#x27;input&#x27;</span>,</span></span><br><span class="line">            node,</span><br><span class="line">            _this,</span><br><span class="line">            attrVal,</span><br><span class="line"><span class="javascript">            <span class="string">&#x27;value&#x27;</span></span></span><br><span class="line">          ))</span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            _this.$data[attrVal] =  nodes[key].value;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)(i));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (node.hasAttribute(<span class="string">&#x27;v-bind&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> attrVal = node.getAttribute(<span class="string">&#x27;v-bind&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(</span></span><br><span class="line"><span class="javascript">          <span class="string">&#x27;text&#x27;</span>,</span></span><br><span class="line">          node,</span><br><span class="line">          _this,</span><br><span class="line">          attrVal,</span><br><span class="line"><span class="javascript">          <span class="string">&#x27;innerHTML&#x27;</span></span></span><br><span class="line">        ))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">name, el, vm, exp, attr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.name = name;         <span class="comment">//指令名称，例如文本节点，该值设为&quot;text&quot;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.el = el;             <span class="comment">//指令对应的DOM元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.vm = vm;             <span class="comment">//指令所属myVue实例</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.exp = exp;           <span class="comment">//指令对应的值，本例如&quot;number&quot;</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.attr = attr;         <span class="comment">//绑定的属性值，本例为&quot;innerHTML&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.update();</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  Watcher.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.el[<span class="built_in">this</span>.attr] = <span class="built_in">this</span>.vm.$data[<span class="built_in">this</span>.exp];</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> myVue(&#123;</span></span><br><span class="line"><span class="javascript">      el:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        number: 0,</span><br><span class="line">        count: 0,</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.number ++;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        incre: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.count ++;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://user-gold-cdn.xitu.io/2018/4/10/162ad3d5beb544b6?imageslim"></p>
<h2 id="二、Proxy-和-Object-defineProperty-优劣势对比"><a href="#二、Proxy-和-Object-defineProperty-优劣势对比" class="headerlink" title="二、Proxy 和 Object.defineProperty 优劣势对比"></a>二、Proxy 和 Object.defineProperty 优劣势对比</h2><h3 id="1、Proxy-优势"><a href="#1、Proxy-优势" class="headerlink" title="1、Proxy 优势"></a>1、Proxy 优势</h3><ul>
<li>Proxy 可以直接监听对象而非属性；</li>
<li>Proxy 可以直接监听数组的变化；</li>
<li>Proxy 有多达 13 种拦截方法，不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；</li>
<li>Proxy 返回的是一个新对象，我们可以只操作新的对象达到目的，而 Object.defineProperty()只能遍历对象属性直接修改；</li>
<li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利</li>
</ul>
<h3 id="2、Object-defineProperty-优势"><a href="#2、Object-defineProperty-优势" class="headerlink" title="2、Object.defineProperty()优势"></a>2、Object.defineProperty()优势</h3><ul>
<li>兼容性好，支持 IE9，而 Proxy 存在浏览器兼容性问题，而且无法用 polyfill 磨平，因此要在 vue3.0 才能用 Proxy</li>
</ul>
<p><a href="https://juejin.im/post/5d229bfc5188252d707f3ac6">深入浅出 Vue 响应式原理（完整版）</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue：生命周期</title>
    <url>/2019/10/19/vue%EF%BC%9A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p><img src="https://user-gold-cdn.xitu.io/2019/8/19/16ca74f183827f46?imageslim"></p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>生命周期</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>beforeCreate</td>
<td>在实例初始化之后，数据观测（data observer）和 event/watcher 事件配置之前被调用</td>
</tr>
<tr>
<td>created</td>
<td>在实例创建完成后被立即调用。在这一步，实例已完成以下配置：数据观测（data observer），属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</td>
</tr>
<tr>
<td>beforeMount</td>
<td>在挂载开始之前被调用：相关的 render 函数首次被调用。<strong>该钩子在服务器渲染期间不被调用</strong></td>
</tr>
<tr>
<td>mounted</td>
<td>el 被创建的 vm.el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档中。</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。 <strong>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</strong></td>
</tr>
<tr>
<td>updated</td>
<td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。 当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用<a href="https://cn.vuejs.org/v2/api/#computed">计算属性</a>或 <a href="https://cn.vuejs.org/v2/api/#watch">watcher</a> 取而代之。 注意 <code>updated</code> <strong>不会</strong>承诺所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以用 <a href="https://cn.vuejs.org/v2/api/#vm-nextTick">vm.$nextTick</a> 替换掉 <code>updated</code> <strong>该钩子在服务器端渲染期间不被调用</strong></td>
</tr>
<tr>
<td>activated</td>
<td>keep-alive 组件激活时调用。 <strong>该钩子在服务器端渲染期间不被调用。</strong></td>
</tr>
<tr>
<td>deactivated</td>
<td>keep-alive 组件停用时调用。 <strong>该钩子在服务器端渲染期间不被调用。</strong></td>
</tr>
<tr>
<td>beforeDestory</td>
<td>实例销毁之前调用。在这一步，实例仍然完全可用。 <strong>该钩子在服务器端渲染期间不被调用。</strong></td>
</tr>
<tr>
<td>destoryed</td>
<td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 <strong>该钩子在服务器端渲染期间不被调用。</strong></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue：组件之间的通信</title>
    <url>/2019/08/09/vue%EF%BC%9A%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h3 id="一、父–-gt-子"><a href="#一、父–-gt-子" class="headerlink" title="一、父–&gt;子"></a>一、父–&gt;子</h3><p>父组件向子组件传递数据通过 props</p>
<a id="more"></a>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">**父组件代码**</span><br><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">header</span>-<span class="type">box</span> :title-txt=&quot;showTitleTxt&quot;&gt;&lt;/<span class="keyword">header</span>-<span class="type">box</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> <span class="keyword">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./header&#x27;</span></span><br><span class="line">    export <span class="keyword">default</span> &#123;</span><br><span class="line">        <span class="type">name</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        components: &#123;</span><br><span class="line">            <span class="string">&#x27;header-box&#x27;</span>: <span class="keyword">Header</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data () &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                showTitleTxt: <span class="string">&#x27;首页&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">**子组件代码**</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;<span class="name">thisTitleTxt</span>&#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    export default &#123;</span></span><br><span class="line"><span class="xml">        name: &#x27;header-box&#x27;,</span></span><br><span class="line"><span class="xml">        props: &#123;</span></span><br><span class="line"><span class="xml">            titleTxt: String</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">        data () &#123;</span></span><br><span class="line"><span class="xml">            return &#123;</span></span><br><span class="line"><span class="xml">                thisTitleTxt: this.titleTxt</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="二、子–-gt-父"><a href="#二、子–-gt-父" class="headerlink" title="二、子–&gt;父"></a>二、子–&gt;父</h3><p>子组件向父组件传递数据用$on和$emit</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">**父组件代码**</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">typetemplate</span> @<span class="attr">change-type</span>=<span class="string">&quot;changeType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typetemplate</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  data () </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">   return &#123;</span></span><br><span class="line"><span class="template-variable">    selectType: 0,</span></span><br><span class="line"><span class="template-variable">  &#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">  methods: </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">   changeType (type) &#123;</span></span><br><span class="line"><span class="template-variable">    this.type = type</span></span><br><span class="line"><span class="template-variable">   &#125;</span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">  components: </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">　　typetemplate</span></span><br><span class="line"><span class="template-variable">　&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">**子组件代码**</span><br><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div <span class="meta">@click</span>=<span class="string">&quot;changeData(1)&quot;</span>&gt;点击改变数据&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  data () &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">type</span></span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeData (<span class="class"><span class="keyword">type</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.<span class="keyword">type</span> = <span class="class"><span class="keyword">type</span></span></span><br><span class="line"><span class="class">      <span class="title">this</span>.<span class="title">$emit</span>(<span class="params">&#x27;change-type&#x27;, type</span>)</span></span><br><span class="line"><span class="class">   &#125;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"><span class="title">&lt;/script&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="三、兄弟之间通信"><a href="#三、兄弟之间通信" class="headerlink" title="三、兄弟之间通信"></a>三、兄弟之间通信</h3><p>使用 bus 进行通信</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">**main.js**</span><br><span class="line"><span class="keyword">let</span> bus = <span class="keyword">new</span> <span class="constructor">Vue()</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Vue</span>.</span></span>prototype.bus = bus</span><br></pre></td></tr></table></figure>

<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">**A组件**</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">header</span> @<span class="attr">click</span>=<span class="string">&quot;changeTitle&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">export default &#123;</span></span><br><span class="line"><span class="xml">    name: &#x27;header&#x27;,</span></span><br><span class="line"><span class="xml">    data () &#123;</span></span><br><span class="line"><span class="xml">        return &#123;</span></span><br><span class="line"><span class="xml">            title: &#x27;头部&#x27;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    methods: &#123;</span></span><br><span class="line"><span class="xml">        changeTitle () &#123;</span></span><br><span class="line"><span class="xml">            this.bus.$emit(&#x27;toChangeTitle&#x27;,&#x27;首页&#x27;)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">**B组件**</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">txt</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">export default &#123;</span></span><br><span class="line"><span class="xml">    name: &#x27;footer&#x27;,</span></span><br><span class="line"><span class="xml">    mounted () &#123;</span></span><br><span class="line"><span class="xml">        this.bus.$on(&#x27;toChangeTitle&#x27;, function (title) &#123;</span></span><br><span class="line"><span class="xml">            console.log(title)</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    data () &#123;</span></span><br><span class="line"><span class="xml">        return &#123;</span></span><br><span class="line"><span class="xml">            txt: &#x27;尾部&#x27;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue：组件通信</title>
    <url>/2019/10/19/vue%EF%BC%9A%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="1、props-emit（父子组件）"><a href="#1、props-emit（父子组件）" class="headerlink" title="1、props/$emit（父子组件）"></a>1、props/$emit（父子组件）</h2><a id="more"></a>

<p><strong>props</strong></p>
<p>父级：父级组件中引用子组件，并将自己 data 下面的 giveChild 数据绑定在 giveChildDate 传给子</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">myChild</span> <span class="attr">:giveChildData</span>=<span class="string">&quot;giveChild&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;isMe&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">myChild</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">data()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  return&#123;</span></span><br><span class="line"><span class="template-variable">    giveChild:&#x27;222&#x27;</span></span><br><span class="line"><span class="template-variable">  &#125;</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">components:</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  myChild</span></span><br><span class="line"><span class="template-variable">&#125;</span></span><br></pre></td></tr></table></figure>

<p>子级：通过 props 接收父级传来的数据，并将接收到的数据显示在自身模板上</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">props:</span>&#123;</span><br><span class="line"><span class="symbol">      giveChildData:</span>&#123;</span><br><span class="line"><span class="symbol">         type:</span>String</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="params">&lt;div&gt;</span>&#123;&#123;giveChildData&#125;&#125;<span class="params">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>$emit</strong></p>
<p>子级上的点击事件成功后，通过$emit 将事件和数据发射出去</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="meta">@click</span>=<span class="string">&quot;sendChildData&quot;</span>&gt;点我将子的数据传给父级&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span>()&#123;</span><br><span class="line">	<span class="keyword">return</span>&#123;</span><br><span class="line">		childData:<span class="number">111</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">	sendChildData()&#123;</span><br><span class="line">		<span class="keyword">this</span>.$emit(<span class="string">&#x27;sendChildData&#x27;</span>,<span class="keyword">this</span>.childData)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>父级接收到事件后，走自己的事件 getChildData 并进行相关处理、显示。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">&lt;myChild :giveChildData=<span class="string">&quot;giveChild&quot;</span> <span class="meta">@sendChildData</span>=<span class="string">&quot;getChildData&quot;</span>&gt;&lt;/myChild&gt;</span><br><span class="line">&lt;div&gt;这是子级传过来的数据 ——&gt; &#123;&#123;isMe&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span>()&#123;</span><br><span class="line">	<span class="keyword">return</span>&#123;</span><br><span class="line">		giveChild:<span class="string">&#x27;222&#x27;</span>,</span><br><span class="line">		isMe:<span class="string">&#x27;&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">	getChildData(<span class="keyword">data</span>)&#123;</span><br><span class="line">		<span class="keyword">this</span>.isMe = <span class="keyword">data</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">	myChild</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、ref-和-parent-children（父子）"><a href="#2、ref-和-parent-children（父子）" class="headerlink" title="2、ref 和$parent/$children（父子）"></a>2、ref 和$parent/$children（父子）</h2><ul>
<li><code>ref</code>：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</li>
<li><code>$parent</code> / <code>$children</code>：访问父 / 子实例</li>
</ul>
<p>ref 是被用来给元素或子组件注册引用信息的。引用信息将会注册在父组件的 $refs 对象上。</p>
<p>父组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;../components/child.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;Child&#125;,</span><br><span class="line"><span class="javascript">  mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log( <span class="built_in">this</span>.$refs.msg);</span></span><br><span class="line"><span class="javascript">   <span class="built_in">this</span>.$refs.msg.getMessage(<span class="string">&#x27;我是子组件一！&#x27;</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子组件</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">message</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"> export default &#123;</span></span><br><span class="line"><span class="xml">  data()&#123;</span></span><br><span class="line"><span class="xml">   return&#123;</span></span><br><span class="line"><span class="xml">    message:&#x27;&#x27;</span></span><br><span class="line"><span class="xml">   &#125;</span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">  methods:&#123;</span></span><br><span class="line"><span class="xml">   getMessage(m)&#123;</span></span><br><span class="line"><span class="xml">    this.message=m;</span></span><br><span class="line"><span class="xml">   &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"> &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="3、EventBus（-emit-on）（父子、隔代、兄弟）"><a href="#3、EventBus（-emit-on）（父子、隔代、兄弟）" class="headerlink" title="3、EventBus（$emit/$ on）（父子、隔代、兄弟）"></a>3、EventBus（$emit/$ on）（父子、隔代、兄弟）</h2><p>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。</p>
<p>bus.js</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="builtin-name">export</span><span class="built_in"> default </span>new Vue;</span><br></pre></td></tr></table></figure>

<p>要通信的组件</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">&#x27;./bus.js&#x27;</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">	bus () &#123;</span><br><span class="line">		Bus.$emit(<span class="string">&#x27;msg&#x27;</span>, <span class="string">&#x27;我要传给兄弟组件们，你收到没有&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接收通信的组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">&#x27;./bus.js&#x27;</span></span><br><span class="line"></span><br><span class="line">mounted() &#123;</span><br><span class="line">	<span class="keyword">let</span> self = <span class="built_in">this</span></span><br><span class="line">	Bus.$on(<span class="string">&#x27;msg&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">		self.message = e</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">`传来的数据是：<span class="subst">$&#123;e&#125;</span>`</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、-attrs-listeners（隔代）"><a href="#4、-attrs-listeners（隔代）" class="headerlink" title="4、$attrs/$listeners（隔代）"></a>4、$attrs/$listeners（隔代）</h2><ul>
<li><code>$attrs</code>：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，并且可以通过 <code>v-bind=&quot;$attrs&quot;</code> 传入内部组件。通常配合 inheritAttrs 选项一起使用。</li>
<li><code>$listeners</code>：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 <code>v-on=&quot;$listeners&quot;</code> 传入内部组件</li>
</ul>
<h2 id="5、provide-inject（隔代）"><a href="#5、provide-inject（隔代）" class="headerlink" title="5、provide/inject（隔代）"></a>5、provide/inject（隔代）</h2><p>祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。 provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。</p>
<h2 id="6、Vuex（父子、隔代、兄弟）"><a href="#6、Vuex（父子、隔代、兄弟）" class="headerlink" title="6、Vuex（父子、隔代、兄弟）"></a>6、Vuex（父子、隔代、兄弟）</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p>
<p>（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p>
<p>（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</p>
<p>主要包括以下几个模块：</p>
<ul>
<li>State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。</li>
<li>Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。</li>
<li>Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。</li>
<li>Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。</li>
<li>Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack：webpack学习之旅</title>
    <url>/2019/09/03/webpack%EF%BC%9Awebpack%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<img src="" />

<a id="more"></a>

<p><a href="https://webpack.js.org/">webpack官方文档</a></p>
<h3 id="一、为什么需要构建工具"><a href="#一、为什么需要构建工具" class="headerlink" title="一、为什么需要构建工具"></a>一、为什么需要构建工具</h3><p>（1）转换 ES6 语法</p>
<p>（2）转换 JSX</p>
<p>（3）CSS 前传补全</p>
<p>（4）压缩混淆</p>
<p>（5）图片压缩</p>
<h3 id="二、为什么选择-webpack"><a href="#二、为什么选择-webpack" class="headerlink" title="二、为什么选择 webpack"></a>二、为什么选择 webpack</h3><p>（1）社区生态丰富</p>
<p>（2）配置灵活和插件化扩展</p>
<p>（3）官方更新迭代速度快</p>
<h3 id="三、初识-webpack"><a href="#三、初识-webpack" class="headerlink" title="三、初识 webpack"></a>三、初识 webpack</h3><p>webpack是模块打包工具（Module Bundler）</p>
<ul>
<li>它能识别任何模块引入方式使用的语法；</li>
<li>它能打包任何形式的文件，不仅限于js文件；</li>
</ul>
<p>webpack 默认配置文件：webpack.config.js</p>
<p>可以通过 webpack –config 指定配置文件</p>
<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720190918091733.png?raw=true"></p>
<h3 id="四、安装-webpack"><a href="#四、安装-webpack" class="headerlink" title="四、安装 webpack"></a>四、安装 webpack</h3><h4 id="1、安装-Node-js-和-NPM"><a href="#1、安装-Node-js-和-NPM" class="headerlink" title="1、安装 Node.js 和 NPM"></a>1、安装 Node.js 和 NPM</h4><h4 id="2、创建一个空目录"><a href="#2、创建一个空目录" class="headerlink" title="2、创建一个空目录"></a>2、创建一个空目录</h4><p><code>mkdir my_project</code></p>
<h4 id="3、进入该目录"><a href="#3、进入该目录" class="headerlink" title="3、进入该目录"></a>3、进入该目录</h4><p><code>cd my_project</code></p>
<h4 id="4、生成初始的-package-文件"><a href="#4、生成初始的-package-文件" class="headerlink" title="4、生成初始的 package 文件"></a>4、生成初始的 package 文件</h4><p><code>npm init -y</code></p>
<h4 id="5、安装-webpack-和-webpack-cli"><a href="#5、安装-webpack-和-webpack-cli" class="headerlink" title="5、安装 webpack 和 webpack-cli"></a>5、安装 webpack 和 webpack-cli</h4><ol>
<li>全局安装</li>
</ol>
<p><code>npm install webpack webpack-cli -g</code></p>
<p>查看版本号 <code>webpack -v</code></p>
<p>卸载 <code>npm uninstall webapck webpack-cli -g</code></p>
<ol start="2">
<li>项目内部安装</li>
</ol>
<p>进入项目内部，执行 <code>npm install webpack webpack-cli --save-dev</code>或<code>npm install webpack webpack-cli -D</code></p>
<h4 id="6、在项目中新建一个-webpack-config-js-文件"><a href="#6、在项目中新建一个-webpack-config-js-文件" class="headerlink" title="6、在项目中新建一个 webpack.config.js 文件"></a>6、在项目中新建一个 webpack.config.js 文件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(_dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="7、创建一个-src-目录"><a href="#7、创建一个-src-目录" class="headerlink" title="7、创建一个 src 目录"></a>7、创建一个 src 目录</h4><p>在 src 中新建一个 helloworld.js 文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">helloworld</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Hello webpack&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 src 中新建一个 index.js 文件</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; helloworld &#125; <span class="keyword">from</span> <span class="string">&#x27;./helloworld&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.write(helloworld());</span><br></pre></td></tr></table></figure>

<h4 id="8、运行打包"><a href="#8、运行打包" class="headerlink" title="8、运行打包"></a>8、运行打包</h4><p>在 package.json 文件中的“scripts”中添加”build”: “webpack”</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>然后<code>npm run build</code></p>
<h3 id="五、webpack-基本用法"><a href="#五、webpack-基本用法" class="headerlink" title="五、webpack 基本用法"></a>五、webpack 基本用法</h3><p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器（module bundler）。当 webpack 处理应用程序时，他会递归的构建一个依赖关系图（dependency graph），其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p>
<p>在这开始之前需要先理解四个核心概念：</p>
<ul>
<li>入口（entry）</li>
<li>输出（output）</li>
<li>loader</li>
<li>插件（plugins）</li>
</ul>
<h4 id="1、核心概念之入口（entry）"><a href="#1、核心概念之入口（entry）" class="headerlink" title="1、核心概念之入口（entry）"></a>1、核心概念之入口（entry）</h4><p>**入口起点 **（ entry point）指示 webpack 应该使用哪个模块来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出哪些模块和库是入口起点（直接或间接）依赖的。</p>
<p>每个依赖项随即被处理，最后输出到称之为 bundles 的文件中。</p>
<p>可以通过在 webpack 配置中配置 entry 属性，来指定一个入口起点（或多个入口起点）。默认值为./src。</p>
<p><strong>单入口</strong> ：entry 是一个字符串</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = &#123;</span><br><span class="line">  entry:<span class="string">&#x27;./path/to/my/entry/files.js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>多入口</strong> ：entry 是一个对象</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = &#123;</span><br><span class="line">  entry:&#123;</span><br><span class="line">    app:<span class="string">&#x27;./src/app.js&#x27;</span>,</span><br><span class="line">    adminApp:<span class="string">&#x27;./src/adminApp.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、核心概念之出口（output）"><a href="#2、核心概念之出口（output）" class="headerlink" title="2、核心概念之出口（output）"></a>2、核心概念之出口（output）</h4><p><strong>Output</strong> 用来告诉 webpack 如何将编译后的文件输出到磁盘</p>
<p><strong>多入口配置</strong></p>
<p><strong>用法：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">const <span class="built_in">path</span> = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    search: <span class="string">&#x27;./src/search.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">output</span>: &#123;</span><br><span class="line">    <span class="built_in">path</span>: <span class="built_in">path</span>.join(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;[name].js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3、核心概念之-Loaders"><a href="#3、核心概念之-Loaders" class="headerlink" title="3、核心概念之 Loaders"></a>3、核心概念之 Loaders</h4><p>webpack 开箱即用只支持 JS 和 JSON 两种文件类型，通过 loaders 去支持其他文件类型并且把他们转化成有效的模块，并且可以添加到依赖图中。</p>
<p>loaders就是一个打包方案</p>
<p>本身是一个函数，接受源文件作为参数，返回转换的结果。</p>
<p>loaders需要安装 <code>npm install loader名称 -D</code></p>
<p>常见的 loaders:</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">bable-loader</td>
<td align="center">转换 ES6、ES7 等 JS 新特性语法</td>
</tr>
<tr>
<td align="center">css-loader</td>
<td align="center">支持.css 文件的加载和解析</td>
</tr>
<tr>
<td align="center">less-loader</td>
<td align="center">将 less 文件转换成 css</td>
</tr>
<tr>
<td align="center">ts-loader</td>
<td align="center">将 TS 转换成 js</td>
</tr>
<tr>
<td align="center">file-loader</td>
<td align="center">进行图片、文字等的打包</td>
</tr>
<tr>
<td align="center">raw-loader</td>
<td align="center">将文件以字符串定位形式导入</td>
</tr>
<tr>
<td align="center">thread-loader</td>
<td align="center">多进程打包 JS 和 CSS</td>
</tr>
</tbody></table>
<p>loader是有执行顺序的，<code>从下到上，从右到左</code></p>
<p><strong>用法：</strong></p>
<p>（1） 打包静态资源 —— 图片</p>
<p>a) <a href="https://webpack.js.org/loaders/file-loader/">file-loader</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">const path = require(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"> modules:&#123;</span><br><span class="line">   rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.(jpg|png|gif)$/</span>,        <span class="regexp">//</span>test指定匹配规则</span><br><span class="line">        use: <span class="string">&#x27;file-loader&#x27;</span>,     <span class="regexp">//u</span>se指定使用的loader名称</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">&#x27;[name].[ext]&#x27;</span>,  <span class="regexp">//</span> palceholders 占位符</span><br><span class="line">          outputPath: <span class="string">&#x27;images/&#x27;</span>  <span class="regexp">//</span> 打包位置</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>b) <a href="https://webpack.js.org/loaders/url-loader/">url-loader</a></p>
<p>（2） 打包静态资源 —— 样式</p>
<p>a）<a href="https://webpack.js.org/loaders/style-loader/">style-loader</a></p>
<p>b) <a href="https://webpack.js.org/loaders/css-loader/">css-loader</a></p>
<p>c）<a href="https://webpack.js.org/loaders/sass-loader/">scss-loader</a></p>
<p>d）<a href="https://webpack.js.org/loaders/postcss-loader/">postcss-loader</a></p>
<ul>
<li><p>loader做了什么？</p>
<ol>
<li>当它发现他在代码中引入了一个图片时，它会将这个图片移动到打包文件中，并自定义一个图片名称</li>
<li>将打包文件中的图片名称返回给引入图片的文件</li>
</ol>
</li>
</ul>
<h4 id="4、核心概念之-Plugins"><a href="#4、核心概念之-Plugins" class="headerlink" title="4、核心概念之 Plugins"></a>4、核心概念之 Plugins</h4><p>插件用于 bundle 文件的优化，资源管理和环境变量注入</p>
<p>作用于整个构建过程</p>
<p><strong>常见的 Plugin:</strong></p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CommonsChunkPlugin</td>
<td align="center">将 chunks 相同的模块代码提取成公共 js</td>
</tr>
<tr>
<td align="center">CleanWebpackPlugin</td>
<td align="center">清理构建目录</td>
</tr>
<tr>
<td align="center">ExtractTextWebpackPlugin</td>
<td align="center">将 css 从 bundle 文件中提取成一个独立的 css 文件</td>
</tr>
<tr>
<td align="center">CopyWebpackPlugin</td>
<td align="center">将文件或者文件夹拷贝到构建的输出目录</td>
</tr>
<tr>
<td align="center">HtmlWebpackPlugin</td>
<td align="center">创建 html 文件去承载输出的 bundle</td>
</tr>
<tr>
<td align="center">UglifyjsWepackPlugin</td>
<td align="center">压缩 JS</td>
</tr>
<tr>
<td align="center">ZipWebpackPlugin</td>
<td align="center">将打包出的资源生成一个 zip 包</td>
</tr>
</tbody></table>
<p><strong>用法：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"> plugins: [</span><br><span class="line">   <span class="keyword">new</span> HtmlWebpackPlugin(&#123;          <span class="comment">//放在plugins数组中</span></span><br><span class="line">     template: <span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">   &#125;)</span><br><span class="line"> ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="5、核心概念之-mode"><a href="#5、核心概念之-mode" class="headerlink" title="5、核心概念之 mode"></a>5、核心概念之 mode</h4><p>mode 用来制定当前的构建环境是：production、development 还是 none</p>
<p>设置 mode 可以使用 webpack 内置的函数，默认值为 production</p>
<p><strong>mode 的内置函数功能</strong></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">development</td>
<td align="center">设置 process、env、NODE_ENV 的值为 development，开启 NamedChunksPlugin 和 NamedModulesPlugin</td>
</tr>
<tr>
<td align="center">production</td>
<td align="center">设置 process.env.NODE_ENV 的值为 production。开启 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin</td>
</tr>
<tr>
<td align="center">none</td>
<td align="center">不开启任何优化</td>
</tr>
</tbody></table>
<h3 id="六、资源解析"><a href="#六、资源解析" class="headerlink" title="六、资源解析"></a>六、资源解析</h3><h4 id="1、解析-CSS"><a href="#1、解析-CSS" class="headerlink" title="1、解析 CSS"></a>1、解析 CSS</h4><p>css-loader 用于加载。css 文件，并且转换成 .js 对象</p>
<p>style-loader 将样式通过&lt; style &gt; 标签插入到 head 中</p>
<p><code>npm i style-loader css-loader -D</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">const <span class="built_in">path</span> = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:<span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">  <span class="built_in">output</span>: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="built_in">path</span>:<span class="built_in">path</span>.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"> modules:&#123;</span><br><span class="line">   rules:[</span><br><span class="line">     &#123;</span><br><span class="line">       test:/\.css$/,</span><br><span class="line">       use: [</span><br><span class="line">         <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="2、解析-Less-和-SaSS"><a href="#2、解析-Less-和-SaSS" class="headerlink" title="2、解析 Less 和 SaSS"></a>2、解析 Less 和 SaSS</h4><p>less-loader 用于将 less 转换成 css</p>
<p><code>npm i less less-loader -D</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">const <span class="built_in">path</span> = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:<span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">  <span class="built_in">output</span>: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="built_in">path</span>:<span class="built_in">path</span>.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"> modules:&#123;</span><br><span class="line">   rules:[</span><br><span class="line">     &#123;</span><br><span class="line">       test:/\.less$/,</span><br><span class="line">       use: [</span><br><span class="line">         <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3、解析文件、字体"><a href="#3、解析文件、字体" class="headerlink" title="3、解析文件、字体"></a>3、解析文件、字体</h4><p>file-loader 用于处理文件、字体</p>
<p><code>npm i file-loader -D</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">const <span class="built_in">path</span> = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:<span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">  <span class="built_in">output</span>: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="built_in">path</span>:<span class="built_in">path</span>.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"> modules:&#123;</span><br><span class="line">   rules:[</span><br><span class="line">     &#123;</span><br><span class="line">       test:/\.(png|svg|gif|word|woff2|otf)$/,</span><br><span class="line">       use: [</span><br><span class="line">         <span class="string">&#x27;file-loader&#x27;</span></span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>url-loader 也可以处理图片和字体，可以设置较小资源自动 base64</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">const <span class="built_in">path</span> = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:<span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">  <span class="built_in">output</span>: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="built_in">path</span>:<span class="built_in">path</span>.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"> modules:&#123;</span><br><span class="line">   rules:[</span><br><span class="line">     &#123;</span><br><span class="line">       test:/\.(png|svg|gif|word|woff2|otf)$/,</span><br><span class="line">       use: [</span><br><span class="line">         <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">         options:&#123;</span><br><span class="line">           limit:<span class="number">10240</span></span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="4、解析-ES6"><a href="#4、解析-ES6" class="headerlink" title="4、解析 ES6"></a>4、解析 ES6</h4><p>使用 babel-loader</p>
<p>babel 的配置文件是：_babelrc</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">const <span class="built_in">path</span> = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry:<span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">  <span class="built_in">output</span>: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="built_in">path</span>:<span class="built_in">path</span>.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"> modules:&#123;</span><br><span class="line">   rules:[</span><br><span class="line">     &#123;</span><br><span class="line">       test:/\.js$/,</span><br><span class="line">       use: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>增加 ES6 的 babel preset 配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>:[</span><br><span class="line">    <span class="string">&quot;@babel/preset-env&quot;</span>        ————————增加ES6的babel preset配置</span><br><span class="line">    <span class="string">&quot;@babel/preset-react&quot;</span>      ————————增加React的babel preset配置</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span>:[</span><br><span class="line">    <span class="string">&quot;@babel/proposal-class-properties&quot;</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<h3 id="七、webpack-中的文件监听"><a href="#七、webpack-中的文件监听" class="headerlink" title="七、webpack 中的文件监听"></a>七、webpack 中的文件监听</h3><p>文件监听是在发现源码发生变化时。自动重新构建出新的输出文件</p>
<p>webpack 开启监听模式，有两种方式：</p>
<p>·启动 webpack 命令时，带上–watch 参数</p>
<p>·在配置 webpack.config.js 中设置成 watch:true</p>
<p>唯一缺陷：每次需要手动刷新浏览器</p>
<p><strong>文件监听的原理分析：</strong></p>
<p>轮训判断文件的最后编辑时间是否变化</p>
<p>某个文件发生了变化，并不会立刻告诉监听者，而是先缓存起来，等 aggregateTimeout</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">module.export = &#123;</span><br><span class="line">  <span class="regexp">//</span>默认false，也就是不开启</span><br><span class="line">  watch:true,</span><br><span class="line">  <span class="regexp">//</span>只有开启监听模式时，watchOptios才有意义</span><br><span class="line">  watchOptions:&#123;</span><br><span class="line">    <span class="regexp">//</span>默认为空，不监听的文件或者文件夹，支持正则匹配</span><br><span class="line">    ignored:<span class="regexp">/node_modules/</span>,</span><br><span class="line">    <span class="regexp">//</span>监听到变化发生后会等<span class="number">300</span>ms再去执行，默认<span class="number">300</span>ms</span><br><span class="line">    aggregateTimeout:<span class="number">300</span>ms,</span><br><span class="line">    <span class="regexp">//</span>判断文件是否发生变化时通过不停的询问系统指定文件有没有变化实现的，默认美妙问<span class="number">1000</span>次</span><br><span class="line">    poll:<span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="八、热更新"><a href="#八、热更新" class="headerlink" title="八、热更新"></a>八、热更新</h3><h4 id="1-webpack-dev-server-WDS"><a href="#1-webpack-dev-server-WDS" class="headerlink" title="(1) webpack-dev-server(WDS)"></a>(1) webpack-dev-server(WDS)</h4><p>WDS 不刷新浏览器</p>
<p>WDS 不输出文件，而是放在内存中</p>
<p>使用 HotModuleReplacementPlugin 插件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;hello-webpack&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>:<span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>:<span class="string">&quot;Hello webpack&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>:<span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>:<span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>:<span class="string">&quot;webpack-dev-server --open&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>:[],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>:<span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-webpack-dev-middleware"><a href="#2-webpack-dev-middleware" class="headerlink" title="(2) webpack-dev-middleware"></a>(2) webpack-dev-middleware</h4><p>WDM 将 webpack 输出的文件传送给服务器</p>
<p>适用于灵活的定制场景</p>
<h4 id="3-热更新的原理分析"><a href="#3-热更新的原理分析" class="headerlink" title="(3) 热更新的原理分析"></a>(3) 热更新的原理分析</h4><p>Webpack Compile：将 JS 编译成 Bundle</p>
<p>HMR Server：将热更新的文件输出给 HMR Runtime</p>
<p>Bundle server：提供文件在浏览器的访问</p>
<p>HMR Rumtime：会注入到浏览器，更新文件的变化</p>
<p>bundle.js：构建输出的文件</p>
<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720190919192920.png?raw=true"></p>
<h3 id="九、文件指纹"><a href="#九、文件指纹" class="headerlink" title="九、文件指纹"></a>九、文件指纹</h3><p>打包后输出的文件名的后缀</p>
<h4 id="（1）-文件指纹如何生成"><a href="#（1）-文件指纹如何生成" class="headerlink" title="（1） 文件指纹如何生成"></a>（1） 文件指纹如何生成</h4><p>Hash：和整个项目的构建有关，只要项目文件有修改，整个项目构建的 hash 值就会更改</p>
<p>Chunkhash：和 webpack 打包的 chunk 有关，不同的 entry 会生成不停的 chunkhash</p>
<p>Contenthash：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变</p>
<h4 id="（2）JS-的文件指纹设置"><a href="#（2）JS-的文件指纹设置" class="headerlink" title="（2）JS 的文件指纹设置"></a>（2）JS 的文件指纹设置</h4><p>设置 output 的 filename，使用[chunkhash]</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    search: <span class="string">&#x27;./src/search.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">output</span>: &#123;</span><br><span class="line">    <span class="built_in">path</span>: __dirname+<span class="string">&#x27;/dist&#x27;</span>,</span><br><span class="line">    filename: <span class="string">&#x27;[name][chunkhash:8].js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="（3）CSS-的文件指纹设置"><a href="#（3）CSS-的文件指纹设置" class="headerlink" title="（3）CSS 的文件指纹设置"></a>（3）CSS 的文件指纹设置</h4><p>设置 MiniCssExtractPlugin 的 filename，使用[contenthash]</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="meta">index</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    search: <span class="string">&#x27;./src/search.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="meta">output</span>: &#123;</span><br><span class="line">    path: __dirname+<span class="string">&#x27;/dist&#x27;</span>,</span><br><span class="line">    <span class="meta">filename</span>: <span class="string">&#x27;[name][chunkhash:8].js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    new MiniCssExtractPlug<span class="meta">in(</span>&#123;</span><br><span class="line">      <span class="meta">filename</span>:<span class="string">&#x27;[name][contenthash:8].css&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="（4）图片的文件指纹设置"><a href="#（4）图片的文件指纹设置" class="headerlink" title="（4）图片的文件指纹设置"></a>（4）图片的文件指纹设置</h4><p>设置 file-loader 的 name，使用[hash]</p>
<table>
<thead>
<tr>
<th align="center">占位符名称</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[ext]</td>
<td align="center">资源后缀名</td>
</tr>
<tr>
<td align="center">[name]</td>
<td align="center">文件名称</td>
</tr>
<tr>
<td align="center">[path]</td>
<td align="center">文件的组对路径</td>
</tr>
<tr>
<td align="center">[folder]</td>
<td align="center">文件所在的文件夹</td>
</tr>
<tr>
<td align="center">[contenthash]</td>
<td align="center">文件的内容 hash，默认是 MD5 生成</td>
</tr>
<tr>
<td align="center">[hash]</td>
<td align="center">文件内容的 Hash，默认是 MD5 生成</td>
</tr>
<tr>
<td align="center">[emoji]</td>
<td align="center">一个随机的指代文件内容的 emoji</td>
</tr>
</tbody></table>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    search: <span class="string">&#x27;./src/search.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">module</span>:&#123;</span><br><span class="line">    rules:[</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">        use:[&#123;</span><br><span class="line">          loader:<span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">          options:&#123;</span><br><span class="line">            name:<span class="string">&#x27;img/[name][hash:8].[ext]&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="十、代码压缩"><a href="#十、代码压缩" class="headerlink" title="十、代码压缩"></a>十、代码压缩</h3><h4 id="（1）JS-文件的压缩"><a href="#（1）JS-文件的压缩" class="headerlink" title="（1）JS 文件的压缩"></a>（1）JS 文件的压缩</h4><p>内置了 uglifyjs-webpack-plugin</p>
<h4 id="（3）CSS-文件的压缩"><a href="#（3）CSS-文件的压缩" class="headerlink" title="（3）CSS 文件的压缩"></a>（3）CSS 文件的压缩</h4><p>使用 optimize-css-assets-webpack-plugin</p>
<p>同时使用 cssnano</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">module.exports</span> = <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">index</span>: <span class="string">&#x27;./src/index.js&#x27;,</span></span><br><span class="line">    <span class="attr">search</span>: <span class="string">&#x27;./src/search.js&#x27;</span></span><br><span class="line">  <span class="attr">&#125;,</span></span><br><span class="line">  <span class="attr">output</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">__dirname+&#x27;/dist&#x27;,</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name][chunkhash:8].js&#x27;</span></span><br><span class="line">  <span class="attr">&#125;,</span></span><br><span class="line">  <span class="attr">plugins</span>:<span class="string">[</span></span><br><span class="line">    <span class="attr">new</span> <span class="string">OptimizeCSSAssetsPlugin(&#123;</span></span><br><span class="line">      <span class="attr">assetNameRegExp</span>:<span class="string">/\.css$/,</span></span><br><span class="line">      <span class="attr">cssProcessor</span>:<span class="string">require(&#x27;cssnano)</span></span><br><span class="line">    <span class="attr">&#125;)</span></span><br><span class="line">  <span class="attr">]</span></span><br><span class="line"><span class="attr">&#125;;</span></span><br></pre></td></tr></table></figure>

<h4 id="（3）html-文件的压缩"><a href="#（3）html-文件的压缩" class="headerlink" title="（3）html 文件的压缩"></a>（3）html 文件的压缩</h4><p>修改 html-webpack-plugin，设置压缩参数</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="keyword">index</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="keyword">search</span>: <span class="string">&#x27;./src/search.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="type">path</span>: __dirname+<span class="string">&#x27;/dist&#x27;</span>,</span><br><span class="line">    filename: <span class="string">&#x27;[name][chunkhash:8].js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="built_in">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      tempalte:<span class="type">path</span>.<span class="keyword">join</span>(__dirname,<span class="string">&#x27;src/search.html&#x27;</span>),</span><br><span class="line">      filename:<span class="string">&#x27;search.html&#x27;</span>,</span><br><span class="line">      chunks:[<span class="string">&#x27;search&#x27;</span>],</span><br><span class="line">      inject:<span class="keyword">true</span>,</span><br><span class="line">      minify:&#123;</span><br><span class="line">        html5:<span class="keyword">true</span>,</span><br><span class="line">        collapseWhitespace:<span class="keyword">true</span>,</span><br><span class="line">        preserveLineBreaks:<span class="keyword">false</span>,</span><br><span class="line">        minifyCSS:<span class="keyword">true</span>,</span><br><span class="line">        minifyJS:<span class="keyword">true</span>,</span><br><span class="line">        removeComments:<span class="keyword">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>其他：Markdown基本语法</title>
    <url>/2019/08/22/%E5%85%B6%E4%BB%96%EF%BC%9AMarkdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h3 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h3><p>示例：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>效果如下：</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h3 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h3><p>示例：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">*<span class="strong">*这是加粗的文字*</span><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>这是倾斜的文字<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>*<span class="strong">*这是倾斜加粗的文字*</span>*<span class="strong">*</span></span><br><span class="line"><span class="strong">~~这是加删除线的文字~~</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><strong>这是加粗的文字</strong></p>
<p><em>这是倾斜的文字</em></p>
<p><strong><em>这是倾斜加粗的文字</em></strong></p>
<p><del>这是加删除线的文字</del></p>
<h3 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h3><p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line"><span class="meta">&gt;&gt;</span>这是引用的内容</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
<h3 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h3><p>示例：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">**<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>***<span class="strong">*</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<hr>
<hr>
<hr>
<hr>
<h3 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h3><p>语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片alt</span>](<span class="link">图片地址 &#x27;&#x27;图片title&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片</span>](<span class="link">https://img.wowoqq.com/allimg/171130/1-1G1300I102-52.jpg</span>)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://img.wowoqq.com/allimg/171130/1-1G1300I102-52.jpg" alt="图片"></p>
<h3 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h3><p>语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">超链接名</span>](<span class="link">超链接地址 &quot;超链接title&quot;</span>)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">简书</span>](<span class="link">http://jianshu.com</span>)</span><br><span class="line">[<span class="string">百度</span>](<span class="link">http://baidu.com</span>)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><a href="http://jianshu.com/">简书</a><br><a href="http://baidu.com/">百度</a></p>
<h3 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h3><ul>
<li><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4></li>
</ul>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 列表内容</span><br><span class="line"><span class="bullet">+</span> 列表内容</span><br><span class="line"><span class="bullet">*</span> 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + <span class="emphasis">* 跟内容之间都要有一个空格</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
<li>列表内容</li>
</ul>
<ul>
<li><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4>示例：</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>列表内容</span><br><span class="line"><span class="number">2.</span>列表内容</span><br><span class="line"><span class="number">3.</span>列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<ul>
<li><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4></li>
</ul>
<p><strong>上一级和下一级之间敲三个空格即可</strong></p>
<ul>
<li>一级无序列表内容<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级无序列表内容<ol>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ul>
<ol>
<li>一级有序列表内容<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级有序列表内容<ol>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ol>
<h3 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h3><p>语法：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">表头|<span class="string">表头</span>|<span class="string">表头</span></span><br><span class="line"><span class="string">---</span>|<span class="string">:--:</span>|<span class="string">---:</span></span><br><span class="line"><span class="string">内容</span>|<span class="string">内容</span>|<span class="string">内容</span></span><br><span class="line"><span class="string">内容</span>|<span class="string">内容</span>|<span class="string">内容</span></span><br><span class="line"></span><br><span class="line"><span class="string">第二行分割表头和内容。</span></span><br><span class="line"><span class="string">- 有一个就行，为了对齐，多加了几个</span></span><br><span class="line"><span class="string">文字默认居左</span></span><br><span class="line"><span class="string">-两边加：表示文字居中</span></span><br><span class="line"><span class="string">-右边加：表示文字居右</span></span><br><span class="line"><span class="string">注：原生的语法两边都要用 </span>|<span class="string"> 包起来。此处省略</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">姓名|<span class="string">技能</span>|<span class="string">排行</span></span><br><span class="line"><span class="string">--</span>|<span class="string">:--:</span>|<span class="string">--:</span></span><br><span class="line"><span class="string">刘备</span>|<span class="string">哭</span>|<span class="string">大哥</span></span><br><span class="line"><span class="string">关羽</span>|<span class="string">打</span>|<span class="string">二弟</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th align="center">技能</th>
<th align="right">排行</th>
</tr>
</thead>
<tbody><tr>
<td>刘备</td>
<td align="center">哭</td>
<td align="right">大哥</td>
</tr>
<tr>
<td>关羽</td>
<td align="center">打</td>
<td align="right">二弟</td>
</tr>
</tbody></table>
<h3 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h3><p>语法：</p>
<p>单行代码：代码之间分别用一个反引号包起来</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="string">`代码内容`</span></span><br></pre></td></tr></table></figure>

<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">​<span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">​`</span><span class="string">``</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p>单行代码：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">`<span class="keyword">create</span> <span class="keyword">database</span> hero;`</span><br></pre></td></tr></table></figure>

<p>代码块：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">​```</span><br><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">	echo <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">​```</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>单行代码：</p>
<p><code>create database hero;</code></p>
<p>代码块：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">	echo <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h3><p>示例：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">​```flow</span><br><span class="line"><span class="attribute">st</span>=&gt;start: 开始</span><br><span class="line"><span class="attribute">op</span>=&gt;operation: My Operation</span><br><span class="line"><span class="attribute">cond</span>=&gt;condition: <span class="literal">Yes</span> <span class="keyword">or</span> <span class="literal">No</span>?</span><br><span class="line"><span class="attribute">e</span>=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(<span class="literal">yes</span>)-&gt;e</span><br><span class="line">cond(<span class="literal">no</span>)-&gt;op</span><br><span class="line">&amp;```</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">op&#x3D;&gt;operation: My Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>其他：使用hexo搭建博客</title>
    <url>/2019/03/16/%E5%85%B6%E4%BB%96%EF%BC%9A%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h3 id="一、配置-github"><a href="#一、配置-github" class="headerlink" title="一、配置 github"></a>一、配置 github</h3><p>1、首先注册、登录<a href="https://github.com/">github.com</a></p>
<p>2、在右上角选择<a href="https://github.com/new">New repository</a></p>
<p><img src="https://github.com/chajianyuan/picture/blob/master/TIM%E5%9B%BE%E7%89%8720190316103736.png?raw=true"></p>
<p>在网页上输入 你的名字.github.io 显示正常，则新建成功</p>
<a id="more"></a>

<h3 id="二、环境安装（node、git）"><a href="#二、环境安装（node、git）" class="headerlink" title="二、环境安装（node、git）"></a>二、环境安装（node、git）</h3><p>1、安装<a href="https://nodejs.org/en/">node.js</a></p>
<p>2、安装 git<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/">廖雪峰老师的安装教程</a></p>
<p>安装完成后，在开始菜单找到”Git”-&gt;”Git Bash”，名称都是 github 上面的</p>
<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720190316104850.png"></p>
<p>3、安装 Hexo</p>
<p><code>npm install -g hexo-cli</code></p>
<p><a href="http://note.youdao.com/noteshare?id=1844b19b5f12367edd3460b6cf88d126">安装 cmder 流程</a></p>
<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720190316105545.png"></p>
<h3 id="三、设置"><a href="#三、设置" class="headerlink" title="三、设置"></a>三、设置</h3><p>1、在合适的文件夹下新建文件夹 test,进入 test,右击选择 Cmder Here</p>
<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720190316110343.png"></p>
<p>2、在窗口输入<code>hexo init blog</code></p>
<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720190316111949.png"></p>
<p>3、成功后提示<code>INFO Start blogging with Hexo!</code></p>
<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720190316111234.png"></p>
<p>4、访问 localhost:4000/，就可以访问初步的博客模样</p>
<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720190316111314.png"></p>
<p>5、重新打开 cmd 输入</p>
<p><code>ssh-keygen -t rsa -C &quot;Github注册的邮箱地址&quot;</code></p>
<p>一路 enter 得到信息</p>
<p><code>Your public key has been saved in /c/Users/user/.ssh/id_rsa.pub.</code></p>
<p>找到该文件将里面的内容复制到<a href="https://github.com/settings/keys">Github</a></p>
<p>New SSH key ——Title：blog —— Key：输入刚才复制的—— Add SSH key</p>
<h3 id="四、配置博客"><a href="#四、配置博客" class="headerlink" title="四、配置博客"></a>四、配置博客</h3><p>在 blog 目录下修改以下参数信息</p>
<p>网站的相关信息</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="symbol">title:</span> 南殇的博客 <span class="meta">#标题</span></span><br><span class="line"><span class="symbol">subtitle:</span> 越努力，越幸运 <span class="meta">#副标题</span></span><br><span class="line"><span class="symbol">description:</span>  <span class="meta">#站点描述，给搜索引擎看</span></span><br><span class="line"><span class="symbol">author:</span> chajianyuan <span class="meta">#作者</span></span><br><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-CN <span class="meta">#语言</span></span><br><span class="line"><span class="symbol">timezone:</span>  Asia/Shanghai <span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p>配置部署</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span> <span class="meta">#</span></span><br><span class="line"><span class="symbol">  type:</span> git <span class="meta">#</span></span><br><span class="line"><span class="symbol">  repo:</span> https:<span class="comment">//github.com/cjy1/cjy1.github.io.git</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure>

<h3 id="五、发表文章"><a href="#五、发表文章" class="headerlink" title="五、发表文章"></a>五、发表文章</h3><p>在 cmd 中输入</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&quot;测试文章&quot;</span></span><br></pre></td></tr></table></figure>

<p>在给定的位置打开该文件，用 markdown 语法编辑</p>
<p>然后保存</p>
<p><code>hexo clean</code> #清除缓存，网页正常情况下可以忽略此条命令</p>
<p><code>hexo generate</code> #生成</p>
<p><code>hexo server</code> #启动服务预览</p>
<p>最后发布到网上执行<code>hexo deploy</code> #部署发布</p>
<p>在网页上输入 你的名字.github.io 就可以看到已经发布的博客</p>
<h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>1、如果在执行 hexo deploy 后,出现 error deployer not found:github 的错误，执行：</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<p>2、如果部署后出现 404，查看 github 数据源是否在 master 分支下</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>学习资料</title>
    <url>/2021/03/10/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<p><img src="https://pic1.zhimg.com/v2-1c7eb3599dd689e6b3631818d9c007a0_720w.jpg?source=172ae18b"></p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>图标</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td>📖</td>
<td align="center">书籍</td>
</tr>
<tr>
<td>💻</td>
<td align="center">网站</td>
</tr>
<tr>
<td>👸</td>
<td align="center">微信公众号</td>
</tr>
</tbody></table>
<ul>
<li><input disabled="" type="checkbox"> 💻 <a href="https://mp.weixin.qq.com/s/HbfThzav79GFS-sMirAINA">2020年你不应该错过的CSS新特性</a></li>
<li><input disabled="" type="checkbox"> 📖 <a href="https://www.yuque.com/docs/share/d32ce6ae-f7c0-437e-9c5a-2df32bcb3580#">《专家思维、大脑和学习》</a></li>
<li><input disabled="" type="checkbox"> 💻 <a href="https://reactjs.org/blog/2020/10/20/react-v17.html">react 17</a></li>
<li><input disabled="" type="checkbox"> 📖 <a href="https://www.yuque.com/docs/share/3c219cf1-6376-420c-98c0-265871ad71bf#%20%E3%80%8AOKR%E6%91%98%E5%BD%95%E3%80%8B">OKA摘录</a></li>
<li><input disabled="" type="checkbox"> 📖 <a href="https://book.douban.com/subject/4164024//">高效程序员的45个习惯</a></li>
<li><input checked="" disabled="" type="checkbox"> 💻 <a href="https://mp.weixin.qq.com/s/IYx6VFoy7cLuF--WZed9YQ">28 个 JavaScript 编程黑科技：还有这种操作！</a></li>
<li><input disabled="" type="checkbox"> 📖 金字塔</li>
<li><input disabled="" type="checkbox"> 📖 数据结构与算法之美</li>
<li><input disabled="" type="checkbox"> 📖 你不知道的JavaScript</li>
<li><input disabled="" type="checkbox"> 💻 <a href="https://segmentfault.com/a/1190000021712743">git merge的原理</a></li>
<li><input disabled="" type="checkbox"> 📖 <a href="https://www.yuque.com/docs/share/d5caf5e8-1674-4f4d-90fa-7fca8c1a5a6a#%20%E3%80%8A%E7%BB%93%E6%9E%84%E5%8C%96%E6%80%9D%E7%BB%B4%E3%80%8B">结构化思维</a></li>
<li><input disabled="" type="checkbox"> 💻 <a href="https://backlog.com/git-tutorial/cn/intro/intro1_1.html">猴子都能懂的GIT入门</a></li>
<li><input checked="" disabled="" type="checkbox"> 👸 <a href="https://mp.weixin.qq.com/s/TI54CJ7vgE2wiquFN5NyPA">你可能不知道的 CSS 阴影技巧与细节</a></li>
<li><input disabled="" type="checkbox"> 💻 <a href="https://inrupt.com/solid">Solid</a></li>
<li><input disabled="" type="checkbox"> 💻 <a href="https://bitable.feishu.cn/app8Ok6k9qafpMkgyRbfgxeEnet?from=logout&table=tblEnSV2PNAajtWE&view=vewJHSwJVd">前端年后面试真题，会80%直接金大厂</a></li>
<li><input disabled="" type="checkbox"> 💻 <a href="https://zhuanlan.zhihu.com/p/94611888">Continuation 在 JS 中的应用</a></li>
<li><input checked="" disabled="" type="checkbox"> 👸 <a href="https://mp.weixin.qq.com/s/8j2z3uOaVWADLf5FD_BF3g">JavaScript 代码整洁之道</a></li>
<li><input disabled="" type="checkbox"> 💻 <a href="https://github.com/CavsZhouyou/Front-End-Interview-Notebook">Front-End-Interview-Notebook</a></li>
<li><input disabled="" type="checkbox"> 💻 <a href="https://app.yinxiang.com/fx/5a9f1e0f-a3c7-43ed-bffe-e15802ff2b66">大鱼：Node.js Learning Path</a></li>
<li><input disabled="" type="checkbox"> 💻 <a href="https://nqdeng.github.io/7-days-nodejs/">七天学会NodeJS</a></li>
<li><input disabled="" type="checkbox"> 👸 <a href="https://mp.weixin.qq.com/s/tsEgUOmWnHDLVPOFLqUd7Q">当面试官问Webpack的时候他想知道什么</a></li>
<li><input disabled="" type="checkbox"> 📖 敏捷软件开发</li>
<li><input disabled="" type="checkbox"> 六顶思考帽</li>
<li><input disabled="" type="checkbox"> 💻 <a href="https://fennay.github.io/gitlab-ci-cn/gitlab-ci-yaml.html">通过 .gitlab-ci.yml配置任务</a></li>
<li><input disabled="" type="checkbox"> 👸 <a href="https://mp.weixin.qq.com/s/QZkOXhQIg2LqDWpi7mzCdQ">SameSite 那些事</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>学习资料</tag>
      </tags>
  </entry>
  <entry>
    <title>性能优化：防抖和节流</title>
    <url>/2020/11/01/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%9A%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<p>今天在写项目时遇到了一个问题，一个按钮的点击事件，因为考虑到<code>onClick</code>在移动端可能失效的问题，所以添加<code>onTouchEnd</code>方法解决这个问题，一个dom节点上添加了两个事件调用的是同一个方法，那么问题就来了，同一个事件同时被调用两次很显然是不对的，那么该如何解决呢❓</p>
<p>当然，就是使用<strong>节流</strong>方法啦，保证在一个时间段内，如果一个事件被多次调用，则只有一次生效。</p>
<p>既然提到了节流，我们很容易就会想到另一个名词<strong>防抖</strong>，下面我们来回顾下到底什么是防抖和节流呢？🤔</p>
<a id="more"></a>

<h4 id="一、-节流函数"><a href="#一、-节流函数" class="headerlink" title="一、 节流函数"></a>一、 节流函数</h4><h5 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h5><p>规定在一个单位时间内只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</p>
<h5 id="2-适用场景"><a href="#2-适用场景" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h5><ol>
<li>拖拽场景：规定时间内只执行一次，防止超高频次触发位置变动</li>
<li>缩放场景：监控浏览器resize</li>
<li>动画场景：避免短时间内多次触发动画引起性能问题</li>
</ol>
<h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手写简化版实现</span></span><br><span class="line"><span class="comment">// 1. 定时器实现</span></span><br><span class="line"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay = <span class="number">500</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag) <span class="keyword">return</span>;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 时间戳实现</span></span><br><span class="line"><span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay = <span class="number">500</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> preTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> nowTime = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">if</span>(nowTime - preTime &gt;= delay) &#123;</span><br><span class="line">            preTime = <span class="built_in">Date</span>.now();</span><br><span class="line">            fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. lodash.throttle (https://www.lodashjs.com/docs/lodash.throttle)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> throttle = lodash.throttle(<span class="function">() =&gt;</span> fn(), delay, options)</span><br></pre></td></tr></table></figure>

<h4 id="二、-防抖函数"><a href="#二、-防抖函数" class="headerlink" title="二、 防抖函数"></a>二、 防抖函数</h4><h5 id="1-原理-1"><a href="#1-原理-1" class="headerlink" title="1. 原理"></a>1. 原理</h5><p>在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</p>
<h5 id="2-适用场景-1"><a href="#2-适用场景-1" class="headerlink" title="2. 适用场景"></a>2. 适用场景</h5><ol>
<li>按钮提交场景：防止多次提交按钮，只执行最后提交的一次</li>
<li>服务端验证场景：表单验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有搜索联想词功能类似</li>
</ol>
<h5 id="3-代码实现-1"><a href="#3-代码实现-1" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手写简化版实现</span></span><br><span class="line"><span class="comment">// 1. 定时器实现</span></span><br><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.apply(<span class="built_in">this</span>, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. lodash.debounce (https://www.lodashjs.com/docs/lodash.debounce)</span></span><br><span class="line"><span class="keyword">const</span> debounce = lodash.debounce(<span class="function">() =&gt;</span> fun(), delay, options)</span><br></pre></td></tr></table></figure>

<h4 id="三、-节流-VS-防抖"><a href="#三、-节流-VS-防抖" class="headerlink" title="三、 节流 VS 防抖"></a>三、 节流 VS 防抖</h4><ul>
<li>防抖是延迟执行</li>
<li>节流是间隔执行，函数节流即每隔一段时间就执行一次</li>
</ul>
<p>最后，强烈推荐<a href="https://www.lodashjs.com/">lodash库</a>👍，一个很实用的JavaScript工具库！</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>总结：ES6</title>
    <url>/2019/10/24/%E6%80%BB%E7%BB%93%EF%BC%9AES6/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、let-const"><a href="#一、let-const" class="headerlink" title="一、let/const"></a>一、let/const</h2><p><a href="https://cjy1.github.io/2019/10/14/let%E3%80%81const%E3%80%81var/">参见总结：ES6：let、const、var</a></p>
<a id="more"></a>

<h2 id="二、模板字符串"><a href="#二、模板字符串" class="headerlink" title="二、模板字符串"></a>二、模板字符串</h2><p>模板字符串（``），相对于一般的加号字符串拼接，优势在于他能够识别空格、换行符等，还能直接使用 ${}来拼接变量</p>
<h2 id="三、set、map、weakSet、weakMap"><a href="#三、set、map、weakSet、weakMap" class="headerlink" title="三、set、map、weakSet、weakMap"></a>三、set、map、weakSet、weakMap</h2><p><a href="https://cjy1.github.io/2019/10/19/set%E3%80%81map%E3%80%81weakSet%E3%80%81weakMap/">参见总结：ES6：set、map、weakSet、weakMap</a></p>
<h2 id="四、箭头函数"><a href="#四、箭头函数" class="headerlink" title="四、箭头函数"></a>四、箭头函数</h2><p><a href="https://cjy1.github.io/2019/10/15/this/">参见总结：ES6：this</a></p>
<h2 id="五、promise、Generator、async-await"><a href="#五、promise、Generator、async-await" class="headerlink" title="五、promise、Generator、async/await"></a>五、promise、Generator、async/await</h2><p><a href="https://cjy1.github.io/2019/10/12/%E6%B5%85%E8%B0%88Promise/">参见总结：ES6：浅谈 Promise、Generator 以及 async await</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>总结：Node.js</title>
    <url>/2020/03/26/%E6%80%BB%E7%BB%93%EF%BC%9ANode.js/</url>
    <content><![CDATA[<h2 id="1、Express-js"><a href="#1、Express-js" class="headerlink" title="1、Express.js"></a>1、Express.js</h2><p><a href="">参见总结：Node：学习 Express.js</a></p>
<a id="more"></a>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>总结：React</title>
    <url>/2020/03/09/%E6%80%BB%E7%BB%93%EF%BC%9AReact/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、当调用-setState-的时候-发生了什么？"><a href="#一、当调用-setState-的时候-发生了什么？" class="headerlink" title="一、当调用 setState 的时候,发生了什么？"></a>一、当调用 setState 的时候,发生了什么？</h2><p>当调用 setState 时，React 做的第一件事就是将传递给 setState 的对象合并到组件的当前状态，这将启动一个称为和解的过程，和解的最终目标是，根据这个新的状态以最有效的方式更新 DOM。为此，React 将构建一个新的 React 虚拟 DOM 树（可以将其视为页面 DOM 元素的对象表示方式）。</p>
<a id="more"></a>

<p>一旦有了这个 DOM 树，为了弄清 DOM 是如何响应新的状态而改变的，React 会将这个新树与上一个虚拟 DOM 树比较。</p>
<p>这样做，React 会知道发生的确切变化，并且通过了解发生的变化后，在绝对必要的情况下进行更新 DOM，即可将因操作 DOM 而占用的空间最小化。</p>
<h2 id="二、在-React-中元素（element）和组件（component）有什么区别？"><a href="#二、在-React-中元素（element）和组件（component）有什么区别？" class="headerlink" title="二、在 React 中元素（element）和组件（component）有什么区别？"></a>二、在 React 中元素（element）和组件（component）有什么区别？</h2><p>简单的说，在 React 中元素（虚拟 DOM）描述了你在屏幕上看到的 DOM 元素。换个说法就是，在 React 中元素是页面中 DOM 元素的对象表示方式，在 React 中组件是一个函数或一个类，它可以接受输入并返回一个元素。</p>
<blockquote>
<p>提醒：工作中，为了提高开发效率，通常使用 JSX 语法表示 React 元素（虚拟 DOM）。在编译的时候，把它转化成一个 React.creatElement 调用方法。</p>
</blockquote>
<h2 id="三、什么时候使用类组件（Class-Component）？什么时候使用功能组件（Functional-Component）？"><a href="#三、什么时候使用类组件（Class-Component）？什么时候使用功能组件（Functional-Component）？" class="headerlink" title="三、什么时候使用类组件（Class Component）？什么时候使用功能组件（Functional Component）？"></a>三、什么时候使用类组件（Class Component）？什么时候使用功能组件（Functional Component）？</h2><p>如果使用组件具有状态（state）或生命周期方法，请使用类组件；否则使用功能组件。</p>
<h2 id="四、什么是-React-的-refs？为什么它们很重要？"><a href="#四、什么是-React-的-refs？为什么它们很重要？" class="headerlink" title="四、什么是 React 的 refs？为什么它们很重要？"></a>四、什么是 React 的 refs？为什么它们很重要？</h2><p>refs 允许你直接访问 DOM 元素或组件实例，为了使用它们，可以向组件添加一个 ref 属性。</p>
<p>如果该属性的值是一个回调函数，它将接受底层的 DOM 元素或组件的已挂载实例作为其第一个参数。可以在组件中存储它。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  showResult() &#123;</span><br><span class="line">    console.log(<span class="keyword">this</span>.input.value);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">&quot;text&quot;</span> ref=&#123; input =&gt; <span class="keyword">this</span>.input = input&#125; /&gt;</span><br><span class="line">        &lt;button onClick=&#123; <span class="keyword">this</span>.showResult.bind(<span class="keyword">this</span>) &#125;&gt; 展示结果 &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果该属性值是一个字符串，React 将会在组件实例化对象的 refs 属性中，存储一个同名属性，该属性是对这个 DOM 元素的引用，可以通过原生的 DOM API 操作它。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  showResult() &#123;</span><br><span class="line">    console.log(<span class="keyword">this</span>.refs.username.value)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">&quot;text&quot;</span> ref=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.showResult.bind(<span class="keyword">this</span>)&#125;&gt;展示结果&lt;/button&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、React-中的-key-是什么？为什么它们很重要？"><a href="#五、React-中的-key-是什么？为什么它们很重要？" class="headerlink" title="五、React 中的 key 是什么？为什么它们很重要？"></a>五、React 中的 key 是什么？为什么它们很重要？</h2><p>key 可以帮助 React 跟踪循环创建列表中的虚拟 DOM 元素，了解哪些元素已更改、添加或删除。</p>
<p>每个绑定 key 的虚拟 DOM 元素，在兄弟元素之间都是独一无二的。在 React 的和解过程中，比较新的虚拟 DOM 树与上一个虚拟 DOM 树之间的差异，并映射到页面中。key 使 React 处理列表中虚拟 DOM 时更加高效，因为 React 可以使用虚拟 DOM 上的 key 属性，快速了解元素是新的，还是需要删除的，还是修改过的。如果没有 key，React 就不知道列表中虚拟 DOM 元素与页面中的哪个元素相对应，所以在创建列表的时候，不要忽略 key。</p>
<h2 id="六、如果创建了类似于下面的-Icketang-元素，那么该如何实现-Icketang-类？"><a href="#六、如果创建了类似于下面的-Icketang-元素，那么该如何实现-Icketang-类？" class="headerlink" title="六、如果创建了类似于下面的 Icketang 元素，那么该如何实现 Icketang 类？"></a>六、如果创建了类似于下面的 Icketang 元素，那么该如何实现 Icketang 类？</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">&lt;<span class="type">Icketang</span> username=<span class="string">&quot;雨夜清荷&quot;</span>&gt;</span><br><span class="line">  &#123;user =&gt; user ? &lt;<span class="type">Info</span> user=&#123;user&#125; /&gt; : &lt;<span class="type">Loading</span> /&gt;&#125;</span><br><span class="line">&lt;/<span class="type">Icketang</span>&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123;<span class="type">Component</span>&#125; from <span class="string">&quot;react&quot;</span>;</span><br><span class="line">export <span class="class"><span class="keyword">class</span> <span class="title">Icketang</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 请实现代码</span></span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      user: props.user</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="comment">// 模拟异步获取数据操作，更新状态</span></span><br><span class="line">    setTimeout(()=&gt; <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      user: &#x27;爱创课堂&#x27;</span><br><span class="line">    &#125;), <span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children(<span class="keyword">this</span>.state.user)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Loading</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;p&gt;<span class="type">Loading</span>...&lt;/p&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;h1&gt;&#123;<span class="keyword">this</span>.props.user&#125;&lt;/h1&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七、约束性组件（controlled-component）与非约束性组件（uncontrolled-component）有什么区别？"><a href="#七、约束性组件（controlled-component）与非约束性组件（uncontrolled-component）有什么区别？" class="headerlink" title="七、约束性组件（controlled component）与非约束性组件（uncontrolled component）有什么区别？"></a>七、约束性组件（controlled component）与非约束性组件（uncontrolled component）有什么区别？</h2><p>在 React 中，组件负责控制和管理自己的状态。</p>
<p>如果将 HTML 中的表单元素（input、select、textarea 等）添加到组件中，当用户与表单发生交互时，就设计表单数据存储问题。根据表单数据存储问题。根据表单数据的存储位置，将组件分成约束性组件和非约束性组件。</p>
<p>约束性组件（controlled component）就是由 React 控制的组件。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>总结：css</title>
    <url>/2019/10/23/%E6%80%BB%E7%BB%93%EF%BC%9Acss/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、css-选择器"><a href="#一、css-选择器" class="headerlink" title="一、css 选择器"></a>一、css 选择器</h2><p><a href="https://cjy1.github.io/2019/10/19/css%EF%BC%9Acss%E9%80%89%E6%8B%A9%E5%99%A8%E5%8F%8A%E4%BC%98%E5%85%88%E7%BA%A7/">参见总结：css：css 选择器及优先级</a></p>
<a id="more"></a>

<h2 id="二、css-的引入方式"><a href="#二、css-的引入方式" class="headerlink" title="二、css 的引入方式"></a>二、css 的引入方式</h2><p><a href="">参见总结：css：css 的引入方式</a></p>
<h2 id="三、浮动元素（Float）"><a href="#三、浮动元素（Float）" class="headerlink" title="三、浮动元素（Float）"></a>三、浮动元素（Float）</h2><p><a href="https://cjy1.github.io/2019/10/18/css%EF%BC%9Afloat%E5%92%8Cposition/">参见总结：css：float 和 position</a></p>
<h2 id="四、定位属性（position）"><a href="#四、定位属性（position）" class="headerlink" title="四、定位属性（position）"></a>四、定位属性（position）</h2><p><a href="https://cjy1.github.io/2019/10/18/css%EF%BC%9Afloat%E5%92%8Cposition/">参见总结：css：float 和 position</a></p>
<h2 id="五、css-元素哪些可以继承，哪些不可以"><a href="#五、css-元素哪些可以继承，哪些不可以" class="headerlink" title="五、css 元素哪些可以继承，哪些不可以"></a>五、css 元素哪些可以继承，哪些不可以</h2><p>可继承的样式：font-size、font-family、color</p>
<p>不可继承的样式：border、padding、margin、width、height</p>
<p><strong>与字体相关的样式通常可以继承，与尺寸相关的样式通常不能继承。</strong></p>
<h2 id="六、为什么要初始化-css"><a href="#六、为什么要初始化-css" class="headerlink" title="六、为什么要初始化 css"></a>六、为什么要初始化 css</h2><p>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没有初始化 css，往往会导致页面在不同浏览器之间出现差异</p>
<p>当然，初始化样式有时会对 SEO 产生一定一影响，但鱼和熊掌不可兼得，所以在力求影响最小的情况下初始化 css</p>
<p>最简单的初始化方法就是<code>*&#123;padding: 0; margin: 0&#125;</code></p>
<h2 id="七、display-属性"><a href="#七、display-属性" class="headerlink" title="七、display 属性"></a>七、display 属性</h2><p><a href="https://www.runoob.com/cssref/pr-class-display.html">菜鸟教程：CSS display 属性</a></p>
<p>常用属性值</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>此元素不会显示，已脱离文档流</td>
</tr>
<tr>
<td>block</td>
<td>块类型，默认宽度为父元素宽度，可设置宽高，换行显示</td>
</tr>
<tr>
<td>inline</td>
<td>行内元素类型，默认宽度为内容宽度，不可设置宽高，同行显示。</td>
</tr>
<tr>
<td>inline-block</td>
<td>行内块级元素类型，默认宽度为内容宽度，可以设置宽高，同行显示。</td>
</tr>
<tr>
<td>list-item</td>
<td>像块类型元素一样显示，并添加样式列表标记</td>
</tr>
<tr>
<td>table</td>
<td>此元素会作为块级表格显示</td>
</tr>
<tr>
<td>inherit</td>
<td>从父元素继承 display 属性的值</td>
</tr>
</tbody></table>
<h2 id="八、行内元素、行内块级元素、块级元素"><a href="#八、行内元素、行内块级元素、块级元素" class="headerlink" title="八、行内元素、行内块级元素、块级元素"></a>八、行内元素、行内块级元素、块级元素</h2><p><a href="https://cjy1.github.io/2019/10/15/html%EF%BC%9A%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E3%80%81%E8%A1%8C%E5%86%85%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E3%80%81%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0/">参见总结：html：行内元素、行内块级元素、块级元素</a></p>
<h2 id="九、盒模型"><a href="#九、盒模型" class="headerlink" title="九、盒模型"></a>九、盒模型</h2><p><a href="https://cjy1.github.io/2019/10/15/css%EF%BC%9A%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%8F%8Abox-sizing/">参见总结：css：盒模型及 box-sizing</a></p>
<h2 id="十、css-单位"><a href="#十、css-单位" class="headerlink" title="十、css 单位"></a>十、css 单位</h2><p><a href="https://cjy1.github.io/2019/10/17/css%EF%BC%9A%E5%85%83%E7%B4%A0%E5%8D%95%E4%BD%8D%E7%9A%84%E4%BD%BF%E7%94%A8/">参见总结：css：元素单位的使用</a></p>
<h2 id="十一、css-常见布局"><a href="#十一、css-常见布局" class="headerlink" title="十一、css 常见布局"></a>十一、css 常见布局</h2><h3 id="1、水平居中、垂直居中、水平垂直居中"><a href="#1、水平居中、垂直居中、水平垂直居中" class="headerlink" title="1、水平居中、垂直居中、水平垂直居中"></a>1、水平居中、垂直居中、水平垂直居中</h3><p><a href="https://cjy1.github.io/2019/10/16/css%EF%BC%9A%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/">参见总结：css：水平垂直居中</a></p>
<h3 id="2、单列、两列、三列布局"><a href="#2、单列、两列、三列布局" class="headerlink" title="2、单列、两列、三列布局"></a>2、单列、两列、三列布局</h3><p><a href="https://cjy1.github.io/2019/10/27/css%EF%BC%9A%E5%8D%95%E5%88%97%E3%80%81%E4%B8%A4%E5%88%97%E3%80%81%E4%B8%89%E5%88%97%E5%B8%83%E5%B1%80/">参照总结：css：单列、两列、三列布局</a></p>
<h2 id="十二、css3-新特性"><a href="#十二、css3-新特性" class="headerlink" title="十二、css3 新特性"></a>十二、css3 新特性</h2><p><a href="https://cjy1.github.io/2019/10/19/css%EF%BC%9Acss3%E5%B1%9E%E6%80%A7/">参见总结：css：css3 属性</a></p>
<h2 id="十三、BFC-规范"><a href="#十三、BFC-规范" class="headerlink" title="十三、BFC 规范"></a>十三、BFC 规范</h2><p><a href="https://cjy1.github.io/2019/10/27/css%EF%BC%9ABFC%E8%A7%84%E8%8C%83/">参照总结：css：BFC 规范</a></p>
<h2 id="十四、flex-布局"><a href="#十四、flex-布局" class="headerlink" title="十四、flex 布局"></a>十四、flex 布局</h2><p><a href="https://cjy1.github.io/2019/10/13/css%EF%BC%9Aflex%E5%B8%83%E5%B1%80/">参见总结：css：flex 布局</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>总结：javascript</title>
    <url>/2019/10/24/%E6%80%BB%E7%BB%93%EF%BC%9Ajavascript/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、数据类型及检测"><a href="#一、数据类型及检测" class="headerlink" title="一、数据类型及检测"></a>一、数据类型及检测</h2><p><a href="https://cjy1.github.io/2019/10/13/JS%EF%BC%9Atypeof%E3%80%81instanceof%E4%BB%A5%E5%8F%8Aobject-prototyte-tostring-call/">参见总结：JS：typeof、instanceof 以及 Object.prototyte.toString.call()</a></p>
<a id="more"></a>

<h2 id="二、原型与原型链、继承"><a href="#二、原型与原型链、继承" class="headerlink" title="二、原型与原型链、继承"></a>二、原型与原型链、继承</h2><p><a href="https://cjy1.github.io/2019/10/15/JS%EF%BC%9A%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/">参见总结：JS：原型、原型链继承</a></p>
<h2 id="三、闭包"><a href="#三、闭包" class="headerlink" title="三、闭包"></a>三、闭包</h2><h2 id="四、浅拷贝和深拷贝"><a href="#四、浅拷贝和深拷贝" class="headerlink" title="四、浅拷贝和深拷贝"></a>四、浅拷贝和深拷贝</h2><p><a href="https://cjy1.github.io/2020/02/24/JS%EF%BC%9A%E8%B5%8B%E5%80%BC%E3%80%81%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/">参见总结：JS：赋值、深拷贝和浅拷贝</a></p>
<h2 id="五、防抖和节流"><a href="#五、防抖和节流" class="headerlink" title="五、防抖和节流"></a>五、防抖和节流</h2><p>防抖：事件被触发 n 秒之后再执行回调，如果在这段时间之内又被触发，则重新计时。</p>
<p>节流：规定在单位时间之内只能触发一次，如果触发了多次只有一次生效。</p>
<p><a href="https://juejin.im/post/5b8de829f265da43623c4261">7 分钟理解 JS 的节流、防抖及使用场景</a></p>
<p><a href="https://juejin.im/post/5c87b54ce51d455f7943dddb#chapter-three-one">2019 面试准备 - JS 防抖与节流</a></p>
<h2 id="六、数组方法、数组去重"><a href="#六、数组方法、数组去重" class="headerlink" title="六、数组方法、数组去重"></a>六、数组方法、数组去重</h2><p><a href="https://cjy1.github.io/2019/10/14/JS%EF%BC%9A%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/">参见总结：JS：数组方法</a></p>
<p><a href="https://cjy1.github.io/2019/10/16/JS%EF%BC%9A%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/">参见总结：JS：数组去重</a></p>
<h2 id="七、作用域和作用域链"><a href="#七、作用域和作用域链" class="headerlink" title="七、作用域和作用域链"></a>七、作用域和作用域链</h2><h2 id="八、this-的指向和-new-的过程"><a href="#八、this-的指向和-new-的过程" class="headerlink" title="八、this 的指向和 new 的过程"></a>八、this 的指向和 new 的过程</h2><p><a href="https://cjy1.github.io/2019/10/15/ES6%EF%BC%9Athis/">参见总结：ES6：this</a></p>
<h2 id="九、JavaScript-有哪些垃圾回收机制？"><a href="#九、JavaScript-有哪些垃圾回收机制？" class="headerlink" title="九、JavaScript 有哪些垃圾回收机制？"></a>九、JavaScript 有哪些垃圾回收机制？</h2><ol>
<li><p>标记清除（mark and sweep）</p>
<p>这是 JavaScript 最常见的垃圾回收方式。当变量进入执行环境的时候,比如在函数中声明一个变量，垃圾回收器将其标记为”进入环境”。当变量离开环境的时候（函数执行结束），将其标记为“离开环境”。</p>
<p>垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量，以及被环境中变量所引用的变量（闭包）的标记。在完成这些之后仍然存在的标记就是要删除的变量。</p>
</li>
<li><p>引用计数</p>
<p>在低版本的 IE 中经常发生内存泄漏，很多时候就是因为它采用引用计数的方式进行垃圾回收。引用计数的策略是跟踪记录每个值被使用的次数。当声明了一个变量并将一个引用类型赋值给该变量的时候，这个值的引用次数就加 1,。如果该变量的值变成另外一个，则这个值得引用次数减 1，当这个值得引用次数变为 0 的时候，说明没有变量在使用，这个值没法被访问.因此，可以将它占用的空间回收，这样垃圾回收器会在运行的时候清理引用次数为 0 的值占用的空间。</p>
<p>在 IE 中虽然 JavaScript 对象通过标记清除方式进行垃圾回收，但是 BOM 与 DOM 对象是引用计数的方式回收垃圾的。也就是说，只要涉及 BOM 和 DOM，就会出现循环引用问题。</p>
</li>
</ol>
<h2 id="十、列举几种类型的-DOM-节点"><a href="#十、列举几种类型的-DOM-节点" class="headerlink" title="十、列举几种类型的 DOM 节点"></a>十、列举几种类型的 DOM 节点</h2><ul>
<li>整个文档是一个文档（Document）节点</li>
<li>每个 HTML 标签是一个元素（Element）节点</li>
<li>每一个 HTML 属性是一个属性（Attribute）节点</li>
<li>包含在 HTML 元素中的文本是文本（Text）节点</li>
</ul>
<h2 id="十一、谈谈-script-标签中-defer-和-async-属性的区别"><a href="#十一、谈谈-script-标签中-defer-和-async-属性的区别" class="headerlink" title="十一、谈谈 script 标签中 defer 和 async 属性的区别"></a>十一、谈谈 script 标签中 defer 和 async 属性的区别</h2><ol>
<li>defer 属性规定是否延迟执行脚本，直到页面加载为止。async 属性规定脚本一旦可用，就异步执行；</li>
<li>defer 并行加载 JavaScript 文件，会按照页面上 script 标签的顺序执行。async 并行加载 JavaScript 文件，下载完成立即执行，不会按照页面上 script 标签的顺序执行。</li>
</ol>
<h2 id="十二、encodeURI-和-decodeURI-的作用是什么？"><a href="#十二、encodeURI-和-decodeURI-的作用是什么？" class="headerlink" title="十二、encodeURI()和 decodeURI()的作用是什么？"></a>十二、encodeURI()和 decodeURI()的作用是什么？</h2><p>encodeURI()用于将 URL 转换为十六进制编码，而 decodeURI()用于将编码的 URL 转换成正常的 URL。</p>
<h2 id="十三、为什么不建议在-JavaScript-中使用-innerHTML？"><a href="#十三、为什么不建议在-JavaScript-中使用-innerHTML？" class="headerlink" title="十三、为什么不建议在 JavaScript 中使用 innerHTML？"></a>十三、为什么不建议在 JavaScript 中使用 innerHTML？</h2><p>通过 innerHTML 修改内容，每次都会刷新，因此很慢。在 innerHTML 中没有验证的机会，因此更容易在文档中插入错误代码，使网页不稳定。</p>
<h2 id="十四、在-DOM-操作中怎样创建、添加、移除、替换、插入和查找节点？"><a href="#十四、在-DOM-操作中怎样创建、添加、移除、替换、插入和查找节点？" class="headerlink" title="十四、在 DOM 操作中怎样创建、添加、移除、替换、插入和查找节点？"></a>十四、在 DOM 操作中怎样创建、添加、移除、替换、插入和查找节点？</h2><ol>
<li>创建节点</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">createDocumentFragment</span><span class="params">()</span></span> <span class="comment">// 创建一个DOM片段</span></span><br><span class="line"><span class="function"><span class="title">createElement</span><span class="params">()</span></span>  <span class="comment">//创建一个具体的元素</span></span><br><span class="line"><span class="function"><span class="title">createTextNode</span><span class="params">()</span></span>  <span class="comment">//创建一个文本节点</span></span><br></pre></td></tr></table></figure>

<p>2.添加、移除、替换、插入节点</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">appendChild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">removeChild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">replaceChild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">insertBefore</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查找节点</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">getElementByTagName</span><span class="params">()</span></span>  <span class="comment">//通过标签名称查找节点</span></span><br><span class="line"><span class="function"><span class="title">getElementByName</span><span class="params">()</span></span>  <span class="comment">//通过元素的name属性查找节点（IE容错能力较强，会得到一个数组，其中包括id等于name值得节点）</span></span><br><span class="line"><span class="function"><span class="title">getElementById</span><span class="params">()</span></span>  <span class="comment">//通过元素Id查找节点，具有唯一值</span></span><br></pre></td></tr></table></figure>

<h2 id="十五、null-和-undefined-的区别是什么？"><a href="#十五、null-和-undefined-的区别是什么？" class="headerlink" title="十五、null 和 undefined 的区别是什么？"></a>十五、null 和 undefined 的区别是什么？</h2><p>null 是一个表示“无”的对象，转为数值时为 0；undefined 是一个表示“无”的原始值，转为数值时为 NaN。</p>
<p>当声明的变量还未初始化时，变量的默认值为 undefined。</p>
<p>null 用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象。</p>
<p>undefined 表示“缺少值”，即此处应该有一个值，但是还没有定义，典型用法是：</p>
<ol>
<li>如果变量声明了，但是没有赋值，它就等于 undefined；</li>
<li>当调用函数时，如果没有提供应该提供的参数，该参数就等于 undefined；</li>
<li>如果对象没有赋值，该属性的值为 undefined；</li>
<li>当函数没有返回值时，默认返回 undefined。</li>
</ol>
<p>null 表示“没有对象”，即此处不应该有值，典型用法是：</p>
<ol>
<li>作为函数的参数，表示该函数的参数不是对象；</li>
<li>作为对象原型链的终点。</li>
</ol>
<h2 id="十六、JavaScript-延迟加载的方式有哪些？"><a href="#十六、JavaScript-延迟加载的方式有哪些？" class="headerlink" title="十六、JavaScript 延迟加载的方式有哪些？"></a>十六、JavaScript 延迟加载的方式有哪些？</h2><p>包括 defer 和 async，动态创建 DOM（创建 script，插入 DOM 中，加载完毕后回调，按需异步载入 JavaScript）。</p>
<h2 id="十七、call、apply、bind"><a href="#十七、call、apply、bind" class="headerlink" title="十七、call、apply、bind"></a>十七、call、apply、bind</h2><p><a href="https://cjy1.github.io/2019/10/15/JS%EF%BC%9Acall%E3%80%81apply%E3%80%81bind/">参见总结：JS：call、apply、bind</a></p>
<h2 id="十八、哪些操作会造成内存泄漏？"><a href="#十八、哪些操作会造成内存泄漏？" class="headerlink" title="十八、哪些操作会造成内存泄漏？"></a>十八、哪些操作会造成内存泄漏？</h2><p>内存泄漏指不再拥有或需要任何对象（数据）之后，它们仍然存在于内存中。</p>
<p><strong>提示：</strong> 垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的唯一引用是循环的，那么该对象占用的内存立即被回收。</p>
<p>如果 settimeout 的第一个参数使用字符串而非函数，会引发内存泄漏。</p>
<p>闭包、控制台日志，循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）等会造成内存泄漏。</p>
<h2 id="十九、列举-IE-与-Firefox-的不同之处。"><a href="#十九、列举-IE-与-Firefox-的不同之处。" class="headerlink" title="十九、列举 IE 与 Firefox 的不同之处。"></a>十九、列举 IE 与 Firefox 的不同之处。</h2><p>不同之处如下。</p>
<ol>
<li>IE 支持 currentStyle，Firefox 使用 getComputStyle；</li>
<li>IE 使用 innerText，Firefox 使用 textContent;</li>
<li>在透明度过滤镜方面，IE 使用 filter:alpha(opacity = num); Firefox 使用-moz-opacity:num；</li>
<li>在事件方面，IE 使用 attachEvent；Firefox 使用 addEventListener；</li>
<li>对于鼠标位置：IE 使用 event.clientX；Firefox 使用 event.pageX；</li>
<li>IE 使用 event.srcElement；Firefox 使用 event.target。</li>
<li>要消除 list 圆点，IE 中仅需使 margin：0 即可达到最终效果，Firefox 中需要设置 margin：0，padding：0，list-style：none；</li>
<li>css 圆角：IE7 以下不支持圆角。</li>
</ol>
<h2 id="二十、如何实现异步编程？"><a href="#二十、如何实现异步编程？" class="headerlink" title="二十、如何实现异步编程？"></a>二十、如何实现异步编程？</h2><ol>
<li>通过回调函数，优点是简单、容易理解和部署；缺点是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程混乱，而且每个任务只能指定一个回调函数。</li>
<li>通过事件监听，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以“去耦合”（Decoupling），有利于实现模块化；缺点是整个程序都要变成事件驱动型，运行流程会变得恨不清晰。</li>
<li>采用发布/订阅方式，性质与“事件监听”类似，但是明显优于后者；</li>
<li>通过 Promise 对象实现，Promise 对象是 CommonJS 工作组提出的一种规范，旨在为异步编程提供统一接口。它的思想是，每一个异步任务返回一个 Promise 对象，该对象有一个 then 方法，允许指定回调函数。</li>
</ol>
<h2 id="二十一、请解释一下-JavaScript-的同源策略。"><a href="#二十一、请解释一下-JavaScript-的同源策略。" class="headerlink" title="二十一、请解释一下 JavaScript 的同源策略。"></a>二十一、请解释一下 JavaScript 的同源策略。</h2><p>同源策略是客户端脚本（尤其是 JavaScript）的重要安全度量标准。它最早出自 Netscape Navigator 2.0，目的是防止某个文档或脚本从多个不同源装载。</p>
<p>这里的同源策略指的是协议、域名、端口相同。同源策略是一种安全协议。指一段脚本只能读取来自同一来源的窗口和文档的属性。</p>
<h2 id="二十二、为什么要有同源限制？"><a href="#二十二、为什么要有同源限制？" class="headerlink" title="二十二、为什么要有同源限制？"></a>二十二、为什么要有同源限制？</h2><p>我们举例说明，比如一个黑客，他利用 Iframe 把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名、密码登录时，他的页面就可以通过 JavaScript 读取到你表单上 input 的内容，这样黑客就会轻松得到你的用户名和密码。</p>
<h2 id="二十三、map-filter-和-reduce"><a href="#二十三、map-filter-和-reduce" class="headerlink" title="二十三、map,filter 和 reduce"></a>二十三、map,filter 和 reduce</h2><p><a href="">参见总结：JS：map、filter、reduce</a></p>
<h2 id="二十四、前端模块化"><a href="#二十四、前端模块化" class="headerlink" title="二十四、前端模块化"></a>二十四、前端模块化</h2><p><a href="https://chajianyuan.github.io/2019/10/20/JS%EF%BC%9A%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/">参见总结：JS：前端模块化</a></p>
<h2 id="二十五、数组方法"><a href="#二十五、数组方法" class="headerlink" title="二十五、数组方法"></a>二十五、数组方法</h2><p><a href="">参见总结：JS：数组方法</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>总结：html</title>
    <url>/2019/10/24/%E6%80%BB%E7%BB%93%EF%BC%9Ahtml/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、HTML-语义化"><a href="#一、HTML-语义化" class="headerlink" title="一、HTML 语义化"></a>一、HTML 语义化</h2><h3 id="1、含义"><a href="#1、含义" class="headerlink" title="1、含义"></a>1、含义</h3><p>语义化的含义就是用正确的标签做正确的事情</p>
<a id="more"></a>

<h3 id="2、优势"><a href="#2、优势" class="headerlink" title="2、优势"></a>2、优势</h3><p>（1）便于对浏览器、搜索引擎解析</p>
<p>（2）便于盲人浏览网页</p>
<p>（3）便于阅读源代码的人对网站进行分开，维护和理解</p>
<h3 id="3、有哪些语义化的标签"><a href="#3、有哪些语义化的标签" class="headerlink" title="3、有哪些语义化的标签"></a>3、有哪些语义化的标签</h3><p>&lt; h1 &gt; - &lt; h6 &gt;、&lt; p &gt;、&lt; ul &gt;、&lt; ol &gt;、&lt; li&gt;、&lt; dl&gt;、&lt; dt&gt;、&lt; dd&gt;、&lt; em&gt;、&lt; strong&gt;、&lt; em&gt;、&lt; table&gt;、&lt; thead&gt;、&lt; tbody&gt;、&lt; td&gt;、&lt; th&gt;、&lt; caption&gt;等</p>
<h2 id="二、HTML5-新标签"><a href="#二、HTML5-新标签" class="headerlink" title="二、HTML5 新标签"></a>二、HTML5 新标签</h2><ul>
<li><code>header元素</code>：header 元素代表“网页”或“section”的页眉。</li>
<li><code>footer元素</code>：footer 元素代表“网页”或“section”的页脚，通常含有该节的一些基本信息，譬如：作者，相关文档链接，版权资料。</li>
<li><code>hgroup元素</code>：</li>
<li><code>nav元素</code>：nav 元素代表页面的导航链接区域。用于定义页面的主要导航部分。</li>
<li><code>aside元素</code>：aside 元素被包含在 article 元素中作为主要内容的附属信息部分，其中的内容可以是与当前文章有关的相关资料、标签、名次解释等。（特殊的 section）</li>
<li><code>section元素</code>：section 元素代表文档中的“节”或“段”，“段”可以是指一篇文章里按照主题的分段；“节”可以是指一个页面里的分组。section 通常还带标题，虽然 html5 中 section 会自动给标题 h1-h6 降级，但是最好手动给他们降级。</li>
<li><code>article元素</code>：article 元素最容易跟 section 和 div 容易混淆，其实 article 代表一个在文档，页面或者网站中自成一体的内容，其目的是为了让开发者独立开发或重用。譬如论坛的帖子，博客上的文章，一篇用户的评论，一个互动的 widget 小工具。（特殊的 section）除了它的内容，article 会有一个标题（通常会在 header 里），会有一个 footer 页脚。</li>
</ul>
<h2 id="三、常见浏览器及其内核"><a href="#三、常见浏览器及其内核" class="headerlink" title="三、常见浏览器及其内核"></a>三、常见浏览器及其内核</h2><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">Chrome</th>
<th align="center">Firefox</th>
<th align="center">Safari</th>
<th align="center">IE</th>
<th align="center">Opera</th>
</tr>
</thead>
<tbody><tr>
<td align="center">内核</td>
<td align="center">Blink</td>
<td align="center">Gecko</td>
<td align="center">Webkit</td>
<td align="center">Trident</td>
<td align="center">Bink</td>
</tr>
</tbody></table>
<h2 id="四、-lt-script-gt-和-lt-link-gt-或者是-src-和-href-的区别"><a href="#四、-lt-script-gt-和-lt-link-gt-或者是-src-和-href-的区别" class="headerlink" title="四、 &lt; script &gt;和&lt; link &gt;或者是 src 和 href 的区别"></a>四、 &lt; script &gt;和&lt; link &gt;或者是 src 和 href 的区别</h2><ol>
<li>src 表示来源地址，用在 img、script、iframe 等元素上；</li>
<li>href 表示超文本引用，用在 link、a 等元素上；</li>
<li>src 的内容是页面必不可少的一部分，表示引入；而 href 的的内容与该页面有关联，表示引用；</li>
<li>src 用于替代这个元素，而 href 用于建立这个标签与外部资源之间的关系。</li>
</ol>
<h2 id="五、-lt-head-gt-中都有什么元素"><a href="#五、-lt-head-gt-中都有什么元素" class="headerlink" title="五、&lt; head &gt;中都有什么元素"></a>五、&lt; head &gt;中都有什么元素</h2><h3 id="1、-lt-base-gt"><a href="#1、-lt-base-gt" class="headerlink" title="1、&lt; base &gt;"></a>1、&lt; base &gt;</h3><p>为页面上的所有链接规定默认地址或默认目标</p>
<p>通常情况下，浏览器会从当前文档的 URL 中提取相应的元素来填写相对 URL 中的空白。</p>
<p>使用 &lt; base &gt; 标签可以改变这一点。浏览器随后将不再使用当前文档的 URL，而使用指定的基本 URL 来解析所有的相对 URL。这其中包括 &lt; a &gt;、&lt; img &gt;、&lt; link &gt;、&lt; form &gt; 标签中的 URL。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://www.w3school.com.cn/i/&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、-lt-link-gt"><a href="#2、-lt-link-gt" class="headerlink" title="2、&lt; link &gt;"></a>2、&lt; link &gt;</h3><p>定义文档与外部资源的关系，最常见的就是链接样式表。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attribute">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;theme.css&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3、-lt-script-gt"><a href="#3、-lt-script-gt" class="headerlink" title="3、&lt; script &gt;"></a>3、&lt; script &gt;</h3><p>用于定义用户脚本，比如 JavaScript。script 元素既可以包含脚本语言，也可以通过 src 属性指向外部脚本文件。必须的 type 属性规定脚本的 MIME 类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="built_in">document</span>.write(<span class="string">&quot;Hello World!&quot;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、-lt-meta-gt"><a href="#4、-lt-meta-gt" class="headerlink" title="4、&lt; meta &gt;"></a>4、&lt; meta &gt;</h3><p>可提供有关页面的元信息，比如针对搜索引擎和更新频度的描述和关键词。定义了与文档相关联的名称/值对。</p>
<p><code>&lt;meta name=&quot;keywords&quot; content=&quot;HTML,ASP,PHP,SQL&quot;&gt;</code></p>
<h3 id="5、-lt-style-gt"><a href="#5、-lt-style-gt" class="headerlink" title="5、&lt; style &gt;"></a>5、&lt; style &gt;</h3><p>用于为 html 文档定义样式信息。type 属性是必须的，定义 style 元素的内容，唯一可能的值是“text/css”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:red&#125;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">p</span> &#123;<span class="attribute">color</span>:blue&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6、-lt-title-gt"><a href="#6、-lt-title-gt" class="headerlink" title="6、&lt; title &gt;"></a>6、&lt; title &gt;</h3><p>定义文档的标题，通常是现实在浏览器窗口的标题栏或者是状态栏上。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;title&gt;</span>XHTML <span class="keyword">Tag</span> <span class="title">Reference</span><span class="tag">&lt;/title&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="六、本地存储"><a href="#六、本地存储" class="headerlink" title="六、本地存储"></a>六、本地存储</h2><p><a href="https://cjy1.github.io/2019/10/26/cookie%E3%80%81sessionStorage%E3%80%81localStorage%E8%AF%A6%E7%BB%86%E8%AE%B2%E8%A7%A3/">参见总结：cookie、session、sessionStorage、localStorage</a></p>
<h2 id="七、websocket"><a href="#七、websocket" class="headerlink" title="七、websocket"></a>七、websocket</h2><p><a href="https://cjy1.github.io/2019/10/26/webSocket%E5%AD%A6%E4%B9%A0/">参见总结：webSocket 学习</a></p>
<h2 id="八、W3C-标准"><a href="#八、W3C-标准" class="headerlink" title="八、W3C 标准"></a>八、W3C 标准</h2><p>w3c 标准不是某一个标准，而是一系列标准的集合，网页主要由三部分组成：结构（structure）、表现（Presentation）、行为（behavior）</p>
<h3 id="1、结构标准语言"><a href="#1、结构标准语言" class="headerlink" title="1、结构标准语言"></a>1、结构标准语言</h3><h4 id="1-1-可扩展标记语言（XML）"><a href="#1-1-可扩展标记语言（XML）" class="headerlink" title="1.1 可扩展标记语言（XML）"></a>1.1 可扩展标记语言（XML）</h4><p>和 HTML 一样，XML 同样来源于标准通用标记语言，可扩展标记语言和标准通用标记语言都是能定义其他语言的语言。XML 最初设计的目的是弥补 HTML 的不足，以强大的扩展性满足网络信息发布的需要，后来逐渐用于网络数据的转换和描述。</p>
<h4 id="1-2-可扩展超文本标记语言（XHTML）"><a href="#1-2-可扩展超文本标记语言（XHTML）" class="headerlink" title="1.2 可扩展超文本标记语言（XHTML）"></a>1.2 可扩展超文本标记语言（XHTML）</h4><p><strong>HTML 和 XHTML 的共同点</strong></p>
<ul>
<li>所有的标记都必须有一个对应的结束标记</li>
<li>所有的标签的元素和属性的名字都必须使用小写</li>
<li>所有的 XML 标记都必须合理嵌套</li>
<li>所有的属性都必须用“ ”引起来</li>
<li>所有的“&lt;”和“&amp;”特殊符号都用编码表示</li>
<li>给所有属性赋一个值</li>
<li>不要在注释内容中使用“–”</li>
<li>图片必须有说明文字</li>
</ul>
<p><strong>HTML 和 XHTML 的区别</strong></p>
<ul>
<li>HTML 是一种基于 web 网页的设计语言，XHTML 是一种基于 XML、语法严格、标准的设计语言</li>
<li>XHTML 元素必须正确的嵌套，元素必须关闭，标签必须小写，必须有根元素；HTML 没有这些限制</li>
</ul>
<h3 id="2、表现标准语言"><a href="#2、表现标准语言" class="headerlink" title="2、表现标准语言"></a>2、表现标准语言</h3><h4 id="2-1-层叠样式表（css）"><a href="#2-1-层叠样式表（css）" class="headerlink" title="2.1 层叠样式表（css）"></a>2.1 层叠样式表（css）</h4><p>万维网联盟创建 CSS 标准的目的是以 CSS 取代 HTML 表格式布局、帧和其他表现的语言。纯 CSS 布局与结构式 XHTML 相结合能帮助设计师分离外观与结构，使站点的访问及维护更加容易。</p>
<h3 id="3、行为标准"><a href="#3、行为标准" class="headerlink" title="3、行为标准"></a>3、行为标准</h3><h4 id="3-1-文档对象模型（DOM）"><a href="#3-1-文档对象模型（DOM）" class="headerlink" title="3.1 文档对象模型（DOM）"></a>3.1 文档对象模型（DOM）</h4><p>根据 W3C DOM 规范，DOM 是一种与浏览器，平台，语言的接口，使得你可以访问页面其他的标准组件。简单理解，DOM 解决了 Netscaped 的 Javascript 和 Microsoft 的 Jscript 之间的冲突，给予 web 设计师和开发者一个标准的方法，让他们来访问他们站点中的数据、脚本和表现层对象。</p>
<h4 id="3-2-ECMAScript"><a href="#3-2-ECMAScript" class="headerlink" title="3.2 ECMAScript"></a>3.2 ECMAScript</h4><p>ECMAScript 是 ECMA(European Computer Manufacturers Association)制定的标准脚本语言（JAVAScript）。</p>
<h2 id="九、img-标签上的-title-和-alt-属性的区别"><a href="#九、img-标签上的-title-和-alt-属性的区别" class="headerlink" title="九、img 标签上的 title 和 alt 属性的区别"></a>九、img 标签上的 title 和 alt 属性的区别</h2><ul>
<li>title 的功能是为元素提供标题信息，即当光标悬浮在标签上后显示的信息</li>
<li>alt 的功能是图片的替换文案，即当图片不能正常显示的时（如加载失败），用文字代替</li>
</ul>
<h2 id="十、空元素"><a href="#十、空元素" class="headerlink" title="十、空元素"></a>十、空元素</h2><p>空元素也就是单标签元素：&lt; br &gt;、&lt; hr &gt;、&lt; img &gt;、&lt; input &gt;、&lt; link &gt;、&lt; meta &gt;</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>html：获取dom节点</title>
    <url>/2021/04/26/html%EF%BC%9A%E8%8E%B7%E5%8F%96dom%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h3 id="一、通过元素类型的方式"><a href="#一、通过元素类型的方式" class="headerlink" title="一、通过元素类型的方式"></a>一、通过元素类型的方式</h3><h4 id="1-通过id名称-——-getElementById"><a href="#1-通过id名称-——-getElementById" class="headerlink" title="1. 通过id名称 —— getElementById"></a>1. 通过id名称 —— getElementById</h4><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;id名称&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>返回一个dom节点</p>
<p>⚠️ 如果存在多个同名id，只取第一个</p>
<p><img src="https://github.com/chajianyuan/picture/blob/master/WX20210427-000254@2x.png?raw=true"></p>
<a id="more"></a>

<h4 id="2-通过name属性名称-——-getElementsByName"><a href="#2-通过name属性名称-——-getElementsByName" class="headerlink" title="2. 通过name属性名称 —— getElementsByName"></a>2. 通过name属性名称 —— getElementsByName</h4><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>返回一个类数组</p>
<p><img src="https://github.com/chajianyuan/picture/blob/master/WX20210427-000305@2x.png?raw=true"></p>
<h4 id="3-通过标签名称-——-getElementsByTagName"><a href="#3-通过标签名称-——-getElementsByTagName" class="headerlink" title="3. 通过标签名称 —— getElementsByTagName"></a>3. 通过标签名称 —— getElementsByTagName</h4><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;div&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>返回一个类数组</p>
<h4 id="4-通过类名-——-getElementsByClassName"><a href="#4-通过类名-——-getElementsByClassName" class="headerlink" title="4. 通过类名 —— getElementsByClassName"></a>4. 通过类名 —— getElementsByClassName</h4><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;class&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>返回一个类数组</p>
<p><img src="https://github.com/chajianyuan/picture/blob/master/WX20210427-000314@2x.png?raw=true"></p>
<h4 id="5-获取html-——-documentElement"><a href="#5-获取html-——-documentElement" class="headerlink" title="5. 获取html —— documentElement"></a>5. 获取html —— documentElement</h4><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/chajianyuan/picture/blob/master/WX20210427-000615@2x.png?raw=true"></p>
<h4 id="6-获取body-——-body"><a href="#6-获取body-——-body" class="headerlink" title="6. 获取body —— body"></a>6. 获取body —— body</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">document.<span class="keyword">body</span></span><br></pre></td></tr></table></figure>

<h4 id="7-通过选择器获取一个元素-——-querySelector"><a href="#7-通过选择器获取一个元素-——-querySelector" class="headerlink" title="7. 通过选择器获取一个元素 —— querySelector"></a>7. 通过选择器获取一个元素 —— querySelector</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">&#x27;.ouvJEz&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/chajianyuan/picture/blob/master/WX20210427-000934@2x.png?raw=true"></p>
<h4 id="8-通过选择器获取一组元素-——-querySelectorAll"><a href="#8-通过选择器获取一组元素-——-querySelectorAll" class="headerlink" title="8. 通过选择器获取一组元素 —— querySelectorAll"></a>8. 通过选择器获取一组元素 —— querySelectorAll</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.<span class="built_in">querySelectorAll</span>(<span class="string">&#x27;.ouvJEz&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/chajianyuan/picture/blob/master/WX20210427-001002@2x.png?raw=true"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>总结：浏览器</title>
    <url>/2019/10/24/%E6%80%BB%E7%BB%93%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、一个-URL-从输入到显示的过程"><a href="#一、一个-URL-从输入到显示的过程" class="headerlink" title="一、一个 URL 从输入到显示的过程"></a>一、一个 URL 从输入到显示的过程</h2><p><a href="https://cjy1.github.io/2020/03/24/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AAURL%E4%BB%8E%E8%BE%93%E5%85%A5%E5%88%B0%E6%98%BE%E7%A4%BA%E7%9A%84%E8%BF%87%E7%A8%8B/">参见总结：浏览器：一个 URL 从输入到显示的过程</a></p>
<a id="more"></a>

<h2 id="二、重绘和回流"><a href="#二、重绘和回流" class="headerlink" title="二、重绘和回流"></a>二、重绘和回流</h2><p><a href="https://cjy1.github.io/2019/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81/">参见总结：浏览器：重绘和回流</a></p>
<h2 id="三、内存泄漏"><a href="#三、内存泄漏" class="headerlink" title="三、内存泄漏"></a>三、内存泄漏</h2><p><a href="https://juejin.im/post/5cb33660e51d456e811d2687">JavaScript 中的垃圾回收和内存泄漏</a></p>
<h2 id="四、浏览器兼容性"><a href="#四、浏览器兼容性" class="headerlink" title="四、浏览器兼容性"></a>四、浏览器兼容性</h2><p><a href="https://juejin.im/post/59a3f2fe6fb9a0249471cbb4">浏览器兼容问题</a></p>
<h2 id="五、浏览器缓存机制"><a href="#五、浏览器缓存机制" class="headerlink" title="五、浏览器缓存机制"></a>五、浏览器缓存机制</h2><p><a href="https://cjy1.github.io/2019/10/20/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/">参见总结：浏览器：浏览器缓存机制</a></p>
<h2 id="六、事件机制"><a href="#六、事件机制" class="headerlink" title="六、事件机制"></a>六、事件机制</h2><p><a href="https://cjy1.github.io/2019/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/">参见总结：浏览器：事件机制</a></p>
<h2 id="七、事件循环机制"><a href="#七、事件循环机制" class="headerlink" title="七、事件循环机制"></a>七、事件循环机制</h2><p><a href="https://cjy1.github.io/2019/10/18/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEeventloop/">参见总结：浏览器：事件循环 Eventloop</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>总结：算法</title>
    <url>/2019/09/20/%E6%80%BB%E7%BB%93%EF%BC%9A%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h1 id="一、二叉树"><a href="#一、二叉树" class="headerlink" title="一、二叉树"></a>一、二叉树</h1><h2 id="1、二分查找"><a href="#1、二分查找" class="headerlink" title="1、二分查找"></a>1、二分查找</h2><p>二分查找也叫折半查找，他要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列</p>
<a id="more"></a>

<p><strong>算法步骤</strong></p>
<p>（1）设置查找区间初值，low 为 1，high 为表长；</p>
<p>（2）当 low 小于等于 high 时，循环执行以下操作：</p>
<p>​ ·mid 取值为 low 和 high 的中间值；</p>
<p>​ ·将给定值 key 与中间位置记录的关键字进行比较，若相等则查找成功，返回中间位置 mid；</p>
<p>​ ·若不相等则利用中间位置记录将表对分成前后两个子表。如果 key 比中间位置记录的关键字小，则 high 取为 mid-1，否则 low 取为 mid+1</p>
<p>（3）循环结束，说明查找区间为空，则查找失败，返回 0</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> midSearch(<span class="built_in">array</span>, key) &#123;</span><br><span class="line">        <span class="keyword">let</span> low = <span class="number">1</span>,</span><br><span class="line">          high = <span class="built_in">array</span>.length;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">          <span class="keyword">let</span> <span class="built_in">mid</span> = (high + low) / <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span> (key == <span class="built_in">array</span>[<span class="built_in">mid</span>]) &#123;</span><br><span class="line">            return <span class="built_in">mid</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; <span class="built_in">array</span>[<span class="built_in">mid</span>]) &#123;</span><br><span class="line">            high = <span class="built_in">mid</span> - <span class="number">1</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; <span class="built_in">array</span>[<span class="built_in">mid</span>]) &#123;</span><br><span class="line">            low = <span class="built_in">mid</span> + <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、二叉排序树"><a href="#2、二叉排序树" class="headerlink" title="2、二叉排序树"></a>2、二叉排序树</h2><h3 id="1）查找"><a href="#1）查找" class="headerlink" title="1）查找"></a>1）查找</h3><p><strong>算法步骤</strong></p>
<p>（1）若二叉排序树为空，则查找失败，返回空指针；</p>
<p>（2）若二叉排序树非空，将给定值 key 与根节点的关键字进行比较；</p>
<p>​ ·若 key 等于根节点关键字，则查找成功，返回根节点地址；</p>
<p>​ ·若 key 小于根节点关键字，则递归查找左子树；</p>
<p>​ ·若 key 大于根节点关键字，则递归查找右子树。</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">function <span class="built_in">erchasearch</span>(pNode, <span class="built_in">key</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (!pNode || pNode.val == <span class="built_in">key</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> pNode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">key</span> &lt; pNode.val) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">erchasearch</span>(pNode.left, <span class="built_in">key</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">key</span> &gt; pNode.val) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">erchasearch</span>(pNode.right, <span class="built_in">key</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2）插入"><a href="#2）插入" class="headerlink" title="2）插入"></a>2）插入</h3><p><strong>算法步骤</strong></p>
<p>（1）若二叉排序树为空，则将待插入节点 S 做为根节点插入到空树中；</p>
<p>（2）若二叉排序树非空，则将 key 与根节点的值进行比较：</p>
<p>​ ·若 key 小于根节点的值，则把 S 插入到左子树；</p>
<p>​ ·若 key 大于根节点的值，则把 S 插入到右子树。</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">function <span class="built_in">erchainsert</span>(pNode, <span class="built_in">key</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (!pNode) &#123;</span><br><span class="line"> 		pNode.val = <span class="built_in">key</span>;</span><br><span class="line"> 		<span class="keyword">return</span> pNode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">key</span> &lt; pNode.val) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">erchainsert</span>(pNode.left, <span class="built_in">key</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">key</span> &gt; pNode.val) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">erchainsert</span>(pNode.right, <span class="built_in">key</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3）删除"><a href="#3）删除" class="headerlink" title="3）删除"></a>3）删除</h3><p><strong>算法步骤</strong></p>
<p>（1）首先从二叉排序树的根节点开始查找关键字为 key 的带删除节点，如果树中不存在此节点，则不作任何操作；否则，假设被删除接地那为 p，其双亲节点为 f，PL 和 PR 分别表示其左子树和右子树 ，则只需修改其双亲节点的指针即可。</p>
<p>（2）若 p 节点只有左子树 PL 或者只有右子树 PR，此时只要令 PL 或 PR 直接成为其双亲节点 f 的左子树即可；</p>
<p>（3）若 p 节点的左子树和右子树均不为空，在删去 p 节点之前，中序遍历该二叉树得到的序列为{…CLC…QLQSLSPPRF…}，在删去 p 之后，为保持其他元素之间的相对位置不变，可以有两种处理方法：</p>
<p>​ ·令 p 的左子树为 f 的左子树，而 p 的右子树为 s 的右子树；</p>
<p>​ ·令 p 的直接前驱（或直接后继）替代 p，然后再从二叉排序树中删去它的直接前驱 （或直接后继），当以直接前驱 s 代替 p 时，由于 s 只有左子树 SL，在删去 s 之后，只要令 SL 为 s 的双亲 q 的右子树即可。</p>
<h2 id="3、平衡二叉树"><a href="#3、平衡二叉树" class="headerlink" title="3、平衡二叉树"></a>3、平衡二叉树</h2><p>平衡二叉树或者是空树，或者是具有如下特征的二叉排序树：</p>
<p>（1）左子树和右子树的深度之差的绝对值不超过 1；</p>
<p>（2）左子树和右子树也是平衡二叉树。</p>
<h1 id="二、排序"><a href="#二、排序" class="headerlink" title="二、排序"></a>二、排序</h1><h2 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h2><p><strong>基本思想</strong></p>
<p>在待排序序列中选两相邻记录的数字，如果反序则交换，直到没有反序的数列为止。</p>
<p><strong>算法步骤</strong></p>
<p>（1）比较相邻的元素，如果第一个比第二个大，就交换他们两个；</p>
<p>（2）对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</p>
<p>（3）针对所有的元素重复以上的步骤，除了最后一个；</p>
<p>（4）重复步骤 1-3，直到排序完成。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span><span class="params">(array)</span> &#123;</span></span><br><span class="line">	let len = array.<span class="built_in">length</span>;</span><br><span class="line">	<span class="keyword">for</span> (let <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; len; <span class="built_in">i</span>++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (let <span class="built_in">j</span> = <span class="number">0</span>; <span class="built_in">j</span> &lt; len - <span class="number">1</span>; <span class="built_in">j</span>++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (array[<span class="built_in">j</span>] &gt; array[<span class="built_in">j</span> + <span class="number">1</span>]) &#123;</span><br><span class="line">				let temp = array[<span class="built_in">j</span> + <span class="number">1</span>];</span><br><span class="line">				array[<span class="built_in">j</span> + <span class="number">1</span>] = array[<span class="built_in">j</span>];</span><br><span class="line">				array[<span class="built_in">j</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、快速排序"><a href="#2、快速排序" class="headerlink" title="2、快速排序"></a>2、快速排序</h2><p><strong>算法步骤</strong></p>
<p>（1）从数列中挑出一个元素，称为基准；</p>
<p>（2）重新排列数列，所有元素比基准小的摆放在基准前面，所有元素比基准大的摆在基准后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区操作；</p>
<p>（3）递归的把小于基准值元素的子数列和大于基准元素的子数列排序。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> quick<span class="constructor">Sort(<span class="params">array</span>, <span class="params">left</span>, <span class="params">right</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = <span class="built_in">array</span>.length,</span><br><span class="line">    partitionIndex,</span><br><span class="line">    left = typeof left<span class="operator"> == </span>&#x27;number&#x27; ? left : <span class="number">0</span>,</span><br><span class="line">    right = typeof right<span class="operator"> == </span>&#x27;number&#x27; ? right : len - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">    partitionIndex = partition(<span class="built_in">array</span>, left, right);</span><br><span class="line">    quick<span class="constructor">Sort(<span class="params">array</span>, <span class="params">left</span>, <span class="params">partitionIndex</span> - 1)</span>;</span><br><span class="line">    quick<span class="constructor">Sort(<span class="params">array</span>, <span class="params">partitionIndex</span> + 1, <span class="params">right</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="built_in">array</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分区操作</span></span><br><span class="line"><span class="keyword">function</span> partition(<span class="built_in">array</span>, left, right) &#123;</span><br><span class="line">  <span class="comment">//设定基准值pivot</span></span><br><span class="line">  <span class="keyword">let</span> pivot = left,</span><br><span class="line">    index = pivot + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &lt;= right; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span><span class="literal">[<span class="identifier">i</span>]</span> &lt; <span class="built_in">array</span><span class="literal">[<span class="identifier">pivot</span>]</span>) &#123;</span><br><span class="line">      swap(<span class="built_in">array</span>, i, index);</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换数据</span></span><br><span class="line"><span class="keyword">function</span> swap(<span class="built_in">array</span>, i, j) &#123;</span><br><span class="line">  <span class="keyword">let</span> temp = <span class="built_in">array</span><span class="literal">[<span class="identifier">j</span>]</span>;</span><br><span class="line">  <span class="built_in">array</span><span class="literal">[<span class="identifier">i</span>]</span> = <span class="built_in">array</span><span class="literal">[<span class="identifier">j</span>]</span>;</span><br><span class="line">  <span class="built_in">array</span><span class="literal">[<span class="identifier">j</span>]</span> = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">function <span class="built_in">quickSort</span>(arr) &#123;</span><br><span class="line">  <span class="keyword">let</span> quick = arr =&gt; &#123;</span><br><span class="line">    <span class="built_in">sort</span>(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">sort</span> = (arr, <span class="keyword">left</span>, <span class="keyword">right</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">left</span> &lt; <span class="keyword">right</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> center = findCenter(arr, <span class="keyword">left</span>, <span class="keyword">right</span>);</span><br><span class="line">      <span class="built_in">sort</span>(arr, <span class="number">0</span>, center - <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">sort</span>(arr, center, <span class="keyword">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> findCenter = (arr, <span class="keyword">left</span>, <span class="keyword">right</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = arr[<span class="keyword">left</span>];</span><br><span class="line">    <span class="keyword">let</span> index = <span class="keyword">left</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt; flag) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr, i, index);</span><br><span class="line">        index++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(arr, <span class="keyword">left</span>, index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">swap</span> = (arr, <span class="keyword">left</span>, <span class="keyword">right</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> mid = arr[<span class="keyword">left</span>];</span><br><span class="line">    arr[<span class="keyword">left</span>] = arr[<span class="keyword">right</span>];</span><br><span class="line">    arr[<span class="keyword">right</span>] = mid;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> quick(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序"></a>3、插入排序</h2><p><strong>主要思想</strong></p>
<p>每次将一个待排序的数字按其关键码的大小插入到一个已排好序的有序序列中，直到全部数字排好序。</p>
<p><strong>算法步骤</strong></p>
<p>（1）从第一个默认被排好序的元素开始；</p>
<p>（2）取出下一个元素，在已经排序的元素序列中从后向前扫描；</p>
<p>（3）如果已排序的元素大于取出的元素，则将其分别向后移动一位；</p>
<p>（4）直到找到已排序的元素中小于或等于取出的元素，将取出的元素放到他的后一位；</p>
<p>（5）重复步骤 2</p>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">array</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = <span class="keyword">array</span>.length,</span><br><span class="line">    preIndex, <span class="comment">//从后向前扫描索引</span></span><br><span class="line">    current; <span class="comment">//当前元素数值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    preIndex = i - <span class="number">1</span>;</span><br><span class="line">    current = <span class="keyword">array</span>[i];</span><br><span class="line">    <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">array</span>[preIndex] &gt; current) &#123;</span><br><span class="line">      <span class="keyword">array</span>[preIndex + <span class="number">1</span>] = <span class="keyword">array</span>[preIndex];</span><br><span class="line">      preIndex--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">array</span>[preIndex + <span class="number">1</span>] = current;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、希尔排序"><a href="#4、希尔排序" class="headerlink" title="4、希尔排序"></a>4、希尔排序</h2><p><strong>基本思想</strong></p>
<p>先将整个待排序序列分割成若干个子序序列，在子序列分别进行直接插入排序，待整个序列基本有序时，再对整体序列进行一次插入排序。</p>
<p><strong>算法步骤</strong></p>
<p>（1）选择一个增量序列 t1,t2,…,tk，其中 ti&gt;tj，tk=1;</p>
<p>（2）按增量序列个数 k，对序列进行 k 趟排序；</p>
<p>（3）每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序，仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="constructor">SellSort(<span class="params">array</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> len = <span class="built_in">array</span>.length;</span><br><span class="line">  <span class="keyword">for</span> (</span><br><span class="line">    <span class="keyword">let</span> gap = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>floor(len<span class="operator"> / </span><span class="number">2</span>);</span><br><span class="line">    gap &gt; <span class="number">0</span>;</span><br><span class="line">    gap = <span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>floor(gap<span class="operator"> / </span><span class="number">2</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">//多个分组交替执行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = gap; i &lt; <span class="built_in">array</span>.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> j = i,</span><br><span class="line">        current = <span class="built_in">array</span><span class="literal">[<span class="identifier">i</span>]</span>;</span><br><span class="line">      <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span><span class="operator"> &amp;&amp; </span>current &lt; <span class="built_in">array</span><span class="literal">[<span class="identifier">j</span> - <span class="identifier">gap</span>]</span>) &#123;</span><br><span class="line">        <span class="built_in">array</span><span class="literal">[<span class="identifier">j</span>]</span> = <span class="built_in">array</span><span class="literal">[<span class="identifier">j</span> - <span class="identifier">gap</span>]</span>;</span><br><span class="line">        j = j - gap;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">array</span><span class="literal">[<span class="identifier">j</span>]</span> = current;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="built_in">array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5、选择排序"><a href="#5、选择排序" class="headerlink" title="5、选择排序"></a>5、选择排序</h2><p><strong>基本思想</strong></p>
<p>首先在待排序序列中选出最小值，存放在排序序列起始位置，然后再从剩余未排序元素中继续寻找最小元素，放到已排序序列末尾。以此类推，直到所有元素均排序完毕。</p>
<p><strong>算法步骤</strong></p>
<p>（1）初始状态：无序区为 R[1…n]，有序区为空；</p>
<p>（2）第 i 趟排序（i=1,2,3…n-1）开始时当前有序区和无序区分别为 R[1…i-1]和 R[i..n]，该趟排序从当前无序区中选出关键字最小的记录 R[k]，将它与无序区中的第一个记录 R 交换，使 R[1…i]和 R[i+1…n]分别变为记录个数增加 1 个的新有序区和记录个数减少 1 个的新无序区；</p>
<p>（3）n-1 趟结束，数组有序化了</p>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">array</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = <span class="keyword">array</span>.length,</span><br><span class="line">    minIndex,</span><br><span class="line">    temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    minIndex = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">array</span>[j] &lt; <span class="keyword">array</span>[minIndex]) &#123;</span><br><span class="line">        <span class="comment">//寻找最小的数</span></span><br><span class="line">        minIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = <span class="keyword">array</span>[i];</span><br><span class="line">    <span class="keyword">array</span>[i] = <span class="keyword">array</span>[minIndex];</span><br><span class="line">    <span class="keyword">array</span>[minIndex] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>总结：网络协议</title>
    <url>/2019/10/24/%E6%80%BB%E7%BB%93%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、HTTP-HTTPS"><a href="#一、HTTP-HTTPS" class="headerlink" title="一、HTTP/HTTPS"></a>一、HTTP/HTTPS</h2><p><a href="https://cjy1.github.io/2020/03/25/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%EF%BC%9Ahttp%E5%92%8Chttps/">参见总结：网络协议：http 和 https</a></p>
<a id="more"></a>

<h2 id="二、HTTP-状态码"><a href="#二、HTTP-状态码" class="headerlink" title="二、HTTP 状态码"></a>二、HTTP 状态码</h2><p><a href="https://cjy1.github.io/2019/10/20/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%EF%BC%9Ahttp%E7%8A%B6%E6%80%81%E7%A0%81/">参见总结：网络协议：http 状态码</a></p>
<h2 id="三、跨域问题"><a href="#三、跨域问题" class="headerlink" title="三、跨域问题"></a>三、跨域问题</h2><p><a href="https://cjy1.github.io/2019/10/19/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F/">参见总结：网络协议：前端跨域</a></p>
<p><a href="https://juejin.im/post/5c23993de51d457b8c1f4ee1">掘金</a></p>
<h2 id="四、TCP-和-UDP"><a href="#四、TCP-和-UDP" class="headerlink" title="四、TCP 和 UDP"></a>四、TCP 和 UDP</h2><p><strong>TCP 和 UDP 的区别</strong></p>
<ul>
<li>TCP（Transmission Control Protocal，传输控制协议）是基于连接的协议，也就是说，在正式发送数据前，必须和对方建立可靠的连接。一个 TCP 连接必须要经过 3 次对话才能建立起来。</li>
<li>UDP（User Datagram Protocal，用户数据报协议）是与 TCP 相对应的协议。它是面向非连接的协议。他不与对方建立连接，而是直接就把数据包发送过。UDP 适用于一次只传输少量数据，对可靠性要求不高的应用环境。</li>
</ul>
<h2 id="五、HTTP-请求方法"><a href="#五、HTTP-请求方法" class="headerlink" title="五、HTTP 请求方法"></a>五、HTTP 请求方法</h2><ul>
<li><p><code>GET</code>：发送一个请求来获得服务器上的某一资源</p>
</li>
<li><p><code>POST</code>：向 URL 指定的资源提交数据或附加新的数据</p>
</li>
<li><p><code>PUT</code>：跟 post 很像，也是向服务器提交资源，但是 put 指定了资源在服务器上的位置，而 post 没有</p>
</li>
<li><p><code>HEAD</code>：只请求页面的首部</p>
</li>
<li><p><code>DELETE</code>：删除服务器上的某资源</p>
</li>
<li><p><code>OPTIONS</code>：用于获取当前 URL 所支持的方法，如果请求成功，会有一个<code>Allow</code> 的头包含类似“<code>GET</code>，<code>POST</code>”这样的信息</p>
</li>
<li><p><code>TRACE</code>：被用于激发一个远程的，应用层的请求消息回路</p>
</li>
<li><p><code>CONNECT</code>：把请求连接转换到透明的<code>TCP/IP</code> 通道</p>
<h2 id="七、post-和-get-的区别"><a href="#七、post-和-get-的区别" class="headerlink" title="七、post 和 get 的区别"></a>七、post 和 get 的区别</h2><p><a href="https://cjy1.github.io/2019/10/20/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%EF%BC%9Apost%E5%92%8Cget%E7%9A%84%E5%8C%BA%E5%88%AB/">参见总结：网络协议：post 和 get 的区别</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>总结：vue</title>
    <url>/2019/10/24/%E6%80%BB%E7%BB%93%EF%BC%9Avue/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、Vue-生命周期"><a href="#一、Vue-生命周期" class="headerlink" title="一、Vue 生命周期"></a>一、Vue 生命周期</h2><p><a href="https://cjy1.github.io/2019/10/19/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/">参见总结：vue：生命周期</a></p>
<a id="more"></a>

<h2 id="二、Vue-双向数据绑定原理"><a href="#二、Vue-双向数据绑定原理" class="headerlink" title="二、Vue 双向数据绑定原理"></a>二、Vue 双向数据绑定原理</h2><p><a href="https://cjy1.github.io/2019/10/19/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/">参见总结：vue：双向绑定</a></p>
<h2 id="三、v-show-和-v-if-的区别"><a href="#三、v-show-和-v-if-的区别" class="headerlink" title="三、v-show 和 v-if 的区别"></a>三、v-show 和 v-if 的区别</h2><p><strong>v-if</strong> 是<strong>真正</strong>的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<p><strong>v-show</strong> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。</p>
<p>所以，v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。</p>
<h2 id="四、MVVM"><a href="#四、MVVM" class="headerlink" title="四、MVVM"></a>四、MVVM</h2><p><a href="https://juejin.im/post/5af8eb55f265da0b814ba766">掘金：看完这篇关于 MVVM 的文章，面试通过率提升了 80%</a></p>
<h2 id="五、虚拟-DOM"><a href="#五、虚拟-DOM" class="headerlink" title="五、虚拟 DOM"></a>五、虚拟 DOM</h2><p><a href="https://juejin.im/post/5d12c931f265da1bb2773fcc">掘金：揭秘 Vue 中的 Virtual Dom</a></p>
<h2 id="六、key"><a href="#六、key" class="headerlink" title="六、key"></a>六、key</h2><p><img src="https://user-gold-cdn.xitu.io/2019/10/31/16e1f60b7d343768?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><br><img src="https://user-gold-cdn.xitu.io/2019/10/31/16e1f6105886daf5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><br>key 的作用就是在更新组件时判断两个节点是否相同。相同就复用，不相同就删除旧的创建新的。</p>
<ul>
<li>key 会用在虚拟 DOM 算法（diff 算法）中，用来辨别新旧节点；</li>
<li>不带 key 的时候会最大限度减少元素的变动，尽可能用相同的元素（就地复用）；</li>
<li>带 key 的时候，会基于相同的 key 来进行排列（相同的复用）；</li>
<li>带 key 还能触发过渡效果，以及触发组件的生命周期。</li>
</ul>
<h2 id="七、nextTick"><a href="#七、nextTick" class="headerlink" title="七、nextTick"></a>七、nextTick</h2><p><a href="https://juejin.im/post/5a6fdb846fb9a01cc0268618">掘金：简单理解 Vue 中的 nextTick</a></p>
<h2 id="八、template-编译"><a href="#八、template-编译" class="headerlink" title="八、template 编译"></a>八、template 编译</h2><p>详情步骤：首先，通过 compile 编译器把 template 编译成 AST 语法树（abstractsyntaxtree 即源代码的抽象语法结构的树状表现形式），compile 是 createCompiler 的返回值，createCompiler 是用以创建编译器的。另外 compile 还负责合并 option。</p>
<p>然后，AST 会经过 generate（将 AST 语法树转化成 renderfuntion 字符串的过程）得到 render 函数，render 的返回值是 VNode，VNode 是 Vue 的虚拟 DOM 节点，里面有（标签名、子节点、文本等等）</p>
<h2 id="九、组件间通讯"><a href="#九、组件间通讯" class="headerlink" title="九、组件间通讯"></a>九、组件间通讯</h2><p><a href="https://juejin.im/post/5cde0b43f265da03867e78d3">掘金：Vue 组件间通信六种方式（完整版）</a></p>
<h2 id="十、父子组件生命周期"><a href="#十、父子组件生命周期" class="headerlink" title="十、父子组件生命周期"></a>十、父子组件生命周期</h2><h3 id="1、加载渲染过程"><a href="#1、加载渲染过程" class="headerlink" title="1、加载渲染过程"></a>1、加载渲染过程</h3><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">父<span class="function"><span class="title">beforeCreate</span>-&gt;</span>父<span class="function"><span class="title">created</span>-&gt;</span>父<span class="function"><span class="title">beforeMount</span>-&gt;</span>子<span class="function"><span class="title">beforeCreate</span>-&gt;</span>子<span class="function"><span class="title">created</span>-&gt;</span>子<span class="function"><span class="title">beforeMount</span>-&gt;</span>子<span class="function"><span class="title">mounted</span>-&gt;</span>父mounted</span><br></pre></td></tr></table></figure>

<h3 id="2、子组件更新过程"><a href="#2、子组件更新过程" class="headerlink" title="2、子组件更新过程"></a>2、子组件更新过程</h3><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">父<span class="function"><span class="title">beforeUpdate</span>-&gt;</span>子<span class="function"><span class="title">beforeUpdate</span>-&gt;</span>子<span class="function"><span class="title">updated</span>-&gt;</span>父updated</span><br></pre></td></tr></table></figure>

<h3 id="3、父组件更新过程"><a href="#3、父组件更新过程" class="headerlink" title="3、父组件更新过程"></a>3、父组件更新过程</h3><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">父<span class="function"><span class="title">beforeUpdate</span>-&gt;</span>父updated</span><br></pre></td></tr></table></figure>

<h3 id="4、销毁过程"><a href="#4、销毁过程" class="headerlink" title="4、销毁过程"></a>4、销毁过程</h3><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">父<span class="function"><span class="title">beforeDestroy</span>-&gt;</span>子<span class="function"><span class="title">beforeDestroy</span>-&gt;</span>子<span class="function"><span class="title">destroyed</span>-&gt;</span>父destroyed</span><br></pre></td></tr></table></figure>

<h2 id="十一、keep-alive"><a href="#十一、keep-alive" class="headerlink" title="十一、keep-alive"></a>十一、keep-alive</h2><p>如果想把切换出去的组件保留在内存中，并保留它的状态或避免重新渲染。为此可以添加一个 keep-alive 指令</p>
<p><code>&lt;component:is=&#39;curremtView&#39; keep-alive&gt;&lt;/component&gt;</code></p>
<h2 id="十二、Vuex"><a href="#十二、Vuex" class="headerlink" title="十二、Vuex"></a>十二、Vuex</h2><p><a href="https://juejin.im/post/5bbe15dcf265da0a867c57bd">掘金：从头开始学习 Vuex</a></p>
<p>vuex 是一个状态管理容器(你也可以理解为类似于全局变量),数据的流向是是单向数据流</p>
<table>
<thead>
<tr>
<th>vuex</th>
<th>vue</th>
</tr>
</thead>
<tbody><tr>
<td>state</td>
<td>data</td>
</tr>
<tr>
<td>getters</td>
<td>computed</td>
</tr>
<tr>
<td>mutations</td>
<td>methods（同步操作）</td>
</tr>
<tr>
<td>actions</td>
<td>methods（异步操作</td>
</tr>
</tbody></table>
<h2 id="十三、vue版本之间的区别"><a href="#十三、vue版本之间的区别" class="headerlink" title="十三、vue版本之间的区别"></a>十三、vue版本之间的区别</h2><p><a href="">参见总结：vue：vue版本之间的区别</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器：一个URL从输入到显示的过程</title>
    <url>/2020/03/24/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%B8%80%E4%B8%AAURL%E4%BB%8E%E8%BE%93%E5%85%A5%E5%88%B0%E6%98%BE%E7%A4%BA%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="https://github.com/chajianyuan/picture/blob/master/1651616595458_.pic.jpg?raw=true"></p>
<a id="more"></a>

<p>过程简述：</p>
<ol>
<li>查找浏览器缓存，如果没找到则进行DNS解析</li>
<li>TCP三次握手</li>
<li>发送http请求</li>
<li>服务器处理请求并返回http报文</li>
<li>浏览器解析渲染页面</li>
<li>TCP四次挥手</li>
</ol>
<p>具体过程描述：</p>
<h3 id="1、查找浏览器缓存，如果没有则进行-DNS-解析"><a href="#1、查找浏览器缓存，如果没有则进行-DNS-解析" class="headerlink" title="1、查找浏览器缓存，如果没有则进行 DNS 解析"></a>1、查找浏览器缓存，如果没有则进行 DNS 解析</h3><p>当在浏览器中输入一个 URL 时，最开始要去浏览器缓存中查找，<a href="https://chajianyuan.github.io/2019/10/20/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/">浏览器缓存分为强缓存和协商缓存</a>，强缓存指不需要向服务器发送请求，直接从缓存中读取资源，状态码为 200，协商缓存是指当强缓存失效后，浏览器携带缓存标识向服务器发送请求，如果资源没有改变就返回 304，更新缓存，如果资源改变就返回 200 和新的资源，如果浏览器中不存在缓存，就通过 DNS 服务器启动一个 DNS 查询，获得 URL 对应的 IP 地址</p>
<blockquote>
<p>👂 这里我们讲一下<code>URL</code>的构成部分：<br>以<code>https://www.runoob.com/css/css-tutorial.html</code>为例<br><code>URL</code>包含协议（<code>https</code>）、网络地址(<code>www.runoob.com</code>)、资源路径(<code>/css</code>)、文件名(<code>css-tutorial.html</code>)、动态参数<br><strong>· 协议：</strong>指从该计算机获取资源的方式，一般有<code>Http、Https、Ftp、File</code>等协议，不同协议有不同的通讯内容格式，其中常用的就是<a href="https://chajianyuan.github.io/2020/03/25/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%EF%BC%9Ahttp%E5%92%8Chttps/"><code>Http</code>和<code>Https</code></a>。<br><strong>· 网络地址：</strong>指连接网络上哪台计算机或服务器，可以是域名或IP地址，后面可能还带冒号+端口号，一般端口号都是默认的，比如Http的默认端口号是80，Https的默认端口号是443，如果使用默认的端口时，则URL上不需要带端口号；如果改变了默认端口号，则需要在URL上展示对应的端口号。<br><strong>· 资源路径：</strong>指从服务器上获取哪一项资源的等级路径，用<code>/</code>分割。<br><strong>· 文件名：</strong>指真正需要访问的文件名，有的URL直接以<code>/</code>结尾，则表示访问的是最后一层文件路径下的<code>index.html</code>或<code>default.html</code>文件<br><strong>· 动态参数：</strong>指以<code>?</code>开始的参数，一般是需要传给服务端进行动态数据库查询的。</p>
</blockquote>
<h3 id="2、TCP-连接：TCP-三次握手🤝"><a href="#2、TCP-连接：TCP-三次握手🤝" class="headerlink" title="2、TCP 连接：TCP 三次握手🤝"></a>2、TCP 连接：TCP 三次握手🤝</h3><ul>
<li>第一次握手，由浏览器发起，告诉服务器我要发起请求了</li>
<li>第二次握手，由服务器发起，告诉浏览器，我已经准备接收了，你可以发送请求了</li>
<li>第三次握手，由浏览器发起，告诉服务器，我马上发送了，准备接收吧</li>
</ul>
<p><strong>三次握手的目的</strong>：防止已失效的连接请求报文段突然又传送到了服务器端，因而产生错误</p>
<h3 id="3、发送-HTTP-请求"><a href="#3、发送-HTTP-请求" class="headerlink" title="3、发送 HTTP 请求"></a>3、发送 HTTP 请求</h3><h3 id="4、服务器处理请求并返回-HTTP-报文"><a href="#4、服务器处理请求并返回-HTTP-报文" class="headerlink" title="4、服务器处理请求并返回 HTTP 报文"></a>4、服务器处理请求并返回 HTTP 报文</h3><h3 id="5、浏览器解析渲染页面"><a href="#5、浏览器解析渲染页面" class="headerlink" title="5、浏览器解析渲染页面"></a>5、浏览器解析渲染页面</h3><ol>
<li>根据 HTML 解析 DOM 树</li>
<li>根据 CSS 解析生成 CSS 规则树</li>
<li>结合 DOM 树和 CSS 规则树，生成渲染树</li>
<li>根据渲染树计算每一个节点的信息</li>
<li>根据计算好的信息绘制页面</li>
</ol>
<h3 id="6、断开连接：TCP-四次挥手🙋"><a href="#6、断开连接：TCP-四次挥手🙋" class="headerlink" title="6、断开连接：TCP 四次挥手🙋"></a>6、断开连接：TCP 四次挥手🙋</h3><p>参照：<a href="https://juejin.im/post/5bf3ad55f265da61682afc9b">掘金：从 URL 输入到页面展现到底发生什么？</a><br>参照：<a href="https://www.jianshu.com/p/d616d887953a">浏览器工作原理：从 URL 输入到页面展现到底发生了什么？</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器：事件循环Eeventloop</title>
    <url>/2019/10/18/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEeventloop/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、线程和进程"><a href="#一、线程和进程" class="headerlink" title="一、线程和进程"></a>一、线程和进程</h2><p>javascript 是单线程的，也就是说同一个时间只能做一件事。作为浏览器脚本语言，JavaScript 的主要用途是与用户互动，以及操作 DOM。如果浏览器同时有两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程是删除这个节点，那浏览器应该以哪个线程为主呢？</p>
<a id="more"></a>

<h3 id="1、进程"><a href="#1、进程" class="headerlink" title="1、进程"></a>1、进程</h3><p>CPU 资源分配的最小单位（是能拥有资源和独立运行的最小单位），进程是指在系统中正在运行的一个应用程序，是系统资源分配的基本单位，在内存中有其完备的数据空间和代码空间，拥有完备的虚拟空间地址。一个进程所拥有的数据和变量只属于他自己</p>
<h3 id="2、线程"><a href="#2、线程" class="headerlink" title="2、线程"></a>2、线程</h3><p>CPU 调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程），线程是进程内相对独立的可执行单元，所以也被称为轻量进程，是操作系统进行任务调度的基本单元。它与父进程的其他线程共享该进程所拥有的全部代码空间和全局变量，但拥有私有的局部变量</p>
<h3 id="3、联系"><a href="#3、联系" class="headerlink" title="3、联系"></a>3、联系</h3><p>一个进程至少拥有一个线程（主线程），一个线程必须有一个父进程。多个进程可以并发执行；一个线程可以创建或撤销另一个线程；同一个进程中的多个线程之间可以并发执行。</p>
<h3 id="4、进程和线程的区别"><a href="#4、进程和线程的区别" class="headerlink" title="4、进程和线程的区别"></a>4、进程和线程的区别</h3><ol>
<li>进程是资源分配和保护的基本单位，线程是处理器调度和分派的基本单位，程序执行的最小单元；</li>
<li>同一个进程中可以包含多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进程至少包含一个线程；</li>
<li>进程结束后，它所有的线程都将销毁，而线程的结束不会影响同个进程中其他线程的结束；</li>
<li>线程是轻量级的进程，它的创建和销毁所需时间和空间都比进程小很多，所有操作系统的执行功能都是创建线程去完成的；</li>
<li>线程有自己的私有属性 TCB，线程 id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块 PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志；<br>6 <strong>系统开销</strong>：在创建或撤销进程时，系统都要为它分配或回收资源，导致系统的开销明显大于创建或撤销线程时的开销；<br>7 <strong>资源管理</strong>：进程有独立的地址空间，一个进程崩溃后不会对其他进程产生影响，一个线程死掉会导致整个进程都死掉；<br>8 <strong>通信方式</strong>：进程间通信包括管道、系统 IPC（包括消息队列，信号量，共享存储）、SOCKET 等，进程间的通信方式同样适用于线程之间的通信，但是一个进程之间的多个线程使用全局变量通信更高效。</li>
</ol>
<h2 id="二、同步和异步"><a href="#二、同步和异步" class="headerlink" title="二、同步和异步"></a>二、同步和异步</h2><p>任务分为同步任务和异步任务</p>
<h3 id="1、同步任务"><a href="#1、同步任务" class="headerlink" title="1、同步任务"></a>1、同步任务</h3><p>如果在函数返回的时候，调用者就能够得到预期结果（即拿到了预期的返回值或者看到了预期的效果）</p>
<h3 id="2、异步任务"><a href="#2、异步任务" class="headerlink" title="2、异步任务"></a>2、异步任务</h3><p>如果在函数返回的时候，调用者还不能得到预期结果，而是需要在将来通过一定的手段得到，那么这个函数就是异步的</p>
<h4 id="异步详解"><a href="#异步详解" class="headerlink" title="异步详解"></a>异步详解</h4><p><strong>一个异步过程通常是</strong></p>
<ol>
<li>主线程发出一个异步请求，异步任务接到请求并告知主线程已经收到（异步函数返回）；</li>
<li>主线程可以继续执行后面的代码，同时异步操作开始执行；</li>
<li>执行完成后通知主线程；</li>
<li>主线程收到通知后，执行一定的动作（调用回调函数）</li>
</ol>
<p><strong>异步类型</strong></p>
<ol>
<li>普通事件，如 click、resize 等</li>
<li>资源加载，如 load、error 等</li>
<li>定时器，包括 setInterval、setTimeout 等</li>
</ol>
<p><strong>消息队列</strong></p>
<p>也叫任务队列、事件队列，总之是和异步任务相关的队列。</p>
<p>不管异步任务是什么时候开始执行的，只要异步操作执行完成，他就会被添加到消息队列中排队。</p>
<p>消息就是注册异步任务时添加的回调函数。</p>
<h2 id="三、事件循环"><a href="#三、事件循环" class="headerlink" title="三、事件循环"></a>三、事件循环</h2><p><img src="https://user-gold-cdn.xitu.io/2018/11/23/16740fa4cd9c6937?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<p><strong>步骤</strong></p>
<ol>
<li>所有同步任务都在主线程上执行，形成一个执行栈</li>
<li>主线程之外，还存在一个“消息队列”，只要异步操作执行完成，就到消息队列中排队</li>
<li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取消息队列中的异步任务，于是被读取的异步任务就结束了等待状态，进入到执行栈开始执行</li>
<li>主线程不断重复上面的第三步</li>
</ol>
<p><strong>微任务</strong></p>
<p>process.nextTick，promise，MutationObserver，其中，process.nextTick 为 Node 独有</p>
<p><strong>宏任务</strong></p>
<p>script，setTimeout，setInterval，setImmediate，I/O，UI rendering</p>
<p>宏任务中包括了 script，浏览器会先执行一个宏任务，接下来有异步代码的话才会先执行微任务。</p>
<p>宏任务=&gt;所有微任务=&gt;宏任务，如下图：<br><img src="https://user-gold-cdn.xitu.io/2018/6/16/164081cfd8400f92?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<h3 id="面试题实践"><a href="#面试题实践" class="headerlink" title="面试题实践"></a>面试题实践</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span></span><br><span class="line">    resolve(3);</span><br><span class="line"><span class="javascript">  &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(res);</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>问题：以上代码的打印顺序是什么？</strong></p>
<ol>
<li>先执行 script 同步代码，执行 new Promise 中的<code>console.log(2)</code>，then 后面的不执行，但是属于微任务，然后执行<code>console.log(4)</code>；</li>
<li>执行完 script 宏任务后，执行微任务<code>console.log(res)=&gt;3</code>;</li>
<li>执行另一个宏任务，定时器<code>console.log(1)</code>。</li>
</ol>
<p>所以最终输出的是 2,4,3,1。</p>
<h2 id="四、同步变异步"><a href="#四、同步变异步" class="headerlink" title="四、同步变异步"></a>四、同步变异步</h2><p>每一个消息完整的执行后，其他消息才会被执行，这点提供了一些优秀的特性，包括每当一个函数运行时，他不能被抢占，并且在其他代码运行完之前完全运行。</p>
<p>但是有一个缺点是当消息需要太长时间才能完成，Web 应用无法处理用户的交互，例如点击或滚动。</p>
<p>于是处理这种情况常见的优化就是同步变异步。</p>
<p><a href="https://www.cnblogs.com/xiaohuochai/p/8527618.html#anchor4">深入理解 JavaScript 中的事件循环 event-loop</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器：事件机制</title>
    <url>/2019/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="1、事件触发三阶段"><a href="#1、事件触发三阶段" class="headerlink" title="1、事件触发三阶段"></a>1、事件触发三阶段</h2><ul>
<li>window 往事件触发处传播，遇到注册的捕获事件会触发</li>
<li>传播到事件触发处的时触发注册的事件</li>
<li>从事件触发处往 window 传播，遇到注册的冒泡事件会触发</li>
</ul>
<p>事件触发一般会按照上面的顺序执行，但是也有例外，如果给一个 body 中的子节点同时注册冒泡和捕获事件，事件触发会按照注册的顺序执行。</p>
<a id="more"></a>

<h2 id="2、注册事件"><a href="#2、注册事件" class="headerlink" title="2、注册事件"></a>2、注册事件</h2><p>通常使用<code>addEventListener</code> 注册事件，该函数的第三个参数可以是布尔值，也可以是对象。对于布尔值 useCapture 参数来说，该参数默认值是<code>false</code>， <code>useCapture</code>决定了注册的事件是捕获事件还是冒泡事件。对于对象参数来说，可以使用以下几个属性：</p>
<ul>
<li><code>capture</code>：布尔值，和<code>useCapture</code>作用一样</li>
<li><code>once</code>：布尔值，值为<code>true</code>表示该回调只会调用一次，调用后会移除监听</li>
<li><code>passive</code>：布尔值，表示永远不会调用<code>preventDefault</code></li>
</ul>
<p>一般来说，如果我们只希望事件只触发在目标上，这时候可以使用<code>stopPropagation</code>来阻止事件的进一步传播。通常我们认为<code>stopPropagation</code>是用来阻止事件冒泡的，其实该函数也可以阻止捕获事件。<code>stopImmediatePropagation</code>同样也能实现阻止事件，但是还能阻止该事件目标执行别的注册事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">node.addEventListener(</span><br><span class="line">  <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">  event =&gt; &#123;</span><br><span class="line">    event.stopImmediatePropagation()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;冒泡&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 点击 node 只会执行上面的函数，该函数不会执行</span></span><br><span class="line">node.addEventListener(</span><br><span class="line">  <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">  event =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;捕获 &#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="3、事件代理-事件委托"><a href="#3、事件代理-事件委托" class="headerlink" title="3、事件代理/事件委托"></a>3、事件代理/事件委托</h2><p>如果一个节点中的子节点是动态生成的，那么子节点需要注册事件的话应该注册在父节点上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">let</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#ul&#x27;</span>)</span></span><br><span class="line"><span class="javascript">	ul.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">console</span>.log(event.target);</span></span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>事件代理的方式相较于直接给目标注册事件来说，有以下优点：</p>
<ul>
<li>节省内存</li>
<li>不需要给子节点注销事件</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器：重绘和回流</title>
    <url>/2019/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p><strong>回流必将引起重绘，重绘不一定会引起回流</strong></p>
<h2 id="一、回流（reflow）"><a href="#一、回流（reflow）" class="headerlink" title="一、回流（reflow）"></a>一、回流（<code>reflow</code>）</h2><p>当渲染树中部分或全部元素的尺寸、结构，或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。</p>
<a id="more"></a>

<p><strong>会导致回流的操作：</strong></p>
<ul>
<li>css 样式中的 display</li>
<li>页面首次渲染</li>
<li>浏览器窗口大小发生变化</li>
<li>元素尺寸或位置发生改变</li>
<li>元素内容变化（文字数量或图片大小等等）</li>
<li>元素字体大小变化</li>
<li>添加或删除可见的 DOM 元素</li>
<li>激活 css 伪类（例如：hover）</li>
<li>查询某些属性或调用某些方法</li>
</ul>
<p><strong>一些常用但会导致回流的属性和方法：</strong></p>
<ul>
<li><code>clientWidth</code>、<code>clientHeight</code>、<code>clientTop</code>、<code>clientLeft</code></li>
<li><code>offsetWidth</code>、<code>offsetHeight</code>、<code>offsetTop</code>、<code>offsetLeft</code></li>
<li><code>scrollWidth</code>、<code>scrollHeight</code>、<code>scrollTop</code>、<code>scrollLeft</code></li>
<li><code>scrollIntoView()</code>、<code>scrollIntoViewIfNeeded()</code></li>
<li><code>getComputedStyle()</code></li>
<li><code>getBoundingClientRect()</code></li>
<li><code>scrollTo()</code></li>
</ul>
<h2 id="二、重绘（Repaint）"><a href="#二、重绘（Repaint）" class="headerlink" title="二、重绘（Repaint）"></a>二、重绘（<code>Repaint</code>）</h2><p>当页面中元素样式的改变并不影响它在文档流中的位置时（如：<code>color</code>、<code>background-color</code>、<code>visibility</code>等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。</p>
<h2 id="三、如何避免"><a href="#三、如何避免" class="headerlink" title="三、如何避免"></a>三、如何避免</h2><h3 id="1、css"><a href="#1、css" class="headerlink" title="1、css"></a>1、css</h3><ul>
<li>避免使用<code>table</code>布局</li>
<li>尽可能在 DOM 树的最末端改变 class</li>
<li>避免设置多层内联样式</li>
<li>将动画效果应用到<code>position</code>属性为<code>absolute</code>或<code>fixed</code>的元素上</li>
<li>避免使用 css 表达式</li>
</ul>
<h3 id="2、JavaScript"><a href="#2、JavaScript" class="headerlink" title="2、JavaScript"></a>2、JavaScript</h3><ul>
<li>避免频繁操作样式，最好一次性重写 style 属性，或将样式列表定义为 class 并一次性更改 class 属性</li>
<li>避免重复操作 DOM，创建一个<code>documentFragment</code>，在它上面应用所有 DOM 操作，最后再把它添加到文档中</li>
<li>可以先为元素设置<code>display:none</code>，操作结束后再把它显示出来。因为在 display 属性为 none 的元素上进行的 DOM 操作不会引发回流和重绘</li>
<li>避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。</li>
<li>对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。</li>
</ul>
<p><a href="https://juejin.im/post/5a9923e9518825558251c96a">浏览器的回流与重绘 (Reflow &amp; Repaint)</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器：浏览器缓存机制</title>
    <url>/2019/10/20/%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、缓存位置"><a href="#一、缓存位置" class="headerlink" title="一、缓存位置"></a>一、缓存位置</h2><p>从缓存位置上来说分为四种，并且各自有<strong>优先级</strong>，当依次查找缓存且都没有命中的时候，才会去请求网络</p>
<a id="more"></a>

<h3 id="1、Service-Worker"><a href="#1、Service-Worker" class="headerlink" title="1、Service Worker"></a>1、Service Worker</h3><p>Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们<strong>自由控制</strong>缓存哪些文件、如何匹配缓存、如何读取缓存，并且<strong>缓存是持续性的</strong>。</p>
<p>当 Service Worker 没有命中缓存的时候，我们需要去调用 <code>fetch</code> 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。<strong>但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。</strong></p>
<h3 id="2、Memory-Cache"><a href="#2、Memory-Cache" class="headerlink" title="2、Memory Cache"></a>2、Memory Cache</h3><p>Memory Cache 也就是内存中的缓存，读取内存中的数据肯定比磁盘快。<strong>但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。</strong> 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。</p>
<p>当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/12/5/1677db8003dc8311?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="从内存中读取缓存"></p>
<p>那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？</p>
<p>先说结论，这是<strong>不可能</strong>的。首先计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。内存中其实可以存储大部分的文件，比如说 JS、HTML、CSS、图片等等。</p>
<ul>
<li>对于大文件来说，大概率是不存储在内存中的，反之优先</li>
<li>当前系统内存使用率高的话，文件优先存储进硬盘</li>
</ul>
<h3 id="3、Disk-Cache"><a href="#3、Disk-Cache" class="headerlink" title="3、Disk Cache"></a>3、Disk Cache</h3><p>Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache <strong>胜在容量和存储时效性上。</strong></p>
<p>在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Header 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。<strong>并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。</strong></p>
<h3 id="4、Push-Cache"><a href="#4、Push-Cache" class="headerlink" title="4、Push Cache"></a>4、Push Cache</h3><p>Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。<strong>并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。</strong></p>
<ul>
<li>所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好</li>
<li>可以推送 <code>no-cache</code> 和 <code>no-store</code> 的资源</li>
<li>一旦连接被关闭，Push Cache 就被释放</li>
<li>多个页面可以使用相同的 HTTP/2 连接，也就是说能使用同样的缓存</li>
<li>Push Cache 中的缓存只能被使用一次</li>
<li>浏览器可以拒绝接受已经存在的资源推送</li>
<li>你可以给其他域名推送资源</li>
</ul>
<h3 id="5、网络请求"><a href="#5、网络请求" class="headerlink" title="5、网络请求"></a>5、网络请求</h3><p>如果所有缓存都没有命中的话，那么只能发起请求来获取资源了。</p>
<h2 id="二、缓存策略"><a href="#二、缓存策略" class="headerlink" title="二、缓存策略"></a>二、缓存策略</h2><p>通常浏览器缓存策略分为两种：<strong>强缓存</strong>和<strong>协商缓存</strong>，并且缓存策略都是通过设置 HTTP Header 来实现的。</p>
<h3 id="1、强缓存"><a href="#1、强缓存" class="headerlink" title="1、强缓存"></a>1、强缓存</h3><p>强缓存可以通过设置两种 HTTP Header 实现：<code>Expires</code> 和 <code>Cache-Control</code> 。强缓存表示在缓存期间不需要请求，<code>state code</code> 为 200。</p>
<h4 id="1-1-Expires"><a href="#1-1-Expires" class="headerlink" title="1.1 Expires"></a>1.1 Expires</h4><p><code>Expires: Wed, 22 Oct 2018 08:41:00 GMT</code></p>
<p><code>Expires</code> 是 HTTP/1 的产物，表示资源会在 <code>Wed, 22 Oct 2018 08:41:00 GMT</code> 后过期，需要再次请求。并且 <code>Expires</code> <strong>受限于本地时间</strong>，如果修改了本地时间，可能会造成缓存失效。</p>
<h4 id="1-2-Cache-control"><a href="#1-2-Cache-control" class="headerlink" title="1.2 Cache-control"></a>1.2 Cache-control</h4><p><code>Cache-control: max-age=30</code></p>
<p><code>Cache-Control</code> 出现于 HTTP/1.1，<strong>优先级高于 Expires</strong> 。该属性值表示资源会在 30 秒后过期，需要再次请求。</p>
<p><code>Cache-Control</code> <strong>可以在请求头或者响应头中设置</strong>，并且可以组合使用多种指令</p>
<img src="https://user-gold-cdn.xitu.io/2018/12/6/1678234a1ed20487?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" width="600px" />

<p>从图中我们可以看到，我们可以将<strong>多个指令配合起来一起使用</strong>，达到多个目的。比如说我们希望资源能被缓存下来，并且是客户端和代理服务器都能缓存，还能设置缓存失效时间等等。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/12/5/1677ef2cd7bf1bba?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="常见指令作用"></p>
<h3 id="2、协商缓存"><a href="#2、协商缓存" class="headerlink" title="2、协商缓存"></a>2、协商缓存</h3><p>如果缓存过期了，就需要发起请求验证资源是否有更新。协商缓存可以通过设置两种 HTTP Header 实现：<code>Last-Modified</code>和 <code>ETag</code> 。</p>
<p>当浏览器发起请求验证资源时，如果资源没有做改变，那么服务端就会返回 304 状态码，并且更新浏览器缓存有效期。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/12/6/16782357baddf1c6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<h4 id="2-1-Last-Modified-和-If-Modified-Since"><a href="#2-1-Last-Modified-和-If-Modified-Since" class="headerlink" title="2.1 Last-Modified 和 If-Modified-Since"></a>2.1 Last-Modified 和 If-Modified-Since</h4><p><code>Last-Modified</code> 表示本地文件最后修改日期，<code>If-Modified-Since</code> 会将 <code>Last-Modified</code> 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。</p>
<p>但是 <code>Last-Modified</code> 存在一些弊端：</p>
<ul>
<li>如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 <code>Last-Modified</code> 被修改，服务端不能命中缓存导致发送相同的资源</li>
<li>因为 <code>Last-Modified</code> 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源</li>
</ul>
<p>因为以上这些弊端，所以在 HTTP / 1.1 出现了 <code>ETag</code> 。</p>
<h4 id="2-2-ETag-和-If-None-Match"><a href="#2-2-ETag-和-If-None-Match" class="headerlink" title="2.2 ETag 和 If-None-Match"></a>2.2 ETag 和 If-None-Match</h4><p><code>ETag</code> 类似于文件指纹，<code>If-None-Match</code> 会将当前 <code>ETag</code> 发送给服务器，询问该资源 <code>ETag</code> 是否变动，有变动的话就将新的资源发送回来。并且 <code>ETag</code> 优先级比 <code>Last-Modified</code> 高。</p>
<p>以上就是缓存策略的所有内容了，看到这里，不知道你是否存在这样一个疑问。<strong>如果什么缓存策略都没设置，那么浏览器会怎么处理？</strong></p>
<p>对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 <code>Date</code> 减去 <code>Last-Modified</code> 值的 10% 作为缓存时间。</p>
<p><a href="https://juejin.im/post/5c32ac69f265da6150649ec2">深入浅出浏览器缓存机制</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title>算法：107、二叉树的层次遍历II（Javascript）</title>
    <url>/2019/03/27/%E7%AE%97%E6%B3%95%EF%BC%9A107%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86II%EF%BC%88Javascript%EF%BC%89%E2%80%9D/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>题目：给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）<br>例如：<br>给定二叉树 [3,9,20,null,null,15,7]</p>
<pre><code>    3
   / \
  9  20
    /  \
   15   7</code></pre>
<p>返回其自底向上的层次遍历为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="number">15</span>,<span class="number">7</span>],</span><br><span class="line">  [<span class="number">9</span>,<span class="number">20</span>],</span><br><span class="line">  [<span class="number">3</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>二叉树的层序遍历要用到迭代法，设置一个队列 queue(其实就是一个数组)，把根节点放入 queue 中，当队列不为空时，取出队列元素，然后把这个元素的子节点以数组的形式加入到队列中</p>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrderBottom = <span class="function"><span class="keyword">function</span><span class="params">(root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> queue=[]; <span class="comment">//定义一个队列</span></span><br><span class="line">    <span class="keyword">let</span> result=[]; <span class="comment">//定义结果</span></span><br><span class="line">    <span class="keyword">if</span>(root!==<span class="keyword">null</span>)&#123;</span><br><span class="line">        queue.push(root)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(queue.length!==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> len=queue.length;</span><br><span class="line">        <span class="keyword">let</span> level=[]; <span class="comment">//定义叶节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> currentNode=queue.shift(); <span class="comment">//设置currentNode为queue中的第一个元素，并将queue中的第一个元素删除</span></span><br><span class="line">            level.push(currentNode.val);</span><br><span class="line">            <span class="keyword">if</span>(currentNode.left!==<span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.push(currentNode.left)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(currentNode.right!==<span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.push(currentNode.right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.push(level)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.reverse()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法：488、祖玛游戏（JavaScript）</title>
    <url>/2019/03/29/%E7%AE%97%E6%B3%95%EF%BC%9A488%E3%80%81%E7%A5%96%E7%8E%9B%E6%B8%B8%E6%88%8F%EF%BC%88JavaScript%EF%BC%89/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>回忆一下祖玛游戏。现在桌上有一串球，颜色有红色(R)，黄色(Y)，蓝色(B)，绿色(G)，还有白色(W)。 现在你手里也有几个球。</p>
<p>每一次，你可以从手里的球选一个，然后把这个球插入到一串球中的某个位置上（包括最左端，最右端）。接着，如果有出现三个或者三个以上颜色相同的球相连的话，就把它们移除掉。重复这一步骤直到桌上所有的球都被移除。</p>
<p>找到插入并可以移除掉桌上所有球所需的最少的球数。如果不能移除桌上所有的球，输出 -1 。</p>
<a id="more"></a>

<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">示例:</span><br><span class="line">输入: <span class="string">&quot;WRRBBW&quot;</span>, <span class="string">&quot;RB&quot;</span></span><br><span class="line">输出: <span class="number">-1</span></span><br><span class="line">解释: WRRBBW -&gt; WRR[R]BBW -&gt; WBBW -&gt; WBB[B]W -&gt; WW （翻译者标注：手上球已经用完，桌上还剩两个球无法消除，返回<span class="number">-1</span>）</span><br><span class="line"></span><br><span class="line">输入: <span class="string">&quot;WWRRBBWW&quot;</span>, <span class="string">&quot;WRBRW&quot;</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">解释: WWRRBBWW -&gt; WWRR[R]BBWW -&gt; WWBBWW -&gt; WWBB[B]WW -&gt; WWWW -&gt; empty</span><br><span class="line"></span><br><span class="line">输入:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;GGGGG&quot;</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">解释: G -&gt; G[G] -&gt; GG[G] -&gt; empty</span><br><span class="line"></span><br><span class="line">输入: <span class="string">&quot;RBYYBBRRB&quot;</span>, <span class="string">&quot;YRBGB&quot;</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: RBYYBBRRB -&gt; RBYY[Y]BBRRB -&gt; RBBBRRB -&gt; RRRB -&gt; B -&gt; B[B] -&gt; BB[B] -&gt; empty</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>标注:</strong></p>
<ol>
<li>你可以假设桌上一开始的球中，不会有三个及三个以上颜色相同且连着的球。</li>
<li>桌上的球不会超过 20 个，输入的数据中代表这些球的字符串的名字是 “board” 。</li>
<li>你手中的球不会超过 5 个，输入的数据中代表这些球的字符串的名字是 “hand”。</li>
<li>输入的两个字符串均为非空字符串，且只包含字符 ‘R’,’Y’,’B’,’G’,’W’。</li>
</ol>
<p><strong>解题思路</strong></p>
<p>​</p>
<p><strong>代码</strong></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法：257、二叉树的所有路径（Javascript）</title>
    <url>/2019/03/27/%E7%AE%97%E6%B3%95%EF%BC%9A257%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84%EF%BC%88Javascript%EF%BC%89%E2%80%9D/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p>
<p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p>
<p><strong>示例:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span></span><br><span class="line"> /   \</span><br><span class="line"><span class="number">2</span>     <span class="number">3</span></span><br><span class="line"> \</span><br><span class="line">  <span class="number">5</span></span><br><span class="line"></span><br><span class="line">输出: [<span class="string">&quot;1-&gt;2-&gt;5&quot;</span>, <span class="string">&quot;1-&gt;3&quot;</span>]</span><br><span class="line"></span><br><span class="line">解释: 所有根节点到叶子节点的路径为: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">5</span>, <span class="number">1</span>-&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>使用递归思路解决这个问题，对于根节点，如果根节点为空，则返回数组[]，如果为叶子结点，则返回包含此节点的值的数组（这个数组只有一个元素）。如果既不为空也不是叶子结点，则对左右子树递归调用，将两个结果数组拼接起来，最后使用 map 函数来对数组的每个元素进行字符串的操作。</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition <span class="keyword">for</span> a binary tree <span class="type">node</span>.</span><br><span class="line"> * <span class="keyword">function</span> TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125;<span class="built_in"> root</span></span><br><span class="line"> * @<span class="keyword">return</span> <span class="built_in">&#123;string</span>[]&#125;</span><br><span class="line"> */</span><br><span class="line">var binaryTreePaths = <span class="keyword">function</span><span class="built_in">(root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span><span class="built_in">(root</span> === null)&#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span><span class="built_in">(root</span>.left ===null &amp;&amp;<span class="built_in"> root</span>.right===null)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">[root</span>.val.toString()]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left=binaryTreePaths<span class="built_in">(root</span>.left),</span><br><span class="line">        right=binaryTreePaths<span class="built_in">(root</span>.right);</span><br><span class="line">    <span class="keyword">return</span> left<span class="built_in">.concat</span>(right).<span class="keyword">map</span>(x=<span class="built_in">&gt;root</span>.val+<span class="string">&#x27;-&gt;&#x27;</span>+x)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法：6、Z字形变换（JavaScript）</title>
    <url>/2019/03/29/%E7%AE%97%E6%B3%95%EF%BC%9A6%E3%80%81Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2%EF%BC%88JavaScript%EF%BC%89/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>
<p>比如输入字符串为 <code>&quot;LEETCODEISHIRING&quot;</code> 行数为 3 时，排列如下：</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">L   <span class="keyword">C</span>   <span class="keyword">I</span>   R</span><br><span class="line"><span class="keyword">E</span> T <span class="keyword">O</span> <span class="keyword">E</span> S <span class="keyword">I</span> <span class="keyword">I</span> G</span><br><span class="line"><span class="keyword">E</span>   <span class="keyword">D</span>   H   <span class="keyword">N</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;LCIRETOESIIGEDHN&quot;</code>。</p>
<p>请你实现这个将字符串进行指定行数变换的函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>示例 1:</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入: <span class="attr">s</span> = <span class="string">&quot;LEETCODEISHIRING&quot;</span>, <span class="attr">numRows</span> = <span class="number">3</span></span><br><span class="line">输出: <span class="string">&quot;LCIRETOESIIGEDHN&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">输入: s = <span class="string">&quot;LEETCODEISHIRING&quot;</span>, numRows = <span class="number">4</span></span><br><span class="line">输出: <span class="string">&quot;LDREOEIIECIHNTSG&quot;</span></span><br><span class="line">解释:</span><br><span class="line"></span><br><span class="line">L     <span class="keyword">D</span>     R</span><br><span class="line"><span class="keyword">E</span>   <span class="keyword">O</span> <span class="keyword">E</span>   <span class="keyword">I</span> <span class="keyword">I</span></span><br><span class="line"><span class="keyword">E</span> <span class="keyword">C</span>   <span class="keyword">I</span> H   <span class="keyword">N</span></span><br><span class="line">T     S     G</span><br></pre></td></tr></table></figure>

<p><strong>解题思路</strong></p>
<p>1、字符串从上到下排列，到第 numRows 行再向上排，可以看做一个圈，每个圈的元素个数是 numRows*2-2 个</p>
<p>2、输出的字符串中按行来，从左到右，第一行和最后一行中每一圈只取一个，中间的取两个</p>
<p><strong>代码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;number&#125; numRows</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convert = <span class="function"><span class="keyword">function</span>(<span class="params">s, numRows</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len=s.length;</span><br><span class="line">    <span class="keyword">var</span> twoRows=<span class="number">2</span>*numRows<span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">var</span> str=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">0</span> || numRows&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;numRows;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=i;j&lt;len;j+=twoRows)&#123;</span><br><span class="line">            str=str.concat(s.charAt(j));</span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span> &amp;&amp; i!=numRows<span class="number">-1</span> &amp;&amp; j<span class="number">-2</span>*i+twoRows&lt;len)&#123;</span><br><span class="line">                str=str.concat(s.charAt(j<span class="number">-2</span>*i+twoRows))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法：914、卡片分组（JavaScripe）</title>
    <url>/2019/03/29/%E7%AE%97%E6%B3%95%EF%BC%9A914%E3%80%81%E5%8D%A1%E7%89%87%E5%88%86%E7%BB%84%EF%BC%88JavaScripe%EF%BC%89/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>给定一副牌，每张牌上都写着一个整数。</p>
<p>此时，你需要选定一个数字 <code>X</code>，使我们可以将整副牌按下述规则分成 1 组或更多组：</p>
<ul>
<li>每组都有 <code>X</code> 张牌。</li>
<li>组内所有的牌上都写着相同的整数。</li>
</ul>
<a id="more"></a>

<p>仅当你可选的 <code>X &gt;= 2</code> 时返回 <code>true</code>。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：可行的分组是 [<span class="number">1</span>,<span class="number">1</span>]，[<span class="number">2</span>,<span class="number">2</span>]，[<span class="number">3</span>,<span class="number">3</span>]，[<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：没有满足要求的分组。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：没有满足要求的分组。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：可行的分组是 [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>示例 5：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：可行的分组是 [<span class="number">1</span>,<span class="number">1</span>]，[<span class="number">2</span>,<span class="number">2</span>]，[<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ol>
<li><code>1 &lt;= deck.length &lt;= 10000</code></li>
<li><code>0 &lt;= deck[i] &lt; 10000</code></li>
</ol>
<p><strong>解题思路</strong></p>
<p>找一个集体公约数，收集每张牌的数量存入新数组 arr，公约数 x 从 2 往上累加，最大不超过 min(arr)，判断 arr[i]能否被 x 整除</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; deck</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">var</span> hasGroupsSizeX = function(deck) &#123;</span><br><span class="line">   <span class="built_in">var</span> obj=&#123;&#125;,<span class="built_in">max</span>,<span class="built_in">min</span>,arr=[],n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(deck.<span class="built_in">length</span>&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;deck.<span class="built_in">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj[deck[i]]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            obj[deck[i]]+=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            obj[deck[i]]=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        arr[n]=obj[i]</span><br><span class="line">        n++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">min</span>=Math.<span class="built_in">min</span>.<span class="built_in">apply</span>(null,arr)</span><br><span class="line">    <span class="built_in">max</span>=Math.<span class="built_in">max</span>.<span class="built_in">apply</span>(null,arr)</span><br><span class="line">    <span class="keyword">if</span>((<span class="built_in">min</span>===<span class="number">1</span> &amp;&amp; <span class="built_in">min</span> !=<span class="built_in">max</span>) || deck.<span class="built_in">length</span>&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">var</span> x=<span class="number">2</span>,<span class="built_in">status</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">min</span>&gt;=x)&#123;</span><br><span class="line">        <span class="built_in">status</span>=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="built_in">length</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]%x!=<span class="number">0</span>)</span><br><span class="line">                <span class="built_in">status</span>=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">status</span>==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span></span><br><span class="line">        x++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法：解题思路</title>
    <url>/2019/03/27/%E7%AE%97%E6%B3%95%EF%BC%9A%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h1 id="一、二叉树"><a href="#一、二叉树" class="headerlink" title="一、二叉树"></a>一、二叉树</h1><p>二叉树一般使用迭代的方法</p>
<a id="more"></a>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法：求根到叶子节点数字之和</title>
    <url>/2020/10/29/%E7%AE%97%E6%B3%95%EF%BC%9A%E6%B1%82%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B0%E5%AD%97%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<p>💪 打卡算法第四天</p>
<p>📖 题目来自力扣129题</p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个二叉树，它的每个结点都存放一个 0-9 的数字，每条从根到叶子节点的路径都代表一个数字。</p>
<p>例如，从根到叶子节点路径 1-&gt;2-&gt;3 代表数字 123。</p>
<a id="more"></a>

<p>计算从根到叶子节点生成的所有数字之和。</p>
<p>说明: 叶子节点是指没有子节点的节点。</p>
<p>示例 1:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">输出: <span class="number">25</span></span><br><span class="line">解释:</span><br><span class="line">从根到叶子节点路径 <span class="number">1</span>-&gt;<span class="number">2</span> 代表数字 <span class="number">12.</span></span><br><span class="line">从根到叶子节点路径 <span class="number">1</span>-&gt;<span class="number">3</span> 代表数字 <span class="number">13.</span></span><br><span class="line">因此，数字总和 = <span class="number">12</span> + <span class="number">13</span> = <span class="number">25.</span></span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">4</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="number">4</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">9</span>   <span class="number">0</span></span><br><span class="line"> / \</span><br><span class="line"><span class="number">5</span>   <span class="number">1</span></span><br><span class="line">输出: <span class="number">1026</span></span><br><span class="line">解释:</span><br><span class="line">从根到叶子节点路径 <span class="number">4</span>-&gt;<span class="number">9</span>-&gt;<span class="number">5</span> 代表数字 <span class="number">495.</span></span><br><span class="line">从根到叶子节点路径 <span class="number">4</span>-&gt;<span class="number">9</span>-&gt;<span class="number">1</span> 代表数字 <span class="number">491.</span></span><br><span class="line">从根到叶子节点路径 <span class="number">4</span>-&gt;<span class="number">0</span> 代表数字 <span class="number">40.</span></span><br><span class="line">因此，数字总和 = <span class="number">495</span> + <span class="number">491</span> + <span class="number">40</span> = <span class="number">1026.</span></span><br></pre></td></tr></table></figure>

<h4 id="🤔-题解"><a href="#🤔-题解" class="headerlink" title="🤔 题解"></a>🤔 题解</h4><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition <span class="keyword">for</span> a binary tree <span class="type">node</span>.</span><br><span class="line"> * <span class="keyword">function</span> TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125;<span class="built_in"> root</span></span><br><span class="line"> * @<span class="keyword">return</span> <span class="built_in">&#123;number</span>&#125;</span><br><span class="line"> */</span><br><span class="line">var sumNumbers = <span class="keyword">function</span><span class="built_in">(root</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> dfs<span class="built_in">(root</span>, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const dfs = <span class="built_in">(root</span>, preSum) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">!root</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    const<span class="built_in"> sum</span> = preSum * <span class="number">10</span> +<span class="built_in"> root</span>.val;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">!root</span>.left &amp;&amp; <span class="built_in">!root</span>.right) &#123;</span><br><span class="line">        <span class="keyword">return</span><span class="built_in"> sum</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dfs<span class="built_in">(root</span>.left,<span class="built_in"> sum</span>) + dfs<span class="built_in">(root</span>.right,<span class="built_in"> sum</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>网络协议：http和https</title>
    <url>/2020/03/25/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%EF%BC%9Ahttp%E5%92%8Chttps/</url>
    <content><![CDATA[<h2 id="一、http"><a href="#一、http" class="headerlink" title="一、http"></a>一、http</h2><p><img src="https://user-gold-cdn.xitu.io/2018/6/11/163ef70cbdc63e95?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p>
<p>HTTP 协议是 Hyper Text Transfer Protocol(超文本传输协议)的缩写，适用于从万维网服务器传输文本到本地浏览器的传送协议。</p>
<a id="more"></a>

<h3 id="1、http-1-1-的缺陷"><a href="#1、http-1-1-的缺陷" class="headerlink" title="1、http/1.1 的缺陷"></a>1、http/1.1 的缺陷</h3><ul>
<li>高延迟–带来页面加载速度的降低；</li>
<li>无状态特性–带来的巨大 HTTP 头部；</li>
<li>明文传输–带来的不安全性；</li>
<li>不支持服务器推送消息。</li>
</ul>
<h3 id="2、http-2"><a href="#2、http-2" class="headerlink" title="2、http/2"></a>2、http/2</h3><p><strong>新特性：</strong></p>
<ul>
<li>二进制传输；</li>
<li>Header 压缩；</li>
<li>多路复用；</li>
<li>Server Push；</li>
<li>提高安全性</li>
</ul>
<p><strong>缺陷：</strong></p>
<ul>
<li>TCP 以及 TCP+TLS 建立连接的延时；</li>
<li>TCP 的队头阻塞并没有彻底解决。</li>
</ul>
<h3 id="3、HTTP-3"><a href="#3、HTTP-3" class="headerlink" title="3、HTTP/3"></a>3、HTTP/3</h3><p><strong>QUIC</strong>是基于 UDP 的一个协议，让 http 跑在 QUIC 上而不是 TCP 上。而这个“HTTP over QUIC”就是 HTTP 协议的下一个大版本–HTTP/3。</p>
<h4 id="QUIC-新功能"><a href="#QUIC-新功能" class="headerlink" title="QUIC 新功能"></a>QUIC 新功能</h4><ul>
<li>实现了类似 TCP 的流量控制、传输可靠性的功能；</li>
<li>实现了快速握手功；</li>
<li>集成了 TLS 加密功能；</li>
<li>多路复用，彻底解决 TCP 中队头阻塞的问题。</li>
</ul>
<h2 id="二、HTTPS"><a href="#二、HTTPS" class="headerlink" title="二、HTTPS"></a>二、HTTPS</h2><p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的 HTTP 通道，简单讲是 HTTP 的安全版。</p>
<p><strong>HTTP 和 HTTPS 的区别：</strong></p>
<ul>
<li>HTTP 是明文传输，HTTPS 通过 SSL/TLS 进行了加密；</li>
<li>HTTP 的端口号是 80，HTTPS 的是 443；</li>
<li>HTTPS 需要到 CA 申请证书，一般免费证书很少，需要交费；</li>
<li>HTTPS 的连接很简单，是无状态的；HTTPS 协议是 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全。</li>
</ul>
<p><a href="https://juejin.im/post/5b1e93aa5188257d3914280e">掘金：关于 http 协议，你必须要知道的</a></p>
<p><a href="https://juejin.im/post/5d9abde7e51d4578110dc77f">掘金：解密 http/2 与 http/3 的新特性</a></p>
<p><a href="https://juejin.im/post/59e4c02151882578d02f4aca">掘金：谈谈 HTTPS</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>网络协议：http状态码</title>
    <url>/2019/10/20/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%EF%BC%9Ahttp%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<table>
<thead>
<tr>
<th>分类</th>
<th>分类描述</th>
</tr>
</thead>
<tbody><tr>
<td>1**</td>
<td>信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td>2**</td>
<td>成功，操作被成功接收并处理</td>
</tr>
<tr>
<td>3**</td>
<td>重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td>4**</td>
<td>客户端错误，请求包含语法错误或无法完成请求</td>
</tr>
<tr>
<td>5**</td>
<td>服务器错误，服务器在处理请求的过程中发生了错误</td>
</tr>
</tbody></table>
<a id="more"></a>

<p>HTTP 状态码列表:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态码英文名称</th>
<th>中文描述</th>
</tr>
</thead>
<tbody><tr>
<td>100</td>
<td>Continue</td>
<td>继续。<a href="http://www.dreamdu.com/webbuild/client_vs_server/">客户端</a>应继续其请求</td>
</tr>
<tr>
<td>101</td>
<td>Switching Protocols</td>
<td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到 HTTP 的新版本协议</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>200</td>
<td>OK</td>
<td>请求成功。一般用于 GET 与 POST 请求</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td>已创建。成功请求并创建了新的资源</td>
</tr>
<tr>
<td>202</td>
<td>Accepted</td>
<td>已接受。已经接受请求，但未处理完成</td>
</tr>
<tr>
<td>203</td>
<td>Non-Authoritative Information</td>
<td>非授权信息。请求成功。但返回的 meta 信息不在原始的服务器，而是一个副本</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td>
</tr>
<tr>
<td>205</td>
<td>Reset Content</td>
<td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td>
</tr>
<tr>
<td>206</td>
<td>Partial Content</td>
<td>部分内容。服务器成功处理了部分 GET 请求</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>300</td>
<td>Multiple Choices</td>
<td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td>
</tr>
<tr>
<td>301</td>
<td>Moved Permanently</td>
<td>永久移动。请求的资源已被永久的移动到新 URI，返回信息会包括新的 URI，浏览器会自动定向到新 URI。今后任何新的请求都应使用新的 URI 代替</td>
</tr>
<tr>
<td>302</td>
<td>Found</td>
<td>临时移动。与 301 类似。但资源只是临时被移动。客户端应继续使用原有 URI</td>
</tr>
<tr>
<td>303</td>
<td>See Other</td>
<td>查看其它地址。与 301 类似。使用 GET 和 POST 请求查看</td>
</tr>
<tr>
<td>304</td>
<td>Not Modified</td>
<td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td>
</tr>
<tr>
<td>305</td>
<td>Use Proxy</td>
<td>使用代理。所请求的资源必须通过代理访问</td>
</tr>
<tr>
<td>306</td>
<td>Unused</td>
<td>已经被废弃的 HTTP 状态码</td>
</tr>
<tr>
<td>307</td>
<td>Temporary Redirect</td>
<td>临时重定向。与 302 类似。使用 GET 请求重定向</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>400</td>
<td>Bad Request</td>
<td>客户端请求的语法错误，服务器无法理解</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td>请求要求用户的身份认证</td>
</tr>
<tr>
<td>402</td>
<td>Payment Required</td>
<td>保留，将来使用</td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td>服务器理解请求客户端的请求，但是拒绝执行此请求</td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td>
</tr>
<tr>
<td>405</td>
<td>Method Not Allowed</td>
<td>客户端请求中的方法被禁止</td>
</tr>
<tr>
<td>406</td>
<td>Not Acceptable</td>
<td>服务器无法根据客户端请求的内容特性完成请求</td>
</tr>
<tr>
<td>407</td>
<td>Proxy Authentication Required</td>
<td>请求要求代理的身份认证，与 401 类似，但请求者应当使用代理进行授权</td>
</tr>
<tr>
<td>408</td>
<td>Request Time-out</td>
<td>服务器等待客户端发送的请求时间过长，超时</td>
</tr>
<tr>
<td>409</td>
<td>Conflict</td>
<td>服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td>
</tr>
<tr>
<td>410</td>
<td>Gone</td>
<td>客户端请求的资源已经不存在。410 不同于 404，如果资源以前有现在被永久删除了可使用 410 代码，网站设计人员可通过 301 代码指定资源的新位置</td>
</tr>
<tr>
<td>411</td>
<td>Length Required</td>
<td>服务器无法处理客户端发送的不带 Content-Length 的请求信息</td>
</tr>
<tr>
<td>412</td>
<td>Precondition Failed</td>
<td>客户端请求信息的先决条件错误</td>
</tr>
<tr>
<td>413</td>
<td>Request Entity Too Large</td>
<td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个 Retry-After 的响应信息</td>
</tr>
<tr>
<td>414</td>
<td>Request-URI Too Large</td>
<td>请求的 URI 过长（URI 通常为网址），服务器无法处理</td>
</tr>
<tr>
<td>415</td>
<td>Unsupported Media Type</td>
<td>服务器无法处理请求附带的媒体格式</td>
</tr>
<tr>
<td>416</td>
<td>Requested range not satisfiable</td>
<td>客户端请求的范围无效</td>
</tr>
<tr>
<td>417</td>
<td>Expectation Failed</td>
<td>服务器无法满足 Expect 的请求头信息</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>500</td>
<td>Internal Server Error</td>
<td>服务器内部错误，无法完成请求</td>
</tr>
<tr>
<td>501</td>
<td>Not Implemented</td>
<td>服务器不支持请求的功能，无法完成请求</td>
</tr>
<tr>
<td>502</td>
<td>Bad Gateway</td>
<td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td>
</tr>
<tr>
<td>503</td>
<td>Service Unavailable</td>
<td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的 Retry-After 头信息中</td>
</tr>
<tr>
<td>504</td>
<td>Gateway Time-out</td>
<td>充当网关或代理的服务器，未及时从远端服务器获取请求</td>
</tr>
<tr>
<td>505</td>
<td>HTTP Version not supported</td>
<td>服务器不支持请求的 HTTP 协议的版本，无法完成处理</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>网络协议：post和get的区别</title>
    <url>/2019/10/20/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%EF%BC%9Apost%E5%92%8Cget%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="一、post-和-get-的区别"><a href="#一、post-和-get-的区别" class="headerlink" title="一、post 和 get 的区别"></a>一、post 和 get 的区别</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&mid=100000054&idx=1&sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd">详见参考</a></p>
<a id="more"></a>

<h2 id="二、post-提交数据方式"><a href="#二、post-提交数据方式" class="headerlink" title="二、post 提交数据方式"></a>二、post 提交数据方式</h2><h3 id="1、application-json"><a href="#1、application-json" class="headerlink" title="1、application/json"></a>1、application/json</h3><p>这是最常见的 json 格式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json;charset=utf-8</span><br><span class="line"></span><br><span class="line">&#123;&quot;input1&quot;:&quot;xxx&quot;,&quot;input2&quot;:&quot;ooo&quot;,&quot;remember&quot;:false&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、application-x-www-form-urlencoded"><a href="#2、application-x-www-form-urlencoded" class="headerlink" title="2、application/x-www-form-urlencoded"></a>2、application/x-www-form-urlencoded</h3><p>浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded;charset=utf-8</span><br><span class="line"></span><br><span class="line">input1=xxx&amp;input2=ooo&amp;remember=false</span><br></pre></td></tr></table></figure>

<h3 id="3、multipart-form-data"><a href="#3、multipart-form-data" class="headerlink" title="3、multipart/form-data"></a>3、multipart/form-data</h3><p>当你需要提交文件、非 ASCII 码的数据或者是二进制流数据，则使用这种提交方式。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">POST http://www.example.com HTTP/<span class="number">1.1</span></span><br><span class="line">Content-<span class="keyword">Type</span>:multipart/form-data; boundary=<span class="comment">----WebKitFormBoundaryPAlLG7hJKNYc4ft3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span></span><br><span class="line">Content-Disposition: form-data; <span class="type">name</span>=&quot;text&quot;</span><br><span class="line"></span><br><span class="line">demo</span><br><span class="line"><span class="comment">------WebKitFormBoundaryPAlLG7hJKNYc4ft3</span></span><br><span class="line">Content-Disposition: form-data; <span class="type">name</span>=&quot;file&quot;; filename=&quot;demo.png&quot;</span><br><span class="line">Content-<span class="keyword">Type</span>: image/png</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">------WebKitFormBoundaryPAlLG7hJKNYc4ft3--</span></span><br></pre></td></tr></table></figure>

<h3 id="4、text-xml"><a href="#4、text-xml" class="headerlink" title="4、text/xml"></a>4、text/xml</h3><p>这种直接传的 xml 格式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--?xml version=&quot;1.0&quot;?--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">methodcall</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">methodname</span>&gt;</span>examples.getStateName<span class="tag">&lt;/<span class="name">methodname</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">params</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">i4</span>&gt;</span>41<span class="tag">&lt;/<span class="name">i4</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">params</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">methodcall</span>&gt;</span></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>网络协议：前端跨域</title>
    <url>/2019/10/19/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%EF%BC%9A%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<meta name="referrer" 
content="no-referrer"/>

<h2 id="一、什么是跨域？"><a href="#一、什么是跨域？" class="headerlink" title="一、什么是跨域？"></a>一、什么是跨域？</h2><p><strong>同源策略</strong>：协议、域名、端口相同</p>
<p>如果协议、域名、端口不同会发生跨域</p>
<h2 id="二、解决跨域问题"><a href="#二、解决跨域问题" class="headerlink" title="二、解决跨域问题"></a>二、解决跨域问题</h2><h3 id="1、通过-JSONP-跨域"><a href="#1、通过-JSONP-跨域" class="headerlink" title="1、通过 JSONP 跨域"></a>1、通过 JSONP 跨域</h3><p>利用&lt; script &gt;标签没有跨域限制的漏洞。通过&lt; script &gt;标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。</p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://domain/api?param1=a&amp;param2=b&amp;callback=jsonp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    	<span class="built_in">console</span>.log(data)</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JSONP 使用简单且兼容性不错，但是只限于<code>get</code>请求。</p>
<p>在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP，以下是简单实现。</p>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url, jsonpCallback, success</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">  script.src = <span class="built_in">url</span></span><br><span class="line">  script.async = <span class="literal">true</span></span><br><span class="line">  script.type = <span class="string">&#x27;text/javascript&#x27;</span></span><br><span class="line">  <span class="built_in">window</span>[jsonpCallback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    success &amp;&amp; success(data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">&#125;</span><br><span class="line">jsonp(<span class="string">&#x27;http://xxx&#x27;</span>, <span class="string">&#x27;callback&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2、cors"><a href="#2、cors" class="headerlink" title="2、cors"></a>2、cors</h3><p>CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 <code>XDomainRequest</code> 来实现。</p>
<p>浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。</p>
<p>服务端设置 <code>Access-Control-Allow-Origin</code> 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p>
<p>虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为<strong>简单请求和复杂请求</strong>。</p>
<h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>以 Ajax 为例，当满足以下条件时，会触发简单请求</p>
<ol>
<li>使用下列方法之一：<ul>
<li><code>GET</code></li>
<li><code>HEAD</code></li>
<li><code>POST</code></li>
</ul>
</li>
<li><code>Content-type（实体头部）</code> 的值仅限于下列三者之一：<ul>
<li><code>text/plain</code></li>
<li><code>multipart/form-data</code></li>
<li><code>application/x-www-form-urlencoded</code></li>
</ul>
</li>
</ol>
<p>请求中的任意 <code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器； <code>XMLHttpRequestUpload</code> 对象可以使用 <code>XMLHttpRequest.upload</code> 属性访问。</p>
<h4 id="复杂请求"><a href="#复杂请求" class="headerlink" title="复杂请求"></a>复杂请求</h4><p>不符合以上条件的就是复杂请求</p>
<p>对于复杂请求来说，首先会发起一个预检请求，该请求是 <code>option</code> 方法的，通过该请求来知道服务端是否允许跨域请求。</p>
<p>对于预检请求来说，如果你使用过 Node 来设置 CORS 的话，可能会遇到过这么一个坑。</p>
<p>以下以 express 框架举例：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">app.use((req, <span class="keyword">res</span>, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">res</span>.header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">  <span class="keyword">res</span>.header(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;PUT, GET, POST, DELETE, OPTIONS&#x27;</span>)</span><br><span class="line">  <span class="keyword">res</span>.header(</span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Origin, X-Requested-With, Content-Type, Accept, Authorization, Access-Control-Allow-Credentials&#x27;</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>该请求会验证你的 <code>Authorization</code> 字段，没有的话就会报错。</p>
<p>当前端发起了复杂请求后，你会发现就算你代码是正确的，返回结果也永远是报错的。因为预检请求也会进入回调中，也会触发 <code>next</code> 方法，因为预检请求并不包含 <code>Authorization</code> 字段，所以服务端会报错。</p>
<p>想解决这个问题很简单，只需要在回调中过滤 <code>option</code> 方法即可。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">res</span>.statusCode = <span class="number">204</span></span><br><span class="line"><span class="keyword">res</span>.setHeader(<span class="string">&#x27;Content-Length&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="keyword">res</span>.end()</span><br></pre></td></tr></table></figure>

<h3 id="3、document-domain"><a href="#3、document-domain" class="headerlink" title="3、document.domain"></a>3、document.domain</h3><p>该方式只能用于<strong>二级域名相同</strong>的情况下，比如 <code>a.test.com</code> 和 <code>b.test.com</code> 适用于该方式。</p>
<p>只需要给页面添加 <code>document.domain = &#39;test.com&#39;</code> 表示二级域名都相同就可以实现跨域.</p>
<h3 id="4、postMessage"><a href="#4、postMessage" class="headerlink" title="4、postMessage"></a>4、postMessage</h3><p>这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送消息端</span></span><br><span class="line">window.parent.postMessage(<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;http://test.com&#x27;</span>)</span><br><span class="line"><span class="comment">// 接收消息端</span></span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MessageChannel()</span><br><span class="line">mc.addEventListener(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">event</span> =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> origin = <span class="keyword">event</span>.origin || <span class="keyword">event</span>.originalEvent.origin</span><br><span class="line">  <span class="keyword">if</span> (origin === <span class="string">&#x27;http://test.com&#x27;</span>) &#123;</span><br><span class="line">    console.log(<span class="string">&#x27;验证通过&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>面经</title>
    <url>/2019/10/12/%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="2019-秋招"><a href="#2019-秋招" class="headerlink" title="2019 秋招"></a>2019 秋招</h2><h3 id="一、作业帮"><a href="#一、作业帮" class="headerlink" title="一、作业帮"></a>一、作业帮</h3><h4 id="正式一面"><a href="#正式一面" class="headerlink" title="正式一面"></a>正式一面</h4><p>1、<a href="https://cjy1.github.io/2019/10/15/html%EF%BC%9A%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E3%80%81%E8%A1%8C%E5%86%85%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E3%80%81%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0/">行内元素、行内块级元素、块级元素</a></p>
<a id="more"></a>

<p>2、<a href="https://cjy1.github.io/2019/10/15/css%EF%BC%9A%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%8F%8Abox-sizing/">盒模型</a></p>
<p>3、<a href="https://cjy1.github.io/2019/10/15/css%EF%BC%9A%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%8F%8Abox-sizing/">box-sizing</a></p>
<p>4、<a href="https://cjy1.github.io/2019/10/16/css%EF%BC%9A%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/">垂直水平居中</a></p>
<p>5、<a href="https://juejin.im/post/5cf468a9f265da1bb77652aa">闭包原理</a></p>
<p>6、原型、原型链继承</p>
<p>7、<a href="https://cjy1.github.io/2019/10/19/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/">vue 双向绑定原理</a></p>
<p>8、HTTP 协议，七层模型</p>
<p>​ 七层模型：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</p>
<p>9、<a href="https://cjy1.github.io/2019/09/09/%E5%AD%A6%E4%B9%A0Git/">git 版本管理工具</a></p>
<h3 id="二、哈啰出行"><a href="#二、哈啰出行" class="headerlink" title="二、哈啰出行"></a>二、哈啰出行</h3><h4 id="正式一面-1"><a href="#正式一面-1" class="headerlink" title="正式一面"></a>正式一面</h4><p>1、浏览器输入 URL 到页面展示的过程</p>
<p>2、<a href="https://cjy1.github.io/2019/10/19/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/">vue 响应式</a></p>
<p>3、项目（难点）</p>
<p>4、自身优点</p>
<p>5、性能优化</p>
<p><a href="https://juejin.im/post/59672fbff265da6c3f70cd53">参照掘金</a></p>
<h3 id="三、滴滴"><a href="#三、滴滴" class="headerlink" title="三、滴滴"></a>三、滴滴</h3><h4 id="实习一面"><a href="#实习一面" class="headerlink" title="实习一面"></a>实习一面</h4><p>1、项目</p>
<p>2、<a href="https://cjy1.github.io/2019/10/18/float%E5%92%8Cposition/">position（absolut 边界）</a></p>
<p>3、<a href="https://cjy1.github.io/2019/10/13/flex%E5%B8%83%E5%B1%80/">flex 布局（align-self 和 align-item 的区别）</a></p>
<p>4、<a href="https://cjy1.github.io/2019/09/09/%E5%AD%A6%E4%B9%A0Git/">git</a></p>
<p>5、<a href="https://cjy1.github.io/2019/09/03/webpack%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/">webpack</a></p>
<p>6、<a href="https://cjy1.github.io/2019/10/13/typeof%E3%80%81instanceof%E4%BB%A5%E5%8F%8Aobject-prototyte-tostring-call/">instanceof（除了判断数据类型还在哪里见过）</a></p>
<p>7、<a href="https://cjy1.github.io/2019/10/14/%E6%95%B0%E7%BB%84/">数组方法（添加数据）</a></p>
<p>8、<a href="https://cjy1.github.io/2019/10/15/call%E3%80%81apply%E3%80%81bind/">apply、call、bind（手写 bind）</a></p>
<h3 id="四、驭势科技"><a href="#四、驭势科技" class="headerlink" title="四、驭势科技"></a>四、驭势科技</h3><h4 id="正式一面-2"><a href="#正式一面-2" class="headerlink" title="正式一面"></a>正式一面</h4><p>1、项目（微信授权登录流程）</p>
<p>2、egg 特点、优点</p>
<p>3、mongo 特点、优点</p>
<p>4、<a href="https://cjy1.github.io/2019/09/03/webpack%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/">webpack</a></p>
<p>5、<a href="https://cjy1.github.io/2019/09/09/%E5%AD%A6%E4%B9%A0Git/">git</a></p>
<p>6、es6（<a href="https://cjy1.github.io/2019/10/14/let%E3%80%81const%E3%80%81var/">let、const</a>、<a href="https://cjy1.github.io/2019/10/12/%E6%B5%85%E8%B0%88Promise/">promise 原理</a>）</p>
<h3 id="五、薪人薪事"><a href="#五、薪人薪事" class="headerlink" title="五、薪人薪事"></a>五、薪人薪事</h3><h4 id="实习一面-1"><a href="#实习一面-1" class="headerlink" title="实习一面"></a>实习一面</h4><p>1、<a href="https://cjy1.github.io/2019/10/15/%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%8F%8Abox-sizing/">盒模型、计算宽度</a></p>
<p>2、<a href="https://cjy1.github.io/2019/10/18/float%E5%92%8Cposition/">float</a></p>
<p>3、<a href="https://cjy1.github.io/2019/10/18/float%E5%92%8Cposition/">position</a></p>
<p>4、<a href="https://cjy1.github.io/2019/10/18/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AFEeventloop/">事件循环</a></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">console</span>.log(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="attribute">console</span>.log(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="attribute">setTimeout</span>(console.log(<span class="string">&quot;3&quot;</span>),<span class="number">0</span>);</span><br><span class="line"><span class="attribute">VM596</span>:<span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">VM596</span>:<span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="attribute">VM596</span>:<span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="attribute">setTimeout</span>(console.log(<span class="string">&quot;3&quot;</span>),<span class="number">0</span>);</span><br><span class="line"><span class="attribute">console</span>.log(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="attribute">console</span>.log(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="attribute">VM609</span>:<span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="attribute">VM609</span>:<span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">VM609</span>:<span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>5、<a href="https://cjy1.github.io/2019/10/19/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/">双向绑定</a></p>
<p>6、<a href="https://cjy1.github.io/2019/10/19/%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/">原生 js 添加事件（如果一开始有两个 ul 标签，为他们绑定事件，然后再添加两个 ul 标签，怎么给新添加的标签添加事件）</a></p>
<p>需要用到事件委托</p>
<p>7、<a href="https://cjy1.github.io/2019/10/14/%E6%95%B0%E7%BB%84/">数组常用方法</a></p>
<p>8、<a href="https://cjy1.github.io/2019/10/16/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/">数组去重（new Set()中是怎样实现的去重、map 怎么使用）</a></p>
<p>9、<a href="https://cjy1.github.io/2019/10/12/%E6%B5%85%E8%B0%88Promise/">异步</a></p>
<p>10、<a href="https://cjy1.github.io/2019/10/19/css3%E5%B1%9E%E6%80%A7/">css3 新特性</a></p>
<p>11、<a href="https://cjy1.github.io/2019/10/15/%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E3%80%81%E8%A1%8C%E5%86%85%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E3%80%81%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0/">块级元素、行内元素、行内块级元素</a></p>
<p>12、<a href="https://cjy1.github.io/2019/10/18/float%E5%92%8Cposition/">float 和 position 区别，float 和 position:absolutede</a></p>
<p>13、项目</p>
<p>14、项目中 http 是怎么实现请求的</p>
<p>15、<a href="https://cjy1.github.io/2019/10/19/css%E9%80%89%E6%8B%A9%E5%99%A8%E5%8F%8A%E4%BC%98%E5%85%88%E7%BA%A7/">css 基本选择器（!important）、优先级</a></p>
<p>16、三个 div 盒子，一个<code>float:left</code>， 一个<code>float:left</code>， 一个不加 结果会怎么样？</p>
<p><img src="https://github.com/cjy1/picture/blob/master/TIM%E5%9B%BE%E7%89%8720191018132837.png?raw=true"></p>
<p>17、两个人或者几个人一起写一个页面，如果 css 的 className 重名了怎么办？</p>
<p>​ vue 在 style 标签上加上 scoped</p>
<p>18、<a href="https://cjy1.github.io/2019/10/19/%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81/">重绘和回流</a></p>
<h3 id="六、企业门户网站"><a href="#六、企业门户网站" class="headerlink" title="六、企业门户网站"></a>六、企业门户网站</h3><h4 id="实习一面-2"><a href="#实习一面-2" class="headerlink" title="实习一面"></a>实习一面</h4><p>1、<a href="https://cjy1.github.io/2019/10/19/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/">vue 生命周期</a></p>
<p>2、<a href="https://cjy1.github.io/2019/10/19/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/">（父子）组件通信（props 怎么使用）</a></p>
<p>3、<a href="https://cjy1.github.io/2019/10/19/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/">vuex</a></p>
<p>4、v-show 和 v-if</p>
<p><strong>v-if</strong> 是<strong>真正</strong>的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<p><strong>v-show</strong> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。</p>
<p>所以，v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。</p>
<p>5、如果建立四个 Tab 进行切换，应该怎么做</p>
<p>（1）v-show 控制内容切换</p>
<p>（2）组件切换</p>
<p>知识点主要是 vue 中 is 的特性，和 keep-alive 缓存</p>
<p><img src="https://img-blog.csdnimg.cn/20190511170840371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjkwNTQ3,size_16,color_FFFFFF,t_70"></p>
<p>（3）路由切换</p>
<p>通过 router-link 实现。</p>
<p><img src="https://img-blog.csdnimg.cn/20190511174550481.png"></p>
<p>6、项目</p>
<p>7、<a href="https://cjy1.github.io/2019/10/18/%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%92%8C%E5%A4%9A%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%8C%BA%E5%88%AB/">单页面或多页面的优缺点</a></p>
<p>8、<a href="https://cjy1.github.io/2019/10/17/%E5%85%83%E7%B4%A0%E5%8D%95%E4%BD%8D%E7%9A%84%E4%BD%BF%E7%94%A8/">px、em、rem（rem 怎么换算成 px）</a></p>
<h3 id="七、泛微网络"><a href="#七、泛微网络" class="headerlink" title="七、泛微网络"></a>七、泛微网络</h3><h4 id="正式一面-3"><a href="#正式一面-3" class="headerlink" title="正式一面"></a>正式一面</h4><p>1、<a href="https://cjy1.github.io/2019/10/19/set%E3%80%81map%E3%80%81weakSet%E3%80%81weakMap/">object、set、map、weakset、weakmap 区别</a></p>
<p>2、类数组转换成数组</p>
<ul>
<li>遍历类数组，将元素依次放入一个空数组</li>
<li>用扩展运算符或者 Array.form()方法转换<code>[...类数组]</code> 或者<code>Array.form(类数组)</code></li>
<li>用 apply 展开 <code>[].concat.apply([],类数组)</code></li>
</ul>
<p>3、<a href="https://cjy1.github.io/2019/10/19/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F/">跨域（cors）</a></p>
<p>4、<a href="https://cjy1.github.io/2019/10/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/">浏览器的缓存机制</a></p>
<p>5、<a href="https://cjy1.github.io/2019/10/20/http%E7%8A%B6%E6%80%81%E7%A0%81/">http 状态码（300）</a></p>
<p>6、<a href="https://cjy1.github.io/2019/10/20/post%E5%92%8Cget%E7%9A%84%E5%8C%BA%E5%88%AB/">post 和 get 区别（post 提交数据方式）</a></p>
<p>7、<a href="https://cjy1.github.io/2019/09/09/%E5%AD%A6%E4%B9%A0Git/">git（哪两条指令可以合并成<code>git pull</code>） </a></p>
<p>8、<a href="https://cjy1.github.io/2019/10/20/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/">模块化开发</a></p>
<p>9、性能优化（怎么实现）</p>
<p><a href="https://juejin.im/post/59672fbff265da6c3f70cd53">参照掘金</a></p>
<p>10、<a href="https://cjy1.github.io/2019/10/19/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F/">options 预检请求</a></p>
<p>11、cookie 和 session 的区别</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA4MjA0MTc4NQ==&mid=504090000&idx=3&sn=f57d4f194c902daadd80296d5b8ed001#rd">参考</a></p>
<p>12、如果同时请求三个 url 之后再执行接下来的程序，应该怎么做</p>
<p>Promise.all().then()</p>
<p>13、异步</p>
<p>14、<a href="https://cjy1.github.io/2019/09/03/webpack%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/">webpack</a></p>
<p>15、<a href="https://cjy1.github.io/2019/10/19/css%E9%80%89%E6%8B%A9%E5%99%A8%E5%8F%8A%E4%BC%98%E5%85%88%E7%BA%A7/">css 选择器优先级（有没有使用过属性选择器？）</a></p>
<p>16、http 协议（请求头）</p>
<p>参见<a href="https://www.runoob.com/http/http-tutorial.html">菜鸟教程|HTTP 教程</a></p>
<h4 id="正式二面"><a href="#正式二面" class="headerlink" title="正式二面"></a>正式二面</h4><ol>
<li>课程</li>
<li>成绩</li>
<li>优点</li>
<li>值得自豪的事</li>
</ol>
<h3 id="八、老虎集团"><a href="#八、老虎集团" class="headerlink" title="八、老虎集团"></a>八、老虎集团</h3><h4 id="正式一面-4"><a href="#正式一面-4" class="headerlink" title="正式一面"></a>正式一面</h4><ol>
<li>float</li>
<li>position</li>
<li>原型、原型链继承</li>
<li>数组方法</li>
<li>数据类型判断</li>
</ol>
<h3 id="九、GrowingIO"><a href="#九、GrowingIO" class="headerlink" title="九、GrowingIO"></a>九、GrowingIO</h3><h4 id="实习一面-3"><a href="#实习一面-3" class="headerlink" title="实习一面"></a>实习一面</h4><ol>
<li>浏览器输入 url 的过程</li>
<li>重回回流</li>
<li>dom 节点</li>
<li>TCP</li>
<li>浏览器缓存机制</li>
<li>http 请求方式</li>
<li>忘记了。。。。</li>
</ol>
<h3 id="十、北京秀餐科技"><a href="#十、北京秀餐科技" class="headerlink" title="十、北京秀餐科技"></a>十、北京秀餐科技</h3><h4 id="实习（已拿到）"><a href="#实习（已拿到）" class="headerlink" title="实习（已拿到）"></a>实习（已拿到）</h4><ol>
<li>数据库事务</li>
<li>强类型语言和弱类型语言有什么区别</li>
<li>node 是单线程还是多线程</li>
<li>vue 生命周期</li>
<li>项目</li>
<li>忘记了。。。。</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>elixir：基础数据结构</title>
    <url>/2021/03/01/elixir%EF%BC%9A%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><img src="https://img.draveness.me/2019-02-13-elixir-programming-language.png"></p>
<a id="more"></a>

<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>简单介绍下<code>elixir</code>，<code>elixir</code>官方将其定义成了【一个用于构建可伸缩、可维护应用的动态、函数式编程语言】、它运行在Erlang的虚拟机上，能够充分利用虚拟机的优点运行低延时、高容错的分布式系统。</p>
<h4 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h4><p>函数式编程其实是一种编程范式，它强调程序执行的结果而不是过程。</p>
<h4 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h4><p>即所有数据结构一旦被初始化就不能被改变。</p>
<h4 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h4><p>这个特性不仅能够对数据结构进行解构，还能够帮助根据函数的入参对方法逻辑进行拆分使代码更加清晰。</p>
<h4 id="面向并发"><a href="#面向并发" class="headerlink" title="面向并发"></a>面向并发</h4><h3 id="二、数据结构"><a href="#二、数据结构" class="headerlink" title="二、数据结构"></a>二、数据结构</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>            =&gt; <span class="built_in">int</span>eger</span><br><span class="line"><span class="number">0x1F</span>         =&gt; <span class="built_in">int</span>eger</span><br><span class="line"><span class="number">1.0</span>          =&gt; <span class="built_in">float</span></span><br><span class="line">:atom        =&gt; atom / symbol</span><br><span class="line"><span class="string">&quot;elixir&quot;</span>     =&gt; <span class="built_in">string</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]    =&gt; list</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;    =&gt; tuple</span><br></pre></td></tr></table></figure>

<h4 id="1-基础运算"><a href="#1-基础运算" class="headerlink" title="1. 基础运算"></a>1. 基础运算</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span>+ <span class="number">2</span>       =&gt; <span class="number">3</span></span><br><span class="line"><span class="symbol">5 </span>* <span class="number">5</span>       =&gt; <span class="number">25</span></span><br><span class="line"><span class="symbol">10 </span>/ <span class="number">2</span>      =&gt; <span class="number">5.0</span></span><br></pre></td></tr></table></figure>
<p><code>elixir</code>同时支持二进制、八进制和十六进制的数字</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="number">0x1F</span>         =&gt; <span class="number">31</span> </span><br><span class="line"><span class="number">0o777</span>        =&gt; <span class="number">511</span></span><br><span class="line"><span class="number">0b1010</span>       =&gt; <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h4 id="2-布尔值"><a href="#2-布尔值" class="headerlink" title="2. 布尔值"></a>2. 布尔值</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">is_boolean</span><span class="params">(true)</span></span>   =&gt; true</span><br><span class="line"><span class="function"><span class="title">is_boolean</span><span class="params">(<span class="number">1</span>)</span></span>      =&gt; false</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以使用<code>is_integer/1</code>检查参数是否是整数<br>可以使用<code>is_float/1</code>检查参数是否为浮点数<br>可以使用<code>is_number/1</code>检查参数是否为上面两个中的一个</p>
</blockquote>
<h4 id="3-原子"><a href="#3-原子" class="headerlink" title="3. 原子"></a>3. 原子</h4><p>也就是<code>Symbols</code>，代表以名字为值的恒量</p>
<h4 id="4-字符串"><a href="#4-字符串" class="headerlink" title="4. 字符串"></a>4. 字符串</h4><p>字符串必须用双引号来表达，并且用UTF-8编码</p>
<p>（1）<code>IO.puts/1</code>来打印字符串</p>
<p>（2）字符串在底层是用二进制，<code>is_binary</code></p>
<p>（3）<code>byte_size</code>计算字符串的字节数</p>
<p>（4）<code>String.length/1</code>计算字符串长度</p>
<blockquote>
<p>⚠️ 单引号和双引号是不一样的</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hello&#x27;</span> == <span class="string">&quot;hello&quot;</span>  =&gt; <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<h4 id="5-匿名函数"><a href="#5-匿名函数" class="headerlink" title="5. 匿名函数"></a>5. 匿名函数</h4><p>函数用关键值<code>fn</code>和<code>end</code>来表达</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add</span> = <span class="meta">fn</span> a, <span class="keyword">b</span> -&gt; a + <span class="keyword">b</span> <span class="meta">end</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>⚠️ 当调用匿名函数时，在指向这个匿名函数的变量名和圆括号之间需要有一个点（.）<code>add.(1, 2)</code></p>
</blockquote>
<blockquote>
<p>❕在一个函数内部的变量赋值，并不影响函数外部的环境</p>
</blockquote>
<p>（1）<code>is_function/1</code>检验是否为函数</p>
<p>（2）<code>if_funciton/2</code>检查一个函数接受的函数数量</p>
<h4 id="6-（链接）列表"><a href="#6-（链接）列表" class="headerlink" title="6. （链接）列表"></a>6. （链接）列表</h4><p>用方括号标识一个列表，内部的类型是随意的</p>
<p>使用函数<code>++2</code>，<code>--2</code>进行合并或相异操作</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="string">++</span> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]                          <span class="string">=&gt;</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="literal">true</span>, <span class="number">2</span>, <span class="literal">false</span>, <span class="number">3</span>, <span class="literal">true</span>] <span class="string">--</span> [<span class="literal">true</span>, <span class="literal">false</span>]   <span class="string">=&gt;</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">true</span>]</span><br></pre></td></tr></table></figure>

<p>（1）<code>hd/1</code> 获得列表的第一个元素</p>
<p>（2）<code>tl</code> 获得除第一个元素剩余的元素</p>
<blockquote>
<p>⚠️ 获取一个空列表的头会导致一个错误 <code>(ArgumentError) argument error</code></p>
</blockquote>
<h4 id="7-元组"><a href="#7-元组" class="headerlink" title="7. 元组"></a>7. 元组</h4><p>元组用花括号表示</p>
<p>（1） <code>elem/2</code>获取元组中的某个元素</p>
<p>（2）<code>set_elem/3</code>可以把一个元素放在一个特定的索引上（返回一个新元组，不会破坏原元组）</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>elixir</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一道算法打卡：找到所有数组中消失的数字</title>
    <url>/2021/02/13/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E6%89%93%E5%8D%A1%EF%BC%9A%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<p><strong>题目：</strong><br>给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。</p>
<a id="more"></a>

<p>找到所有在 [1, n] 范围之间没有出现在数组中的数字。</p>
<p>您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。</p>
<p>示例:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">[<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<p>来源：力扣（LeetCode）</p>
<p>链接：<a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array">https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array</a></p>
<p><strong>解题思路：</strong></p>
<p>暴力法，遍历，但是费时</p>
<p><strong>代码展示：</strong></p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">var</span> findDisappearedNumbers = function(nums) &#123;</span><br><span class="line">    const len = nums.<span class="built_in">length</span>;</span><br><span class="line">    const res = [];</span><br><span class="line">    <span class="built_in">let</span> <span class="built_in">num</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">let</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!nums.includes(<span class="built_in">num</span>)) &#123;</span><br><span class="line">            res.<span class="built_in">push</span>(<span class="built_in">num</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">num</span> = <span class="built_in">num</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
